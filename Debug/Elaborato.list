
Elaborato.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007098  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08007228  08007228  00008228  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075d8  080075d8  000091d8  2**0
                  CONTENTS
  4 .ARM          00000008  080075d8  080075d8  000085d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075e0  080075e0  000091d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075e0  080075e0  000085e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080075e4  080075e4  000085e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080075e8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d8  2**0
                  CONTENTS
 10 .bss          00000968  200001d8  200001d8  000091d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b40  20000b40  000091d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013038  00000000  00000000  00009208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b7c  00000000  00000000  0001c240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001270  00000000  00000000  0001edc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e50  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fc6e  00000000  00000000  00020e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017567  00000000  00000000  00040aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb816  00000000  00000000  00058055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011386b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ea0  00000000  00000000  001138b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00119750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007210 	.word	0x08007210

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08007210 	.word	0x08007210

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <HX711_Init>:
#include "hx711.h"

static uint8_t GAIN = 128;

void HX711_Init(void) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(HX711_DT_PORT, &GPIO_InitStruct);
*/
    // Inizializza il pin SCK a basso
    HAL_GPIO_WritePin(HX711_SCK_PORT, HX711_SCK_PIN, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb6:	f001 f927 	bl	8001e08 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(HX711_DT_PORT, HX711_DT_PIN, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2102      	movs	r1, #2
 8000bbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc2:	f001 f921 	bl	8001e08 <HAL_GPIO_WritePin>
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HX711_IsReady>:

bool HX711_IsReady(void) {
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0
    // Controlla se il DT è basso, indicando che il HX711 è pronto
	if( GPIO_PIN_RESET == HAL_GPIO_ReadPin(HX711_DT_PORT, HX711_DT_PIN))
 8000bce:	2102      	movs	r1, #2
 8000bd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd4:	f001 f900 	bl	8001dd8 <HAL_GPIO_ReadPin>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d101      	bne.n	8000be2 <HX711_IsReady+0x18>
		return true;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e000      	b.n	8000be4 <HX711_IsReady+0x1a>
	else
		return false;
 8000be2:	2300      	movs	r3, #0
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <HX711_SetGain>:

void HX711_SetGain(uint8_t gain) {
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
    switch (gain) {
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	2b80      	cmp	r3, #128	@ 0x80
 8000bf6:	d006      	beq.n	8000c06 <HX711_SetGain+0x1e>
 8000bf8:	2b80      	cmp	r3, #128	@ 0x80
 8000bfa:	dc10      	bgt.n	8000c1e <HX711_SetGain+0x36>
 8000bfc:	2b20      	cmp	r3, #32
 8000bfe:	d00a      	beq.n	8000c16 <HX711_SetGain+0x2e>
 8000c00:	2b40      	cmp	r3, #64	@ 0x40
 8000c02:	d004      	beq.n	8000c0e <HX711_SetGain+0x26>
 8000c04:	e00b      	b.n	8000c1e <HX711_SetGain+0x36>
        case 128: // channel A, gain factor 128
            GAIN = 1;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	@ (8000c34 <HX711_SetGain+0x4c>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	701a      	strb	r2, [r3, #0]
            break;
 8000c0c:	e00b      	b.n	8000c26 <HX711_SetGain+0x3e>
        case 64:  // channel A, gain factor 64
            GAIN = 3;
 8000c0e:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <HX711_SetGain+0x4c>)
 8000c10:	2203      	movs	r2, #3
 8000c12:	701a      	strb	r2, [r3, #0]
            break;
 8000c14:	e007      	b.n	8000c26 <HX711_SetGain+0x3e>
        case 32:  // channel B, gain factor 32
            GAIN = 2;
 8000c16:	4b07      	ldr	r3, [pc, #28]	@ (8000c34 <HX711_SetGain+0x4c>)
 8000c18:	2202      	movs	r2, #2
 8000c1a:	701a      	strb	r2, [r3, #0]
            break;
 8000c1c:	e003      	b.n	8000c26 <HX711_SetGain+0x3e>
        default:  // default to channel A, gain factor 128
            GAIN = 1;
 8000c1e:	4b05      	ldr	r3, [pc, #20]	@ (8000c34 <HX711_SetGain+0x4c>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	701a      	strb	r2, [r3, #0]
            break;
 8000c24:	bf00      	nop
    }
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000000 	.word	0x20000000

08000c38 <HX711_Read>:

int32_t HX711_Read(void) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
    // Attendi che il HX711 sia pronto
	bool passo = HX711_IsReady();
 8000c3e:	f7ff ffc4 	bl	8000bca <HX711_IsReady>
 8000c42:	4603      	mov	r3, r0
 8000c44:	72fb      	strb	r3, [r7, #11]
    while (passo == false){};
 8000c46:	bf00      	nop
 8000c48:	7afb      	ldrb	r3, [r7, #11]
 8000c4a:	f083 0301 	eor.w	r3, r3, #1
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d1f9      	bne.n	8000c48 <HX711_Read+0x10>

    int32_t count = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	607b      	str	r3, [r7, #4]
    uint32_t value = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]

    // Lettura dei 24 bit di dati dal HX711
    for (int i = 0; i < 24; i++) {
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	e01e      	b.n	8000ca0 <HX711_Read+0x68>
        HAL_GPIO_WritePin(HX711_SCK_PORT, HX711_SCK_PIN, GPIO_PIN_SET);
 8000c62:	2201      	movs	r2, #1
 8000c64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c6c:	f001 f8cc 	bl	8001e08 <HAL_GPIO_WritePin>
        value = value << 1;
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	617b      	str	r3, [r7, #20]
        HAL_GPIO_WritePin(HX711_SCK_PORT, HX711_SCK_PIN, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c80:	f001 f8c2 	bl	8001e08 <HAL_GPIO_WritePin>
        if (HAL_GPIO_ReadPin(HX711_DT_PORT, HX711_DT_PIN) == GPIO_PIN_SET) {
 8000c84:	2102      	movs	r1, #2
 8000c86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c8a:	f001 f8a5 	bl	8001dd8 <HAL_GPIO_ReadPin>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d102      	bne.n	8000c9a <HX711_Read+0x62>
            value++;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	3301      	adds	r3, #1
 8000c98:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 24; i++) {
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	2b17      	cmp	r3, #23
 8000ca4:	dddd      	ble.n	8000c62 <HX711_Read+0x2a>
        }
    }

    // Imposta il gain per il prossimo ciclo
    for (int i = 0; i < GAIN; i++) {
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	e010      	b.n	8000cce <HX711_Read+0x96>
        HAL_GPIO_WritePin(HX711_SCK_PORT, HX711_SCK_PIN, GPIO_PIN_SET);
 8000cac:	2201      	movs	r2, #1
 8000cae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb6:	f001 f8a7 	bl	8001e08 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(HX711_SCK_PORT, HX711_SCK_PIN, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc4:	f001 f8a0 	bl	8001e08 <HAL_GPIO_WritePin>
    for (int i = 0; i < GAIN; i++) {
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	4b0d      	ldr	r3, [pc, #52]	@ (8000d04 <HX711_Read+0xcc>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	dbe8      	blt.n	8000cac <HX711_Read+0x74>
    }

    // Converti il valore letto in un int32_t
    if (value & 0x800000) {
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d004      	beq.n	8000cee <HX711_Read+0xb6>
        value |= 0xFF000000; // Se il valore è negativo
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	e003      	b.n	8000cf6 <HX711_Read+0xbe>
    } else {
        value &= 0x00FFFFFF; // Se il valore è positivo
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000cf4:	617b      	str	r3, [r7, #20]
    }
    count = (int32_t)value;
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	607b      	str	r3, [r7, #4]

    return count;
 8000cfa:	687b      	ldr	r3, [r7, #4]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000000 	.word	0x20000000

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0e:	f000 fd79 	bl	8001804 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d12:	f000 f839 	bl	8000d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d16:	f000 f985 	bl	8001024 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d1a:	f000 f897 	bl	8000e4c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d1e:	f000 f8d3 	bl	8000ec8 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000d22:	f000 f95d 	bl	8000fe0 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000d26:	f000 f90d 	bl	8000f44 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000d2a:	f000 fa51 	bl	80011d0 <ssd1306_Init>
  HAL_TIM_Base_Start(&htim2);
 8000d2e:	4814      	ldr	r0, [pc, #80]	@ (8000d80 <main+0x78>)
 8000d30:	f003 faca 	bl	80042c8 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(HX711_SCK_PORT, HX711_SCK_PIN, GPIO_PIN_SET);
 8000d34:	2201      	movs	r2, #1
 8000d36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d3e:	f001 f863 	bl	8001e08 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000d42:	200a      	movs	r0, #10
 8000d44:	f000 fdc4 	bl	80018d0 <HAL_Delay>
  HAL_GPIO_WritePin(HX711_SCK_PORT, HX711_SCK_PIN, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d52:	f001 f859 	bl	8001e08 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000d56:	200a      	movs	r0, #10
 8000d58:	f000 fdba 	bl	80018d0 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  // Inizializzazione HX711
  	  HX711_Init();
 8000d5c:	f7ff ff24 	bl	8000ba8 <HX711_Init>
      // Inizializzazione SSD1306
  	  HX711_SetGain(128);
 8000d60:	2080      	movs	r0, #128	@ 0x80
 8000d62:	f7ff ff41 	bl	8000be8 <HX711_SetGain>
  	  //HX711_IsReady();

      while (1) {

    	  int32_t weight = HX711_Read();
 8000d66:	f7ff ff67 	bl	8000c38 <HX711_Read>
 8000d6a:	6078      	str	r0, [r7, #4]

    	  printf("Peso : %ld",weight);
 8000d6c:	6879      	ldr	r1, [r7, #4]
 8000d6e:	4805      	ldr	r0, [pc, #20]	@ (8000d84 <main+0x7c>)
 8000d70:	f004 fad6 	bl	8005320 <iprintf>

    	  HAL_Delay(1000);
 8000d74:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d78:	f000 fdaa 	bl	80018d0 <HAL_Delay>
      while (1) {
 8000d7c:	bf00      	nop
 8000d7e:	e7f2      	b.n	8000d66 <main+0x5e>
 8000d80:	200002ac 	.word	0x200002ac
 8000d84:	08007228 	.word	0x08007228

08000d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b09e      	sub	sp, #120	@ 0x78
 8000d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000d92:	2228      	movs	r2, #40	@ 0x28
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f004 fb17 	bl	80053ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dac:	463b      	mov	r3, r7
 8000dae:	223c      	movs	r2, #60	@ 0x3c
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f004 fb09 	bl	80053ca <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000db8:	2303      	movs	r3, #3
 8000dba:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dbc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dc0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dca:	2310      	movs	r3, #16
 8000dcc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dd2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dd6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000dd8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000ddc:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dde:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000de2:	4618      	mov	r0, r3
 8000de4:	f001 fd9a 	bl	800291c <HAL_RCC_OscConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000dee:	f000 f9af 	bl	8001150 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df2:	230f      	movs	r3, #15
 8000df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df6:	2302      	movs	r3, #2
 8000df8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e02:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e08:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f002 fdc2 	bl	8003998 <HAL_RCC_ClockConfig>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e1a:	f000 f999 	bl	8001150 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e48 <SystemClock_Config+0xc0>)
 8000e20:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000e26:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f002 ff98 	bl	8003d64 <HAL_RCCEx_PeriphCLKConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000e3a:	f000 f989 	bl	8001150 <Error_Handler>
  }
}
 8000e3e:	bf00      	nop
 8000e40:	3778      	adds	r7, #120	@ 0x78
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	00020020 	.word	0x00020020

08000e4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e50:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec0 <MX_I2C1_Init+0x74>)
 8000e52:	4a1c      	ldr	r2, [pc, #112]	@ (8000ec4 <MX_I2C1_Init+0x78>)
 8000e54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000e56:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec0 <MX_I2C1_Init+0x74>)
 8000e58:	f240 220b 	movw	r2, #523	@ 0x20b
 8000e5c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e5e:	4b18      	ldr	r3, [pc, #96]	@ (8000ec0 <MX_I2C1_Init+0x74>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e64:	4b16      	ldr	r3, [pc, #88]	@ (8000ec0 <MX_I2C1_Init+0x74>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ec0 <MX_I2C1_Init+0x74>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e70:	4b13      	ldr	r3, [pc, #76]	@ (8000ec0 <MX_I2C1_Init+0x74>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e76:	4b12      	ldr	r3, [pc, #72]	@ (8000ec0 <MX_I2C1_Init+0x74>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e7c:	4b10      	ldr	r3, [pc, #64]	@ (8000ec0 <MX_I2C1_Init+0x74>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e82:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec0 <MX_I2C1_Init+0x74>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e88:	480d      	ldr	r0, [pc, #52]	@ (8000ec0 <MX_I2C1_Init+0x74>)
 8000e8a:	f000 ffd5 	bl	8001e38 <HAL_I2C_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e94:	f000 f95c 	bl	8001150 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4809      	ldr	r0, [pc, #36]	@ (8000ec0 <MX_I2C1_Init+0x74>)
 8000e9c:	f001 fbd4 	bl	8002648 <HAL_I2CEx_ConfigAnalogFilter>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000ea6:	f000 f953 	bl	8001150 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4804      	ldr	r0, [pc, #16]	@ (8000ec0 <MX_I2C1_Init+0x74>)
 8000eae:	f001 fc16 	bl	80026de <HAL_I2CEx_ConfigDigitalFilter>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000eb8:	f000 f94a 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	200001f4 	.word	0x200001f4
 8000ec4:	40005400 	.word	0x40005400

08000ec8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f3c <MX_SPI1_Init+0x74>)
 8000ece:	4a1c      	ldr	r2, [pc, #112]	@ (8000f40 <MX_SPI1_Init+0x78>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f3c <MX_SPI1_Init+0x74>)
 8000ed4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ed8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eda:	4b18      	ldr	r3, [pc, #96]	@ (8000f3c <MX_SPI1_Init+0x74>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ee0:	4b16      	ldr	r3, [pc, #88]	@ (8000f3c <MX_SPI1_Init+0x74>)
 8000ee2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000ee6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ee8:	4b14      	ldr	r3, [pc, #80]	@ (8000f3c <MX_SPI1_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eee:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <MX_SPI1_Init+0x74>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <MX_SPI1_Init+0x74>)
 8000ef6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000efa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <MX_SPI1_Init+0x74>)
 8000efe:	2208      	movs	r2, #8
 8000f00:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <MX_SPI1_Init+0x74>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <MX_SPI1_Init+0x74>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f3c <MX_SPI1_Init+0x74>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f14:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <MX_SPI1_Init+0x74>)
 8000f16:	2207      	movs	r2, #7
 8000f18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f1a:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <MX_SPI1_Init+0x74>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f20:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <MX_SPI1_Init+0x74>)
 8000f22:	2208      	movs	r2, #8
 8000f24:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f26:	4805      	ldr	r0, [pc, #20]	@ (8000f3c <MX_SPI1_Init+0x74>)
 8000f28:	f003 f8cc 	bl	80040c4 <HAL_SPI_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f32:	f000 f90d 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000248 	.word	0x20000248
 8000f40:	40013000 	.word	0x40013000

08000f44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f4a:	f107 0310 	add.w	r3, r7, #16
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f62:	4b1e      	ldr	r3, [pc, #120]	@ (8000fdc <MX_TIM2_Init+0x98>)
 8000f64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fdc <MX_TIM2_Init+0x98>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f70:	4b1a      	ldr	r3, [pc, #104]	@ (8000fdc <MX_TIM2_Init+0x98>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f76:	4b19      	ldr	r3, [pc, #100]	@ (8000fdc <MX_TIM2_Init+0x98>)
 8000f78:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7e:	4b17      	ldr	r3, [pc, #92]	@ (8000fdc <MX_TIM2_Init+0x98>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f84:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <MX_TIM2_Init+0x98>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f8a:	4814      	ldr	r0, [pc, #80]	@ (8000fdc <MX_TIM2_Init+0x98>)
 8000f8c:	f003 f945 	bl	800421a <HAL_TIM_Base_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f96:	f000 f8db 	bl	8001150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fa0:	f107 0310 	add.w	r3, r7, #16
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	480d      	ldr	r0, [pc, #52]	@ (8000fdc <MX_TIM2_Init+0x98>)
 8000fa8:	f003 f9f0 	bl	800438c <HAL_TIM_ConfigClockSource>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000fb2:	f000 f8cd 	bl	8001150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4806      	ldr	r0, [pc, #24]	@ (8000fdc <MX_TIM2_Init+0x98>)
 8000fc4:	f003 fbd6 	bl	8004774 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000fce:	f000 f8bf 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	3720      	adds	r7, #32
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200002ac 	.word	0x200002ac

08000fe0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000fe4:	4b0d      	ldr	r3, [pc, #52]	@ (800101c <MX_USB_PCD_Init+0x3c>)
 8000fe6:	4a0e      	ldr	r2, [pc, #56]	@ (8001020 <MX_USB_PCD_Init+0x40>)
 8000fe8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000fea:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <MX_USB_PCD_Init+0x3c>)
 8000fec:	2208      	movs	r2, #8
 8000fee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800101c <MX_USB_PCD_Init+0x3c>)
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ff6:	4b09      	ldr	r3, [pc, #36]	@ (800101c <MX_USB_PCD_Init+0x3c>)
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000ffc:	4b07      	ldr	r3, [pc, #28]	@ (800101c <MX_USB_PCD_Init+0x3c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001002:	4b06      	ldr	r3, [pc, #24]	@ (800101c <MX_USB_PCD_Init+0x3c>)
 8001004:	2200      	movs	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001008:	4804      	ldr	r0, [pc, #16]	@ (800101c <MX_USB_PCD_Init+0x3c>)
 800100a:	f001 fbb4 	bl	8002776 <HAL_PCD_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001014:	f000 f89c 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200002f8 	.word	0x200002f8
 8001020:	40005c00 	.word	0x40005c00

08001024 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	@ 0x28
 8001028:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800103a:	4b43      	ldr	r3, [pc, #268]	@ (8001148 <MX_GPIO_Init+0x124>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	4a42      	ldr	r2, [pc, #264]	@ (8001148 <MX_GPIO_Init+0x124>)
 8001040:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001044:	6153      	str	r3, [r2, #20]
 8001046:	4b40      	ldr	r3, [pc, #256]	@ (8001148 <MX_GPIO_Init+0x124>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001052:	4b3d      	ldr	r3, [pc, #244]	@ (8001148 <MX_GPIO_Init+0x124>)
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	4a3c      	ldr	r2, [pc, #240]	@ (8001148 <MX_GPIO_Init+0x124>)
 8001058:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800105c:	6153      	str	r3, [r2, #20]
 800105e:	4b3a      	ldr	r3, [pc, #232]	@ (8001148 <MX_GPIO_Init+0x124>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800106a:	4b37      	ldr	r3, [pc, #220]	@ (8001148 <MX_GPIO_Init+0x124>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	4a36      	ldr	r2, [pc, #216]	@ (8001148 <MX_GPIO_Init+0x124>)
 8001070:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001074:	6153      	str	r3, [r2, #20]
 8001076:	4b34      	ldr	r3, [pc, #208]	@ (8001148 <MX_GPIO_Init+0x124>)
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	4b31      	ldr	r3, [pc, #196]	@ (8001148 <MX_GPIO_Init+0x124>)
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	4a30      	ldr	r2, [pc, #192]	@ (8001148 <MX_GPIO_Init+0x124>)
 8001088:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800108c:	6153      	str	r3, [r2, #20]
 800108e:	4b2e      	ldr	r3, [pc, #184]	@ (8001148 <MX_GPIO_Init+0x124>)
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	4b2b      	ldr	r3, [pc, #172]	@ (8001148 <MX_GPIO_Init+0x124>)
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	4a2a      	ldr	r2, [pc, #168]	@ (8001148 <MX_GPIO_Init+0x124>)
 80010a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010a4:	6153      	str	r3, [r2, #20]
 80010a6:	4b28      	ldr	r3, [pc, #160]	@ (8001148 <MX_GPIO_Init+0x124>)
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80010b2:	2200      	movs	r2, #0
 80010b4:	f64f 7108 	movw	r1, #65288	@ 0xff08
 80010b8:	4824      	ldr	r0, [pc, #144]	@ (800114c <MX_GPIO_Init+0x128>)
 80010ba:	f000 fea5 	bl	8001e08 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c8:	f000 fe9e 	bl	8001e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80010cc:	f64f 7308 	movw	r3, #65288	@ 0xff08
 80010d0:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d2:	2301      	movs	r3, #1
 80010d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	4819      	ldr	r0, [pc, #100]	@ (800114c <MX_GPIO_Init+0x128>)
 80010e6:	f000 fcfd 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin;
 80010ea:	2333      	movs	r3, #51	@ 0x33
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010ee:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	4813      	ldr	r0, [pc, #76]	@ (800114c <MX_GPIO_Init+0x128>)
 8001100:	f000 fcf0 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin PA1 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_1;
 8001104:	2303      	movs	r3, #3
 8001106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001108:	2300      	movs	r3, #0
 800110a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800111a:	f000 fce3 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800111e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800113a:	f000 fcd3 	bl	8001ae4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800113e:	bf00      	nop
 8001140:	3728      	adds	r7, #40	@ 0x28
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40021000 	.word	0x40021000
 800114c:	48001000 	.word	0x48001000

08001150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001154:	b672      	cpsid	i
}
 8001156:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001158:	bf00      	nop
 800115a:	e7fd      	b.n	8001158 <Error_Handler+0x8>

0800115c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af04      	add	r7, sp, #16
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
 800117a:	9302      	str	r3, [sp, #8]
 800117c:	2301      	movs	r3, #1
 800117e:	9301      	str	r3, [sp, #4]
 8001180:	1dfb      	adds	r3, r7, #7
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2301      	movs	r3, #1
 8001186:	2200      	movs	r2, #0
 8001188:	2178      	movs	r1, #120	@ 0x78
 800118a:	4803      	ldr	r0, [pc, #12]	@ (8001198 <ssd1306_WriteCommand+0x2c>)
 800118c:	f000 fee4 	bl	8001f58 <HAL_I2C_Mem_Write>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	200001f4 	.word	0x200001f4

0800119c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af04      	add	r7, sp, #16
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	f04f 32ff 	mov.w	r2, #4294967295
 80011ae:	9202      	str	r2, [sp, #8]
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2301      	movs	r3, #1
 80011b8:	2240      	movs	r2, #64	@ 0x40
 80011ba:	2178      	movs	r1, #120	@ 0x78
 80011bc:	4803      	ldr	r0, [pc, #12]	@ (80011cc <ssd1306_WriteData+0x30>)
 80011be:	f000 fecb 	bl	8001f58 <HAL_I2C_Mem_Write>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200001f4 	.word	0x200001f4

080011d0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80011d4:	f7ff ffc2 	bl	800115c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80011d8:	2064      	movs	r0, #100	@ 0x64
 80011da:	f000 fb79 	bl	80018d0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80011de:	2000      	movs	r0, #0
 80011e0:	f000 f8b4 	bl	800134c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80011e4:	2020      	movs	r0, #32
 80011e6:	f7ff ffc1 	bl	800116c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80011ea:	2000      	movs	r0, #0
 80011ec:	f7ff ffbe 	bl	800116c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80011f0:	20b0      	movs	r0, #176	@ 0xb0
 80011f2:	f7ff ffbb 	bl	800116c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80011f6:	20c8      	movs	r0, #200	@ 0xc8
 80011f8:	f7ff ffb8 	bl	800116c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80011fc:	2000      	movs	r0, #0
 80011fe:	f7ff ffb5 	bl	800116c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001202:	2010      	movs	r0, #16
 8001204:	f7ff ffb2 	bl	800116c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001208:	2040      	movs	r0, #64	@ 0x40
 800120a:	f7ff ffaf 	bl	800116c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800120e:	20ff      	movs	r0, #255	@ 0xff
 8001210:	f000 f888 	bl	8001324 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001214:	20a1      	movs	r0, #161	@ 0xa1
 8001216:	f7ff ffa9 	bl	800116c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800121a:	20a6      	movs	r0, #166	@ 0xa6
 800121c:	f7ff ffa6 	bl	800116c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001220:	20a8      	movs	r0, #168	@ 0xa8
 8001222:	f7ff ffa3 	bl	800116c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001226:	203f      	movs	r0, #63	@ 0x3f
 8001228:	f7ff ffa0 	bl	800116c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800122c:	20a4      	movs	r0, #164	@ 0xa4
 800122e:	f7ff ff9d 	bl	800116c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001232:	20d3      	movs	r0, #211	@ 0xd3
 8001234:	f7ff ff9a 	bl	800116c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff ff97 	bl	800116c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800123e:	20d5      	movs	r0, #213	@ 0xd5
 8001240:	f7ff ff94 	bl	800116c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001244:	20f0      	movs	r0, #240	@ 0xf0
 8001246:	f7ff ff91 	bl	800116c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800124a:	20d9      	movs	r0, #217	@ 0xd9
 800124c:	f7ff ff8e 	bl	800116c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001250:	2022      	movs	r0, #34	@ 0x22
 8001252:	f7ff ff8b 	bl	800116c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001256:	20da      	movs	r0, #218	@ 0xda
 8001258:	f7ff ff88 	bl	800116c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800125c:	2012      	movs	r0, #18
 800125e:	f7ff ff85 	bl	800116c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001262:	20db      	movs	r0, #219	@ 0xdb
 8001264:	f7ff ff82 	bl	800116c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001268:	2020      	movs	r0, #32
 800126a:	f7ff ff7f 	bl	800116c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800126e:	208d      	movs	r0, #141	@ 0x8d
 8001270:	f7ff ff7c 	bl	800116c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001274:	2014      	movs	r0, #20
 8001276:	f7ff ff79 	bl	800116c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800127a:	2001      	movs	r0, #1
 800127c:	f000 f866 	bl	800134c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001280:	2000      	movs	r0, #0
 8001282:	f000 f80f 	bl	80012a4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001286:	f000 f825 	bl	80012d4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800128a:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <ssd1306_Init+0xd0>)
 800128c:	2200      	movs	r2, #0
 800128e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001290:	4b03      	ldr	r3, [pc, #12]	@ (80012a0 <ssd1306_Init+0xd0>)
 8001292:	2200      	movs	r2, #0
 8001294:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001296:	4b02      	ldr	r3, [pc, #8]	@ (80012a0 <ssd1306_Init+0xd0>)
 8001298:	2201      	movs	r2, #1
 800129a:	711a      	strb	r2, [r3, #4]
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200009e4 	.word	0x200009e4

080012a4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d101      	bne.n	80012b8 <ssd1306_Fill+0x14>
 80012b4:	2300      	movs	r3, #0
 80012b6:	e000      	b.n	80012ba <ssd1306_Fill+0x16>
 80012b8:	23ff      	movs	r3, #255	@ 0xff
 80012ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012be:	4619      	mov	r1, r3
 80012c0:	4803      	ldr	r0, [pc, #12]	@ (80012d0 <ssd1306_Fill+0x2c>)
 80012c2:	f004 f882 	bl	80053ca <memset>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200005e4 	.word	0x200005e4

080012d4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80012da:	2300      	movs	r3, #0
 80012dc:	71fb      	strb	r3, [r7, #7]
 80012de:	e016      	b.n	800130e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	3b50      	subs	r3, #80	@ 0x50
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ff40 	bl	800116c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80012ec:	2000      	movs	r0, #0
 80012ee:	f7ff ff3d 	bl	800116c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80012f2:	2010      	movs	r0, #16
 80012f4:	f7ff ff3a 	bl	800116c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	01db      	lsls	r3, r3, #7
 80012fc:	4a08      	ldr	r2, [pc, #32]	@ (8001320 <ssd1306_UpdateScreen+0x4c>)
 80012fe:	4413      	add	r3, r2
 8001300:	2180      	movs	r1, #128	@ 0x80
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ff4a 	bl	800119c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	3301      	adds	r3, #1
 800130c:	71fb      	strb	r3, [r7, #7]
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2b07      	cmp	r3, #7
 8001312:	d9e5      	bls.n	80012e0 <ssd1306_UpdateScreen+0xc>
    }
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200005e4 	.word	0x200005e4

08001324 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800132e:	2381      	movs	r3, #129	@ 0x81
 8001330:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff19 	bl	800116c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff15 	bl	800116c <ssd1306_WriteCommand>
}
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d005      	beq.n	8001368 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800135c:	23af      	movs	r3, #175	@ 0xaf
 800135e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001360:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <ssd1306_SetDisplayOn+0x38>)
 8001362:	2201      	movs	r2, #1
 8001364:	715a      	strb	r2, [r3, #5]
 8001366:	e004      	b.n	8001372 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001368:	23ae      	movs	r3, #174	@ 0xae
 800136a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800136c:	4b05      	ldr	r3, [pc, #20]	@ (8001384 <ssd1306_SetDisplayOn+0x38>)
 800136e:	2200      	movs	r2, #0
 8001370:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fef9 	bl	800116c <ssd1306_WriteCommand>
}
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200009e4 	.word	0x200009e4

08001388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138e:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <HAL_MspInit+0x44>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	4a0e      	ldr	r2, [pc, #56]	@ (80013cc <HAL_MspInit+0x44>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6193      	str	r3, [r2, #24]
 800139a:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <HAL_MspInit+0x44>)
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a6:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <HAL_MspInit+0x44>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	4a08      	ldr	r2, [pc, #32]	@ (80013cc <HAL_MspInit+0x44>)
 80013ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b0:	61d3      	str	r3, [r2, #28]
 80013b2:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <HAL_MspInit+0x44>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013be:	2007      	movs	r0, #7
 80013c0:	f000 fb5c 	bl	8001a7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40021000 	.word	0x40021000

080013d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	@ 0x28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a17      	ldr	r2, [pc, #92]	@ (800144c <HAL_I2C_MspInit+0x7c>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d127      	bne.n	8001442 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	4b17      	ldr	r3, [pc, #92]	@ (8001450 <HAL_I2C_MspInit+0x80>)
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	4a16      	ldr	r2, [pc, #88]	@ (8001450 <HAL_I2C_MspInit+0x80>)
 80013f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013fc:	6153      	str	r3, [r2, #20]
 80013fe:	4b14      	ldr	r3, [pc, #80]	@ (8001450 <HAL_I2C_MspInit+0x80>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800140a:	23c0      	movs	r3, #192	@ 0xc0
 800140c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800140e:	2312      	movs	r3, #18
 8001410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001412:	2301      	movs	r3, #1
 8001414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001416:	2303      	movs	r3, #3
 8001418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800141a:	2304      	movs	r3, #4
 800141c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	4619      	mov	r1, r3
 8001424:	480b      	ldr	r0, [pc, #44]	@ (8001454 <HAL_I2C_MspInit+0x84>)
 8001426:	f000 fb5d 	bl	8001ae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800142a:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <HAL_I2C_MspInit+0x80>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	4a08      	ldr	r2, [pc, #32]	@ (8001450 <HAL_I2C_MspInit+0x80>)
 8001430:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001434:	61d3      	str	r3, [r2, #28]
 8001436:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <HAL_I2C_MspInit+0x80>)
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001442:	bf00      	nop
 8001444:	3728      	adds	r7, #40	@ 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40005400 	.word	0x40005400
 8001450:	40021000 	.word	0x40021000
 8001454:	48000400 	.word	0x48000400

08001458 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	@ 0x28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a17      	ldr	r2, [pc, #92]	@ (80014d4 <HAL_SPI_MspInit+0x7c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d128      	bne.n	80014cc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800147a:	4b17      	ldr	r3, [pc, #92]	@ (80014d8 <HAL_SPI_MspInit+0x80>)
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	4a16      	ldr	r2, [pc, #88]	@ (80014d8 <HAL_SPI_MspInit+0x80>)
 8001480:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001484:	6193      	str	r3, [r2, #24]
 8001486:	4b14      	ldr	r3, [pc, #80]	@ (80014d8 <HAL_SPI_MspInit+0x80>)
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <HAL_SPI_MspInit+0x80>)
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	4a10      	ldr	r2, [pc, #64]	@ (80014d8 <HAL_SPI_MspInit+0x80>)
 8001498:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800149c:	6153      	str	r3, [r2, #20]
 800149e:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <HAL_SPI_MspInit+0x80>)
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80014aa:	23e0      	movs	r3, #224	@ 0xe0
 80014ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	2302      	movs	r3, #2
 80014b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b6:	2303      	movs	r3, #3
 80014b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014ba:	2305      	movs	r3, #5
 80014bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4619      	mov	r1, r3
 80014c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014c8:	f000 fb0c 	bl	8001ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014cc:	bf00      	nop
 80014ce:	3728      	adds	r7, #40	@ 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40013000 	.word	0x40013000
 80014d8:	40021000 	.word	0x40021000

080014dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014ec:	d10b      	bne.n	8001506 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ee:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <HAL_TIM_Base_MspInit+0x38>)
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	4a08      	ldr	r2, [pc, #32]	@ (8001514 <HAL_TIM_Base_MspInit+0x38>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	61d3      	str	r3, [r2, #28]
 80014fa:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <HAL_TIM_Base_MspInit+0x38>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001506:	bf00      	nop
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40021000 	.word	0x40021000

08001518 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	@ 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a18      	ldr	r2, [pc, #96]	@ (8001598 <HAL_PCD_MspInit+0x80>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d129      	bne.n	800158e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	4b18      	ldr	r3, [pc, #96]	@ (800159c <HAL_PCD_MspInit+0x84>)
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	4a17      	ldr	r2, [pc, #92]	@ (800159c <HAL_PCD_MspInit+0x84>)
 8001540:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001544:	6153      	str	r3, [r2, #20]
 8001546:	4b15      	ldr	r3, [pc, #84]	@ (800159c <HAL_PCD_MspInit+0x84>)
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001552:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001560:	2303      	movs	r3, #3
 8001562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001564:	230e      	movs	r3, #14
 8001566:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4619      	mov	r1, r3
 800156e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001572:	f000 fab7 	bl	8001ae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001576:	4b09      	ldr	r3, [pc, #36]	@ (800159c <HAL_PCD_MspInit+0x84>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	4a08      	ldr	r2, [pc, #32]	@ (800159c <HAL_PCD_MspInit+0x84>)
 800157c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001580:	61d3      	str	r3, [r2, #28]
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <HAL_PCD_MspInit+0x84>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800158e:	bf00      	nop
 8001590:	3728      	adds	r7, #40	@ 0x28
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40005c00 	.word	0x40005c00
 800159c:	40021000 	.word	0x40021000

080015a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <NMI_Handler+0x4>

080015a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <HardFault_Handler+0x4>

080015b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <MemManage_Handler+0x4>

080015b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <BusFault_Handler+0x4>

080015c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <UsageFault_Handler+0x4>

080015c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f6:	f000 f94b 	bl	8001890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}

080015fe <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  return 1;
 8001602:	2301      	movs	r3, #1
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <_kill>:

int _kill(int pid, int sig)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001618:	f003 ff2a 	bl	8005470 <__errno>
 800161c:	4603      	mov	r3, r0
 800161e:	2216      	movs	r2, #22
 8001620:	601a      	str	r2, [r3, #0]
  return -1;
 8001622:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <_exit>:

void _exit (int status)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001636:	f04f 31ff 	mov.w	r1, #4294967295
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ffe7 	bl	800160e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <_exit+0x12>

08001644 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	e00a      	b.n	800166c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001656:	f3af 8000 	nop.w
 800165a:	4601      	mov	r1, r0
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	60ba      	str	r2, [r7, #8]
 8001662:	b2ca      	uxtb	r2, r1
 8001664:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	3301      	adds	r3, #1
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	429a      	cmp	r2, r3
 8001672:	dbf0      	blt.n	8001656 <_read+0x12>
  }

  return len;
 8001674:	687b      	ldr	r3, [r7, #4]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	e009      	b.n	80016a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	60ba      	str	r2, [r7, #8]
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3301      	adds	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	dbf1      	blt.n	8001690 <_write+0x12>
  }
  return len;
 80016ac:	687b      	ldr	r3, [r7, #4]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <_close>:

int _close(int file)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016de:	605a      	str	r2, [r3, #4]
  return 0;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <_isatty>:

int _isatty(int file)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016f6:	2301      	movs	r3, #1
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001728:	4a14      	ldr	r2, [pc, #80]	@ (800177c <_sbrk+0x5c>)
 800172a:	4b15      	ldr	r3, [pc, #84]	@ (8001780 <_sbrk+0x60>)
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001734:	4b13      	ldr	r3, [pc, #76]	@ (8001784 <_sbrk+0x64>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d102      	bne.n	8001742 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800173c:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <_sbrk+0x64>)
 800173e:	4a12      	ldr	r2, [pc, #72]	@ (8001788 <_sbrk+0x68>)
 8001740:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001742:	4b10      	ldr	r3, [pc, #64]	@ (8001784 <_sbrk+0x64>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	429a      	cmp	r2, r3
 800174e:	d207      	bcs.n	8001760 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001750:	f003 fe8e 	bl	8005470 <__errno>
 8001754:	4603      	mov	r3, r0
 8001756:	220c      	movs	r2, #12
 8001758:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800175a:	f04f 33ff 	mov.w	r3, #4294967295
 800175e:	e009      	b.n	8001774 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001760:	4b08      	ldr	r3, [pc, #32]	@ (8001784 <_sbrk+0x64>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001766:	4b07      	ldr	r3, [pc, #28]	@ (8001784 <_sbrk+0x64>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	4a05      	ldr	r2, [pc, #20]	@ (8001784 <_sbrk+0x64>)
 8001770:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001772:	68fb      	ldr	r3, [r7, #12]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	2000a000 	.word	0x2000a000
 8001780:	00000400 	.word	0x00000400
 8001784:	200009ec 	.word	0x200009ec
 8001788:	20000b40 	.word	0x20000b40

0800178c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001790:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <SystemInit+0x20>)
 8001792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001796:	4a05      	ldr	r2, [pc, #20]	@ (80017ac <SystemInit+0x20>)
 8001798:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800179c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017e8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80017b4:	f7ff ffea 	bl	800178c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017b8:	480c      	ldr	r0, [pc, #48]	@ (80017ec <LoopForever+0x6>)
  ldr r1, =_edata
 80017ba:	490d      	ldr	r1, [pc, #52]	@ (80017f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017bc:	4a0d      	ldr	r2, [pc, #52]	@ (80017f4 <LoopForever+0xe>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c0:	e002      	b.n	80017c8 <LoopCopyDataInit>

080017c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c6:	3304      	adds	r3, #4

080017c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017cc:	d3f9      	bcc.n	80017c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ce:	4a0a      	ldr	r2, [pc, #40]	@ (80017f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017d0:	4c0a      	ldr	r4, [pc, #40]	@ (80017fc <LoopForever+0x16>)
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d4:	e001      	b.n	80017da <LoopFillZerobss>

080017d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d8:	3204      	adds	r2, #4

080017da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017dc:	d3fb      	bcc.n	80017d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017de:	f003 fe4d 	bl	800547c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017e2:	f7ff fa91 	bl	8000d08 <main>

080017e6 <LoopForever>:

LoopForever:
    b LoopForever
 80017e6:	e7fe      	b.n	80017e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017e8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80017ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80017f4:	080075e8 	.word	0x080075e8
  ldr r2, =_sbss
 80017f8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80017fc:	20000b40 	.word	0x20000b40

08001800 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001800:	e7fe      	b.n	8001800 <ADC1_2_IRQHandler>
	...

08001804 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001808:	4b08      	ldr	r3, [pc, #32]	@ (800182c <HAL_Init+0x28>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a07      	ldr	r2, [pc, #28]	@ (800182c <HAL_Init+0x28>)
 800180e:	f043 0310 	orr.w	r3, r3, #16
 8001812:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001814:	2003      	movs	r0, #3
 8001816:	f000 f931 	bl	8001a7c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800181a:	2000      	movs	r0, #0
 800181c:	f000 f808 	bl	8001830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001820:	f7ff fdb2 	bl	8001388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40022000 	.word	0x40022000

08001830 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001838:	4b12      	ldr	r3, [pc, #72]	@ (8001884 <HAL_InitTick+0x54>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b12      	ldr	r3, [pc, #72]	@ (8001888 <HAL_InitTick+0x58>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	4619      	mov	r1, r3
 8001842:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001846:	fbb3 f3f1 	udiv	r3, r3, r1
 800184a:	fbb2 f3f3 	udiv	r3, r2, r3
 800184e:	4618      	mov	r0, r3
 8001850:	f000 f93b 	bl	8001aca <HAL_SYSTICK_Config>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e00e      	b.n	800187c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b0f      	cmp	r3, #15
 8001862:	d80a      	bhi.n	800187a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001864:	2200      	movs	r2, #0
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	f000 f911 	bl	8001a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001870:	4a06      	ldr	r2, [pc, #24]	@ (800188c <HAL_InitTick+0x5c>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	e000      	b.n	800187c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000004 	.word	0x20000004
 8001888:	2000000c 	.word	0x2000000c
 800188c:	20000008 	.word	0x20000008

08001890 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001894:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <HAL_IncTick+0x20>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <HAL_IncTick+0x24>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	4a04      	ldr	r2, [pc, #16]	@ (80018b4 <HAL_IncTick+0x24>)
 80018a2:	6013      	str	r3, [r2, #0]
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	2000000c 	.word	0x2000000c
 80018b4:	200009f0 	.word	0x200009f0

080018b8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return uwTick;  
 80018bc:	4b03      	ldr	r3, [pc, #12]	@ (80018cc <HAL_GetTick+0x14>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	200009f0 	.word	0x200009f0

080018d0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d8:	f7ff ffee 	bl	80018b8 <HAL_GetTick>
 80018dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e8:	d005      	beq.n	80018f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001914 <HAL_Delay+0x44>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	461a      	mov	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4413      	add	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80018f6:	bf00      	nop
 80018f8:	f7ff ffde 	bl	80018b8 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	429a      	cmp	r2, r3
 8001906:	d8f7      	bhi.n	80018f8 <HAL_Delay+0x28>
  {
  }
}
 8001908:	bf00      	nop
 800190a:	bf00      	nop
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	2000000c 	.word	0x2000000c

08001918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001928:	4b0c      	ldr	r3, [pc, #48]	@ (800195c <__NVIC_SetPriorityGrouping+0x44>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001934:	4013      	ands	r3, r2
 8001936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001940:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001944:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800194a:	4a04      	ldr	r2, [pc, #16]	@ (800195c <__NVIC_SetPriorityGrouping+0x44>)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	60d3      	str	r3, [r2, #12]
}
 8001950:	bf00      	nop
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001964:	4b04      	ldr	r3, [pc, #16]	@ (8001978 <__NVIC_GetPriorityGrouping+0x18>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	0a1b      	lsrs	r3, r3, #8
 800196a:	f003 0307 	and.w	r3, r3, #7
}
 800196e:	4618      	mov	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	6039      	str	r1, [r7, #0]
 8001986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	2b00      	cmp	r3, #0
 800198e:	db0a      	blt.n	80019a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	b2da      	uxtb	r2, r3
 8001994:	490c      	ldr	r1, [pc, #48]	@ (80019c8 <__NVIC_SetPriority+0x4c>)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	0112      	lsls	r2, r2, #4
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	440b      	add	r3, r1
 80019a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a4:	e00a      	b.n	80019bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4908      	ldr	r1, [pc, #32]	@ (80019cc <__NVIC_SetPriority+0x50>)
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	3b04      	subs	r3, #4
 80019b4:	0112      	lsls	r2, r2, #4
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	440b      	add	r3, r1
 80019ba:	761a      	strb	r2, [r3, #24]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000e100 	.word	0xe000e100
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	@ 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f1c3 0307 	rsb	r3, r3, #7
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	bf28      	it	cs
 80019ee:	2304      	movcs	r3, #4
 80019f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3304      	adds	r3, #4
 80019f6:	2b06      	cmp	r3, #6
 80019f8:	d902      	bls.n	8001a00 <NVIC_EncodePriority+0x30>
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3b03      	subs	r3, #3
 80019fe:	e000      	b.n	8001a02 <NVIC_EncodePriority+0x32>
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	f04f 32ff 	mov.w	r2, #4294967295
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	401a      	ands	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	43d9      	mvns	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	4313      	orrs	r3, r2
         );
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3724      	adds	r7, #36	@ 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a48:	d301      	bcc.n	8001a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00f      	b.n	8001a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a78 <SysTick_Config+0x40>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a56:	210f      	movs	r1, #15
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5c:	f7ff ff8e 	bl	800197c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a60:	4b05      	ldr	r3, [pc, #20]	@ (8001a78 <SysTick_Config+0x40>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a66:	4b04      	ldr	r3, [pc, #16]	@ (8001a78 <SysTick_Config+0x40>)
 8001a68:	2207      	movs	r2, #7
 8001a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	e000e010 	.word	0xe000e010

08001a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ff47 	bl	8001918 <__NVIC_SetPriorityGrouping>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa4:	f7ff ff5c 	bl	8001960 <__NVIC_GetPriorityGrouping>
 8001aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	6978      	ldr	r0, [r7, #20]
 8001ab0:	f7ff ff8e 	bl	80019d0 <NVIC_EncodePriority>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff5d 	bl	800197c <__NVIC_SetPriority>
}
 8001ac2:	bf00      	nop
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ffb0 	bl	8001a38 <SysTick_Config>
 8001ad8:	4603      	mov	r3, r0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b087      	sub	sp, #28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af2:	e154      	b.n	8001d9e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	2101      	movs	r1, #1
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	fa01 f303 	lsl.w	r3, r1, r3
 8001b00:	4013      	ands	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 8146 	beq.w	8001d98 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d005      	beq.n	8001b24 <HAL_GPIO_Init+0x40>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d130      	bne.n	8001b86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	091b      	lsrs	r3, r3, #4
 8001b70:	f003 0201 	and.w	r2, r3, #1
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	d017      	beq.n	8001bc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d123      	bne.n	8001c16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	08da      	lsrs	r2, r3, #3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3208      	adds	r2, #8
 8001bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	220f      	movs	r2, #15
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43db      	mvns	r3, r3
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	691a      	ldr	r2, [r3, #16]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	08da      	lsrs	r2, r3, #3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3208      	adds	r2, #8
 8001c10:	6939      	ldr	r1, [r7, #16]
 8001c12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	2203      	movs	r2, #3
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 0203 	and.w	r2, r3, #3
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 80a0 	beq.w	8001d98 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c58:	4b58      	ldr	r3, [pc, #352]	@ (8001dbc <HAL_GPIO_Init+0x2d8>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	4a57      	ldr	r2, [pc, #348]	@ (8001dbc <HAL_GPIO_Init+0x2d8>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	6193      	str	r3, [r2, #24]
 8001c64:	4b55      	ldr	r3, [pc, #340]	@ (8001dbc <HAL_GPIO_Init+0x2d8>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c70:	4a53      	ldr	r2, [pc, #332]	@ (8001dc0 <HAL_GPIO_Init+0x2dc>)
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	089b      	lsrs	r3, r3, #2
 8001c76:	3302      	adds	r3, #2
 8001c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	220f      	movs	r2, #15
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c9a:	d019      	beq.n	8001cd0 <HAL_GPIO_Init+0x1ec>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a49      	ldr	r2, [pc, #292]	@ (8001dc4 <HAL_GPIO_Init+0x2e0>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d013      	beq.n	8001ccc <HAL_GPIO_Init+0x1e8>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a48      	ldr	r2, [pc, #288]	@ (8001dc8 <HAL_GPIO_Init+0x2e4>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d00d      	beq.n	8001cc8 <HAL_GPIO_Init+0x1e4>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a47      	ldr	r2, [pc, #284]	@ (8001dcc <HAL_GPIO_Init+0x2e8>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d007      	beq.n	8001cc4 <HAL_GPIO_Init+0x1e0>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a46      	ldr	r2, [pc, #280]	@ (8001dd0 <HAL_GPIO_Init+0x2ec>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d101      	bne.n	8001cc0 <HAL_GPIO_Init+0x1dc>
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	e008      	b.n	8001cd2 <HAL_GPIO_Init+0x1ee>
 8001cc0:	2305      	movs	r3, #5
 8001cc2:	e006      	b.n	8001cd2 <HAL_GPIO_Init+0x1ee>
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e004      	b.n	8001cd2 <HAL_GPIO_Init+0x1ee>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e002      	b.n	8001cd2 <HAL_GPIO_Init+0x1ee>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <HAL_GPIO_Init+0x1ee>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	f002 0203 	and.w	r2, r2, #3
 8001cd8:	0092      	lsls	r2, r2, #2
 8001cda:	4093      	lsls	r3, r2
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ce2:	4937      	ldr	r1, [pc, #220]	@ (8001dc0 <HAL_GPIO_Init+0x2dc>)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	089b      	lsrs	r3, r3, #2
 8001ce8:	3302      	adds	r3, #2
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cf0:	4b38      	ldr	r3, [pc, #224]	@ (8001dd4 <HAL_GPIO_Init+0x2f0>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d14:	4a2f      	ldr	r2, [pc, #188]	@ (8001dd4 <HAL_GPIO_Init+0x2f0>)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d1a:	4b2e      	ldr	r3, [pc, #184]	@ (8001dd4 <HAL_GPIO_Init+0x2f0>)
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4013      	ands	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d3e:	4a25      	ldr	r2, [pc, #148]	@ (8001dd4 <HAL_GPIO_Init+0x2f0>)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d44:	4b23      	ldr	r3, [pc, #140]	@ (8001dd4 <HAL_GPIO_Init+0x2f0>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d68:	4a1a      	ldr	r2, [pc, #104]	@ (8001dd4 <HAL_GPIO_Init+0x2f0>)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d6e:	4b19      	ldr	r3, [pc, #100]	@ (8001dd4 <HAL_GPIO_Init+0x2f0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d92:	4a10      	ldr	r2, [pc, #64]	@ (8001dd4 <HAL_GPIO_Init+0x2f0>)
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	fa22 f303 	lsr.w	r3, r2, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f47f aea3 	bne.w	8001af4 <HAL_GPIO_Init+0x10>
  }
}
 8001dae:	bf00      	nop
 8001db0:	bf00      	nop
 8001db2:	371c      	adds	r7, #28
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40010000 	.word	0x40010000
 8001dc4:	48000400 	.word	0x48000400
 8001dc8:	48000800 	.word	0x48000800
 8001dcc:	48000c00 	.word	0x48000c00
 8001dd0:	48001000 	.word	0x48001000
 8001dd4:	40010400 	.word	0x40010400

08001dd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691a      	ldr	r2, [r3, #16]
 8001de8:	887b      	ldrh	r3, [r7, #2]
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d002      	beq.n	8001df6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001df0:	2301      	movs	r3, #1
 8001df2:	73fb      	strb	r3, [r7, #15]
 8001df4:	e001      	b.n	8001dfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001df6:	2300      	movs	r3, #0
 8001df8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	807b      	strh	r3, [r7, #2]
 8001e14:	4613      	mov	r3, r2
 8001e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e18:	787b      	ldrb	r3, [r7, #1]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e1e:	887a      	ldrh	r2, [r7, #2]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e24:	e002      	b.n	8001e2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e26:	887a      	ldrh	r2, [r7, #2]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e081      	b.n	8001f4e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d106      	bne.n	8001e64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff fab6 	bl	80013d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2224      	movs	r2, #36	@ 0x24
 8001e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0201 	bic.w	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d107      	bne.n	8001eb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	e006      	b.n	8001ec0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001ebe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d104      	bne.n	8001ed2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ed0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ee0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ee4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ef4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691a      	ldr	r2, [r3, #16]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69d9      	ldr	r1, [r3, #28]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a1a      	ldr	r2, [r3, #32]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b088      	sub	sp, #32
 8001f5c:	af02      	add	r7, sp, #8
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	4608      	mov	r0, r1
 8001f62:	4611      	mov	r1, r2
 8001f64:	461a      	mov	r2, r3
 8001f66:	4603      	mov	r3, r0
 8001f68:	817b      	strh	r3, [r7, #10]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	813b      	strh	r3, [r7, #8]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b20      	cmp	r3, #32
 8001f7c:	f040 80f9 	bne.w	8002172 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f80:	6a3b      	ldr	r3, [r7, #32]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d002      	beq.n	8001f8c <HAL_I2C_Mem_Write+0x34>
 8001f86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d105      	bne.n	8001f98 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f92:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0ed      	b.n	8002174 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d101      	bne.n	8001fa6 <HAL_I2C_Mem_Write+0x4e>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e0e6      	b.n	8002174 <HAL_I2C_Mem_Write+0x21c>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fae:	f7ff fc83 	bl	80018b8 <HAL_GetTick>
 8001fb2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	2319      	movs	r3, #25
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f000 f955 	bl	8002270 <I2C_WaitOnFlagUntilTimeout>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e0d1      	b.n	8002174 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2221      	movs	r2, #33	@ 0x21
 8001fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2240      	movs	r2, #64	@ 0x40
 8001fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6a3a      	ldr	r2, [r7, #32]
 8001fea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001ff0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ff8:	88f8      	ldrh	r0, [r7, #6]
 8001ffa:	893a      	ldrh	r2, [r7, #8]
 8001ffc:	8979      	ldrh	r1, [r7, #10]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	9301      	str	r3, [sp, #4]
 8002002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	4603      	mov	r3, r0
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f000 f8b9 	bl	8002180 <I2C_RequestMemoryWrite>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0a9      	b.n	8002174 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002024:	b29b      	uxth	r3, r3
 8002026:	2bff      	cmp	r3, #255	@ 0xff
 8002028:	d90e      	bls.n	8002048 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	22ff      	movs	r2, #255	@ 0xff
 800202e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002034:	b2da      	uxtb	r2, r3
 8002036:	8979      	ldrh	r1, [r7, #10]
 8002038:	2300      	movs	r3, #0
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 facf 	bl	80025e4 <I2C_TransferConfig>
 8002046:	e00f      	b.n	8002068 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800204c:	b29a      	uxth	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002056:	b2da      	uxtb	r2, r3
 8002058:	8979      	ldrh	r1, [r7, #10]
 800205a:	2300      	movs	r3, #0
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 fabe 	bl	80025e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 f94e 	bl	800230e <I2C_WaitOnTXISFlagUntilTimeout>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e07b      	b.n	8002174 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002080:	781a      	ldrb	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002096:	b29b      	uxth	r3, r3
 8002098:	3b01      	subs	r3, #1
 800209a:	b29a      	uxth	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020a4:	3b01      	subs	r3, #1
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d034      	beq.n	8002120 <HAL_I2C_Mem_Write+0x1c8>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d130      	bne.n	8002120 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020c4:	2200      	movs	r2, #0
 80020c6:	2180      	movs	r1, #128	@ 0x80
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 f8d1 	bl	8002270 <I2C_WaitOnFlagUntilTimeout>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e04d      	b.n	8002174 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020dc:	b29b      	uxth	r3, r3
 80020de:	2bff      	cmp	r3, #255	@ 0xff
 80020e0:	d90e      	bls.n	8002100 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	22ff      	movs	r2, #255	@ 0xff
 80020e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	8979      	ldrh	r1, [r7, #10]
 80020f0:	2300      	movs	r3, #0
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f000 fa73 	bl	80025e4 <I2C_TransferConfig>
 80020fe:	e00f      	b.n	8002120 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002104:	b29a      	uxth	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800210e:	b2da      	uxtb	r2, r3
 8002110:	8979      	ldrh	r1, [r7, #10]
 8002112:	2300      	movs	r3, #0
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 fa62 	bl	80025e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002124:	b29b      	uxth	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d19e      	bne.n	8002068 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 f934 	bl	800239c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e01a      	b.n	8002174 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2220      	movs	r2, #32
 8002144:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6859      	ldr	r1, [r3, #4]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4b0a      	ldr	r3, [pc, #40]	@ (800217c <HAL_I2C_Mem_Write+0x224>)
 8002152:	400b      	ands	r3, r1
 8002154:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2220      	movs	r2, #32
 800215a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	e000      	b.n	8002174 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002172:	2302      	movs	r3, #2
  }
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	fe00e800 	.word	0xfe00e800

08002180 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af02      	add	r7, sp, #8
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	4608      	mov	r0, r1
 800218a:	4611      	mov	r1, r2
 800218c:	461a      	mov	r2, r3
 800218e:	4603      	mov	r3, r0
 8002190:	817b      	strh	r3, [r7, #10]
 8002192:	460b      	mov	r3, r1
 8002194:	813b      	strh	r3, [r7, #8]
 8002196:	4613      	mov	r3, r2
 8002198:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800219a:	88fb      	ldrh	r3, [r7, #6]
 800219c:	b2da      	uxtb	r2, r3
 800219e:	8979      	ldrh	r1, [r7, #10]
 80021a0:	4b20      	ldr	r3, [pc, #128]	@ (8002224 <I2C_RequestMemoryWrite+0xa4>)
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f000 fa1b 	bl	80025e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ae:	69fa      	ldr	r2, [r7, #28]
 80021b0:	69b9      	ldr	r1, [r7, #24]
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 f8ab 	bl	800230e <I2C_WaitOnTXISFlagUntilTimeout>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e02c      	b.n	800221c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021c2:	88fb      	ldrh	r3, [r7, #6]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d105      	bne.n	80021d4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021c8:	893b      	ldrh	r3, [r7, #8]
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80021d2:	e015      	b.n	8002200 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80021d4:	893b      	ldrh	r3, [r7, #8]
 80021d6:	0a1b      	lsrs	r3, r3, #8
 80021d8:	b29b      	uxth	r3, r3
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021e2:	69fa      	ldr	r2, [r7, #28]
 80021e4:	69b9      	ldr	r1, [r7, #24]
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 f891 	bl	800230e <I2C_WaitOnTXISFlagUntilTimeout>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e012      	b.n	800221c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021f6:	893b      	ldrh	r3, [r7, #8]
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	2200      	movs	r2, #0
 8002208:	2180      	movs	r1, #128	@ 0x80
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 f830 	bl	8002270 <I2C_WaitOnFlagUntilTimeout>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	80002000 	.word	0x80002000

08002228 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b02      	cmp	r3, #2
 800223c:	d103      	bne.n	8002246 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2200      	movs	r2, #0
 8002244:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b01      	cmp	r3, #1
 8002252:	d007      	beq.n	8002264 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699a      	ldr	r2, [r3, #24]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	619a      	str	r2, [r3, #24]
  }
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	4613      	mov	r3, r2
 800227e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002280:	e031      	b.n	80022e6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002288:	d02d      	beq.n	80022e6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800228a:	f7ff fb15 	bl	80018b8 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d302      	bcc.n	80022a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d122      	bne.n	80022e6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699a      	ldr	r2, [r3, #24]
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	4013      	ands	r3, r2
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	bf0c      	ite	eq
 80022b0:	2301      	moveq	r3, #1
 80022b2:	2300      	movne	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	461a      	mov	r2, r3
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d113      	bne.n	80022e6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c2:	f043 0220 	orr.w	r2, r3, #32
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2220      	movs	r2, #32
 80022ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e00f      	b.n	8002306 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	699a      	ldr	r2, [r3, #24]
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	4013      	ands	r3, r2
 80022f0:	68ba      	ldr	r2, [r7, #8]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	bf0c      	ite	eq
 80022f6:	2301      	moveq	r3, #1
 80022f8:	2300      	movne	r3, #0
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	461a      	mov	r2, r3
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	429a      	cmp	r2, r3
 8002302:	d0be      	beq.n	8002282 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b084      	sub	sp, #16
 8002312:	af00      	add	r7, sp, #0
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800231a:	e033      	b.n	8002384 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	68b9      	ldr	r1, [r7, #8]
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f000 f87f 	bl	8002424 <I2C_IsErrorOccurred>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e031      	b.n	8002394 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002336:	d025      	beq.n	8002384 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002338:	f7ff fabe 	bl	80018b8 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	429a      	cmp	r2, r3
 8002346:	d302      	bcc.n	800234e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d11a      	bne.n	8002384 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b02      	cmp	r3, #2
 800235a:	d013      	beq.n	8002384 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002360:	f043 0220 	orr.w	r2, r3, #32
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2220      	movs	r2, #32
 800236c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e007      	b.n	8002394 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b02      	cmp	r3, #2
 8002390:	d1c4      	bne.n	800231c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023a8:	e02f      	b.n	800240a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68b9      	ldr	r1, [r7, #8]
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 f838 	bl	8002424 <I2C_IsErrorOccurred>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e02d      	b.n	800241a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023be:	f7ff fa7b 	bl	80018b8 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d302      	bcc.n	80023d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d11a      	bne.n	800240a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	f003 0320 	and.w	r3, r3, #32
 80023de:	2b20      	cmp	r3, #32
 80023e0:	d013      	beq.n	800240a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e6:	f043 0220 	orr.w	r2, r3, #32
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2220      	movs	r2, #32
 80023f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e007      	b.n	800241a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	f003 0320 	and.w	r3, r3, #32
 8002414:	2b20      	cmp	r3, #32
 8002416:	d1c8      	bne.n	80023aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08a      	sub	sp, #40	@ 0x28
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	2b00      	cmp	r3, #0
 800244e:	d068      	beq.n	8002522 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2210      	movs	r2, #16
 8002456:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002458:	e049      	b.n	80024ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002460:	d045      	beq.n	80024ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002462:	f7ff fa29 	bl	80018b8 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	429a      	cmp	r2, r3
 8002470:	d302      	bcc.n	8002478 <I2C_IsErrorOccurred+0x54>
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d13a      	bne.n	80024ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002482:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800248a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002496:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800249a:	d121      	bne.n	80024e0 <I2C_IsErrorOccurred+0xbc>
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80024a2:	d01d      	beq.n	80024e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80024a4:	7cfb      	ldrb	r3, [r7, #19]
 80024a6:	2b20      	cmp	r3, #32
 80024a8:	d01a      	beq.n	80024e0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80024ba:	f7ff f9fd 	bl	80018b8 <HAL_GetTick>
 80024be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024c0:	e00e      	b.n	80024e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80024c2:	f7ff f9f9 	bl	80018b8 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b19      	cmp	r3, #25
 80024ce:	d907      	bls.n	80024e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	f043 0320 	orr.w	r3, r3, #32
 80024d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80024de:	e006      	b.n	80024ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	f003 0320 	and.w	r3, r3, #32
 80024ea:	2b20      	cmp	r3, #32
 80024ec:	d1e9      	bne.n	80024c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	f003 0320 	and.w	r3, r3, #32
 80024f8:	2b20      	cmp	r3, #32
 80024fa:	d003      	beq.n	8002504 <I2C_IsErrorOccurred+0xe0>
 80024fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0aa      	beq.n	800245a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002504:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002508:	2b00      	cmp	r3, #0
 800250a:	d103      	bne.n	8002514 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2220      	movs	r2, #32
 8002512:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	f043 0304 	orr.w	r3, r3, #4
 800251a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00b      	beq.n	800254c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002544:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00b      	beq.n	800256e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	f043 0308 	orr.w	r3, r3, #8
 800255c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002566:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00b      	beq.n	8002590 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	f043 0302 	orr.w	r3, r3, #2
 800257e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002588:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002590:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002594:	2b00      	cmp	r3, #0
 8002596:	d01c      	beq.n	80025d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f7ff fe45 	bl	8002228 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6859      	ldr	r1, [r3, #4]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	4b0d      	ldr	r3, [pc, #52]	@ (80025e0 <I2C_IsErrorOccurred+0x1bc>)
 80025aa:	400b      	ands	r3, r1
 80025ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	431a      	orrs	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2220      	movs	r2, #32
 80025be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80025d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3728      	adds	r7, #40	@ 0x28
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	fe00e800 	.word	0xfe00e800

080025e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	607b      	str	r3, [r7, #4]
 80025ee:	460b      	mov	r3, r1
 80025f0:	817b      	strh	r3, [r7, #10]
 80025f2:	4613      	mov	r3, r2
 80025f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025f6:	897b      	ldrh	r3, [r7, #10]
 80025f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025fc:	7a7b      	ldrb	r3, [r7, #9]
 80025fe:	041b      	lsls	r3, r3, #16
 8002600:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002604:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	4313      	orrs	r3, r2
 800260e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002612:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	0d5b      	lsrs	r3, r3, #21
 800261e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002622:	4b08      	ldr	r3, [pc, #32]	@ (8002644 <I2C_TransferConfig+0x60>)
 8002624:	430b      	orrs	r3, r1
 8002626:	43db      	mvns	r3, r3
 8002628:	ea02 0103 	and.w	r1, r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	430a      	orrs	r2, r1
 8002634:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002636:	bf00      	nop
 8002638:	371c      	adds	r7, #28
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	03ff63ff 	.word	0x03ff63ff

08002648 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b20      	cmp	r3, #32
 800265c:	d138      	bne.n	80026d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002668:	2302      	movs	r3, #2
 800266a:	e032      	b.n	80026d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2224      	movs	r2, #36	@ 0x24
 8002678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0201 	bic.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800269a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6819      	ldr	r1, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2220      	movs	r2, #32
 80026c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80026cc:	2300      	movs	r3, #0
 80026ce:	e000      	b.n	80026d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026d0:	2302      	movs	r3, #2
  }
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026de:	b480      	push	{r7}
 80026e0:	b085      	sub	sp, #20
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b20      	cmp	r3, #32
 80026f2:	d139      	bne.n	8002768 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d101      	bne.n	8002702 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026fe:	2302      	movs	r3, #2
 8002700:	e033      	b.n	800276a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2224      	movs	r2, #36	@ 0x24
 800270e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0201 	bic.w	r2, r2, #1
 8002720:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002730:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0201 	orr.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2220      	movs	r2, #32
 8002758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002764:	2300      	movs	r3, #0
 8002766:	e000      	b.n	800276a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002768:	2302      	movs	r3, #2
  }
}
 800276a:	4618      	mov	r0, r3
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002776:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002778:	b08b      	sub	sp, #44	@ 0x2c
 800277a:	af06      	add	r7, sp, #24
 800277c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e0c4      	b.n	8002912 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	d106      	bne.n	80027a2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7fe febb 	bl	8001518 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2203      	movs	r2, #3
 80027a6:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f002 f860 	bl	8004874 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027b4:	2300      	movs	r3, #0
 80027b6:	73fb      	strb	r3, [r7, #15]
 80027b8:	e040      	b.n	800283c <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	4613      	mov	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	440b      	add	r3, r1
 80027ca:	3301      	adds	r3, #1
 80027cc:	2201      	movs	r2, #1
 80027ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	4613      	mov	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	440b      	add	r3, r1
 80027e0:	7bfa      	ldrb	r2, [r7, #15]
 80027e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	440b      	add	r3, r1
 80027f4:	3303      	adds	r3, #3
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027fa:	7bfa      	ldrb	r2, [r7, #15]
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	440b      	add	r3, r1
 8002808:	3338      	adds	r3, #56	@ 0x38
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800280e:	7bfa      	ldrb	r2, [r7, #15]
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	440b      	add	r3, r1
 800281c:	333c      	adds	r3, #60	@ 0x3c
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002822:	7bfa      	ldrb	r2, [r7, #15]
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	440b      	add	r3, r1
 8002830:	3340      	adds	r3, #64	@ 0x40
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002836:	7bfb      	ldrb	r3, [r7, #15]
 8002838:	3301      	adds	r3, #1
 800283a:	73fb      	strb	r3, [r7, #15]
 800283c:	7bfa      	ldrb	r2, [r7, #15]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	429a      	cmp	r2, r3
 8002844:	d3b9      	bcc.n	80027ba <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002846:	2300      	movs	r3, #0
 8002848:	73fb      	strb	r3, [r7, #15]
 800284a:	e044      	b.n	80028d6 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800284c:	7bfa      	ldrb	r2, [r7, #15]
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	440b      	add	r3, r1
 800285a:	f203 1369 	addw	r3, r3, #361	@ 0x169
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002862:	7bfa      	ldrb	r2, [r7, #15]
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	440b      	add	r3, r1
 8002870:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002874:	7bfa      	ldrb	r2, [r7, #15]
 8002876:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002878:	7bfa      	ldrb	r2, [r7, #15]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	440b      	add	r3, r1
 8002886:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800288e:	7bfa      	ldrb	r2, [r7, #15]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	440b      	add	r3, r1
 800289c:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028a4:	7bfa      	ldrb	r2, [r7, #15]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	440b      	add	r3, r1
 80028b2:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028ba:	7bfa      	ldrb	r2, [r7, #15]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	440b      	add	r3, r1
 80028c8:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
 80028d2:	3301      	adds	r3, #1
 80028d4:	73fb      	strb	r3, [r7, #15]
 80028d6:	7bfa      	ldrb	r2, [r7, #15]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d3b5      	bcc.n	800284c <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	603b      	str	r3, [r7, #0]
 80028e6:	687e      	ldr	r6, [r7, #4]
 80028e8:	466d      	mov	r5, sp
 80028ea:	f106 0410 	add.w	r4, r6, #16
 80028ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028f2:	6823      	ldr	r3, [r4, #0]
 80028f4:	602b      	str	r3, [r5, #0]
 80028f6:	1d33      	adds	r3, r6, #4
 80028f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028fa:	6838      	ldr	r0, [r7, #0]
 80028fc:	f001 ffd5 	bl	80048aa <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800291c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002922:	af00      	add	r7, sp, #0
 8002924:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002928:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800292c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800292e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002932:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d102      	bne.n	8002942 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	f001 b823 	b.w	8003988 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002946:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 817d 	beq.w	8002c52 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002958:	4bbc      	ldr	r3, [pc, #752]	@ (8002c4c <HAL_RCC_OscConfig+0x330>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 030c 	and.w	r3, r3, #12
 8002960:	2b04      	cmp	r3, #4
 8002962:	d00c      	beq.n	800297e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002964:	4bb9      	ldr	r3, [pc, #740]	@ (8002c4c <HAL_RCC_OscConfig+0x330>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 030c 	and.w	r3, r3, #12
 800296c:	2b08      	cmp	r3, #8
 800296e:	d15c      	bne.n	8002a2a <HAL_RCC_OscConfig+0x10e>
 8002970:	4bb6      	ldr	r3, [pc, #728]	@ (8002c4c <HAL_RCC_OscConfig+0x330>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800297c:	d155      	bne.n	8002a2a <HAL_RCC_OscConfig+0x10e>
 800297e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002982:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800298a:	fa93 f3a3 	rbit	r3, r3
 800298e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002992:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002996:	fab3 f383 	clz	r3, r3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	095b      	lsrs	r3, r3, #5
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d102      	bne.n	80029b0 <HAL_RCC_OscConfig+0x94>
 80029aa:	4ba8      	ldr	r3, [pc, #672]	@ (8002c4c <HAL_RCC_OscConfig+0x330>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	e015      	b.n	80029dc <HAL_RCC_OscConfig+0xc0>
 80029b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029b4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80029bc:	fa93 f3a3 	rbit	r3, r3
 80029c0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80029c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029c8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80029cc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80029d0:	fa93 f3a3 	rbit	r3, r3
 80029d4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80029d8:	4b9c      	ldr	r3, [pc, #624]	@ (8002c4c <HAL_RCC_OscConfig+0x330>)
 80029da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029dc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80029e0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80029e4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80029e8:	fa92 f2a2 	rbit	r2, r2
 80029ec:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80029f0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80029f4:	fab2 f282 	clz	r2, r2
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	f042 0220 	orr.w	r2, r2, #32
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	f002 021f 	and.w	r2, r2, #31
 8002a04:	2101      	movs	r1, #1
 8002a06:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 811f 	beq.w	8002c50 <HAL_RCC_OscConfig+0x334>
 8002a12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f040 8116 	bne.w	8002c50 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	f000 bfaf 	b.w	8003988 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a3a:	d106      	bne.n	8002a4a <HAL_RCC_OscConfig+0x12e>
 8002a3c:	4b83      	ldr	r3, [pc, #524]	@ (8002c4c <HAL_RCC_OscConfig+0x330>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a82      	ldr	r2, [pc, #520]	@ (8002c4c <HAL_RCC_OscConfig+0x330>)
 8002a42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a46:	6013      	str	r3, [r2, #0]
 8002a48:	e036      	b.n	8002ab8 <HAL_RCC_OscConfig+0x19c>
 8002a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10c      	bne.n	8002a74 <HAL_RCC_OscConfig+0x158>
 8002a5a:	4b7c      	ldr	r3, [pc, #496]	@ (8002c4c <HAL_RCC_OscConfig+0x330>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a7b      	ldr	r2, [pc, #492]	@ (8002c4c <HAL_RCC_OscConfig+0x330>)
 8002a60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	4b79      	ldr	r3, [pc, #484]	@ (8002c4c <HAL_RCC_OscConfig+0x330>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a78      	ldr	r2, [pc, #480]	@ (8002c4c <HAL_RCC_OscConfig+0x330>)
 8002a6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	e021      	b.n	8002ab8 <HAL_RCC_OscConfig+0x19c>
 8002a74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x184>
 8002a86:	4b71      	ldr	r3, [pc, #452]	@ (8002c4c <HAL_RCC_OscConfig+0x330>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a70      	ldr	r2, [pc, #448]	@ (8002c4c <HAL_RCC_OscConfig+0x330>)
 8002a8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	4b6e      	ldr	r3, [pc, #440]	@ (8002c4c <HAL_RCC_OscConfig+0x330>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a6d      	ldr	r2, [pc, #436]	@ (8002c4c <HAL_RCC_OscConfig+0x330>)
 8002a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	e00b      	b.n	8002ab8 <HAL_RCC_OscConfig+0x19c>
 8002aa0:	4b6a      	ldr	r3, [pc, #424]	@ (8002c4c <HAL_RCC_OscConfig+0x330>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a69      	ldr	r2, [pc, #420]	@ (8002c4c <HAL_RCC_OscConfig+0x330>)
 8002aa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aaa:	6013      	str	r3, [r2, #0]
 8002aac:	4b67      	ldr	r3, [pc, #412]	@ (8002c4c <HAL_RCC_OscConfig+0x330>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a66      	ldr	r2, [pc, #408]	@ (8002c4c <HAL_RCC_OscConfig+0x330>)
 8002ab2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ab6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ab8:	4b64      	ldr	r3, [pc, #400]	@ (8002c4c <HAL_RCC_OscConfig+0x330>)
 8002aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abc:	f023 020f 	bic.w	r2, r3, #15
 8002ac0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	495f      	ldr	r1, [pc, #380]	@ (8002c4c <HAL_RCC_OscConfig+0x330>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ad2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d059      	beq.n	8002b96 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae2:	f7fe fee9 	bl	80018b8 <HAL_GetTick>
 8002ae6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aea:	e00a      	b.n	8002b02 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aec:	f7fe fee4 	bl	80018b8 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b64      	cmp	r3, #100	@ 0x64
 8002afa:	d902      	bls.n	8002b02 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	f000 bf43 	b.w	8003988 <HAL_RCC_OscConfig+0x106c>
 8002b02:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b06:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002b16:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1a:	fab3 f383 	clz	r3, r3
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	095b      	lsrs	r3, r3, #5
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d102      	bne.n	8002b34 <HAL_RCC_OscConfig+0x218>
 8002b2e:	4b47      	ldr	r3, [pc, #284]	@ (8002c4c <HAL_RCC_OscConfig+0x330>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	e015      	b.n	8002b60 <HAL_RCC_OscConfig+0x244>
 8002b34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b38:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002b40:	fa93 f3a3 	rbit	r3, r3
 8002b44:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002b48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b4c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002b50:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002b54:	fa93 f3a3 	rbit	r3, r3
 8002b58:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8002c4c <HAL_RCC_OscConfig+0x330>)
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b60:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b64:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002b68:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002b6c:	fa92 f2a2 	rbit	r2, r2
 8002b70:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002b74:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002b78:	fab2 f282 	clz	r2, r2
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	f042 0220 	orr.w	r2, r2, #32
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	f002 021f 	and.w	r2, r2, #31
 8002b88:	2101      	movs	r1, #1
 8002b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0ab      	beq.n	8002aec <HAL_RCC_OscConfig+0x1d0>
 8002b94:	e05d      	b.n	8002c52 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b96:	f7fe fe8f 	bl	80018b8 <HAL_GetTick>
 8002b9a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b9e:	e00a      	b.n	8002bb6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ba0:	f7fe fe8a 	bl	80018b8 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b64      	cmp	r3, #100	@ 0x64
 8002bae:	d902      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	f000 bee9 	b.w	8003988 <HAL_RCC_OscConfig+0x106c>
 8002bb6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bba:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbe:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002bc2:	fa93 f3a3 	rbit	r3, r3
 8002bc6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002bca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	095b      	lsrs	r3, r3, #5
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d102      	bne.n	8002be8 <HAL_RCC_OscConfig+0x2cc>
 8002be2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c4c <HAL_RCC_OscConfig+0x330>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	e015      	b.n	8002c14 <HAL_RCC_OscConfig+0x2f8>
 8002be8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bec:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002bf4:	fa93 f3a3 	rbit	r3, r3
 8002bf8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002bfc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c00:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002c04:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002c08:	fa93 f3a3 	rbit	r3, r3
 8002c0c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002c10:	4b0e      	ldr	r3, [pc, #56]	@ (8002c4c <HAL_RCC_OscConfig+0x330>)
 8002c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c14:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c18:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002c1c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002c20:	fa92 f2a2 	rbit	r2, r2
 8002c24:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002c28:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002c2c:	fab2 f282 	clz	r2, r2
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	f042 0220 	orr.w	r2, r2, #32
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	f002 021f 	and.w	r2, r2, #31
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c42:	4013      	ands	r3, r2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1ab      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x284>
 8002c48:	e003      	b.n	8002c52 <HAL_RCC_OscConfig+0x336>
 8002c4a:	bf00      	nop
 8002c4c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 817d 	beq.w	8002f62 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c68:	4ba6      	ldr	r3, [pc, #664]	@ (8002f04 <HAL_RCC_OscConfig+0x5e8>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 030c 	and.w	r3, r3, #12
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00b      	beq.n	8002c8c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c74:	4ba3      	ldr	r3, [pc, #652]	@ (8002f04 <HAL_RCC_OscConfig+0x5e8>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 030c 	and.w	r3, r3, #12
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d172      	bne.n	8002d66 <HAL_RCC_OscConfig+0x44a>
 8002c80:	4ba0      	ldr	r3, [pc, #640]	@ (8002f04 <HAL_RCC_OscConfig+0x5e8>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d16c      	bne.n	8002d66 <HAL_RCC_OscConfig+0x44a>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c92:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002c96:	fa93 f3a3 	rbit	r3, r3
 8002c9a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002c9e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca2:	fab3 f383 	clz	r3, r3
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	095b      	lsrs	r3, r3, #5
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d102      	bne.n	8002cbc <HAL_RCC_OscConfig+0x3a0>
 8002cb6:	4b93      	ldr	r3, [pc, #588]	@ (8002f04 <HAL_RCC_OscConfig+0x5e8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	e013      	b.n	8002ce4 <HAL_RCC_OscConfig+0x3c8>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002cce:	2302      	movs	r3, #2
 8002cd0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002cd4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002cd8:	fa93 f3a3 	rbit	r3, r3
 8002cdc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002ce0:	4b88      	ldr	r3, [pc, #544]	@ (8002f04 <HAL_RCC_OscConfig+0x5e8>)
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002cea:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002cee:	fa92 f2a2 	rbit	r2, r2
 8002cf2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002cf6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002cfa:	fab2 f282 	clz	r2, r2
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	f042 0220 	orr.w	r2, r2, #32
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	f002 021f 	and.w	r2, r2, #31
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d10:	4013      	ands	r3, r2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <HAL_RCC_OscConfig+0x410>
 8002d16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d002      	beq.n	8002d2c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	f000 be2e 	b.w	8003988 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2c:	4b75      	ldr	r3, [pc, #468]	@ (8002f04 <HAL_RCC_OscConfig+0x5e8>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	21f8      	movs	r1, #248	@ 0xf8
 8002d42:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002d4a:	fa91 f1a1 	rbit	r1, r1
 8002d4e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002d52:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002d56:	fab1 f181 	clz	r1, r1
 8002d5a:	b2c9      	uxtb	r1, r1
 8002d5c:	408b      	lsls	r3, r1
 8002d5e:	4969      	ldr	r1, [pc, #420]	@ (8002f04 <HAL_RCC_OscConfig+0x5e8>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d64:	e0fd      	b.n	8002f62 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 8088 	beq.w	8002e88 <HAL_RCC_OscConfig+0x56c>
 8002d78:	2301      	movs	r3, #1
 8002d7a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002d82:	fa93 f3a3 	rbit	r3, r3
 8002d86:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002d8a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d8e:	fab3 f383 	clz	r3, r3
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d98:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	461a      	mov	r2, r3
 8002da0:	2301      	movs	r3, #1
 8002da2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da4:	f7fe fd88 	bl	80018b8 <HAL_GetTick>
 8002da8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dac:	e00a      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dae:	f7fe fd83 	bl	80018b8 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d902      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	f000 bde2 	b.w	8003988 <HAL_RCC_OscConfig+0x106c>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002dce:	fa93 f3a3 	rbit	r3, r3
 8002dd2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002dd6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dda:	fab3 f383 	clz	r3, r3
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	095b      	lsrs	r3, r3, #5
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d102      	bne.n	8002df4 <HAL_RCC_OscConfig+0x4d8>
 8002dee:	4b45      	ldr	r3, [pc, #276]	@ (8002f04 <HAL_RCC_OscConfig+0x5e8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	e013      	b.n	8002e1c <HAL_RCC_OscConfig+0x500>
 8002df4:	2302      	movs	r3, #2
 8002df6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfa:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002dfe:	fa93 f3a3 	rbit	r3, r3
 8002e02:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002e06:	2302      	movs	r3, #2
 8002e08:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002e0c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002e10:	fa93 f3a3 	rbit	r3, r3
 8002e14:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002e18:	4b3a      	ldr	r3, [pc, #232]	@ (8002f04 <HAL_RCC_OscConfig+0x5e8>)
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002e22:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002e26:	fa92 f2a2 	rbit	r2, r2
 8002e2a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002e2e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002e32:	fab2 f282 	clz	r2, r2
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	f042 0220 	orr.w	r2, r2, #32
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	f002 021f 	and.w	r2, r2, #31
 8002e42:	2101      	movs	r1, #1
 8002e44:	fa01 f202 	lsl.w	r2, r1, r2
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0af      	beq.n	8002dae <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4e:	4b2d      	ldr	r3, [pc, #180]	@ (8002f04 <HAL_RCC_OscConfig+0x5e8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	21f8      	movs	r1, #248	@ 0xf8
 8002e64:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e68:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002e6c:	fa91 f1a1 	rbit	r1, r1
 8002e70:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002e74:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002e78:	fab1 f181 	clz	r1, r1
 8002e7c:	b2c9      	uxtb	r1, r1
 8002e7e:	408b      	lsls	r3, r1
 8002e80:	4920      	ldr	r1, [pc, #128]	@ (8002f04 <HAL_RCC_OscConfig+0x5e8>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	600b      	str	r3, [r1, #0]
 8002e86:	e06c      	b.n	8002f62 <HAL_RCC_OscConfig+0x646>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002e92:	fa93 f3a3 	rbit	r3, r3
 8002e96:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002e9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e9e:	fab3 f383 	clz	r3, r3
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ea8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	461a      	mov	r2, r3
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb4:	f7fe fd00 	bl	80018b8 <HAL_GetTick>
 8002eb8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ebc:	e00a      	b.n	8002ed4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ebe:	f7fe fcfb 	bl	80018b8 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d902      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	f000 bd5a 	b.w	8003988 <HAL_RCC_OscConfig+0x106c>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eda:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002ede:	fa93 f3a3 	rbit	r3, r3
 8002ee2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002ee6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eea:	fab3 f383 	clz	r3, r3
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	095b      	lsrs	r3, r3, #5
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d104      	bne.n	8002f08 <HAL_RCC_OscConfig+0x5ec>
 8002efe:	4b01      	ldr	r3, [pc, #4]	@ (8002f04 <HAL_RCC_OscConfig+0x5e8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	e015      	b.n	8002f30 <HAL_RCC_OscConfig+0x614>
 8002f04:	40021000 	.word	0x40021000
 8002f08:	2302      	movs	r3, #2
 8002f0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f12:	fa93 f3a3 	rbit	r3, r3
 8002f16:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002f20:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002f24:	fa93 f3a3 	rbit	r3, r3
 8002f28:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002f2c:	4bc8      	ldr	r3, [pc, #800]	@ (8003250 <HAL_RCC_OscConfig+0x934>)
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f30:	2202      	movs	r2, #2
 8002f32:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002f36:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002f3a:	fa92 f2a2 	rbit	r2, r2
 8002f3e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002f42:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002f46:	fab2 f282 	clz	r2, r2
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	f042 0220 	orr.w	r2, r2, #32
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	f002 021f 	and.w	r2, r2, #31
 8002f56:	2101      	movs	r1, #1
 8002f58:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1ad      	bne.n	8002ebe <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 8110 	beq.w	8003198 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d079      	beq.n	800307c <HAL_RCC_OscConfig+0x760>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002f92:	fa93 f3a3 	rbit	r3, r3
 8002f96:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f9e:	fab3 f383 	clz	r3, r3
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4bab      	ldr	r3, [pc, #684]	@ (8003254 <HAL_RCC_OscConfig+0x938>)
 8002fa8:	4413      	add	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	461a      	mov	r2, r3
 8002fae:	2301      	movs	r3, #1
 8002fb0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb2:	f7fe fc81 	bl	80018b8 <HAL_GetTick>
 8002fb6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fba:	e00a      	b.n	8002fd2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fbc:	f7fe fc7c 	bl	80018b8 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d902      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	f000 bcdb 	b.w	8003988 <HAL_RCC_OscConfig+0x106c>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002fdc:	fa93 f3a3 	rbit	r3, r3
 8002fe0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002fe4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002fec:	2202      	movs	r2, #2
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	fa93 f2a3 	rbit	r2, r3
 8002ffe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003002:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800300c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003010:	2202      	movs	r2, #2
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003018:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	fa93 f2a3 	rbit	r2, r3
 8003022:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003026:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800302a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800302c:	4b88      	ldr	r3, [pc, #544]	@ (8003250 <HAL_RCC_OscConfig+0x934>)
 800302e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003034:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003038:	2102      	movs	r1, #2
 800303a:	6019      	str	r1, [r3, #0]
 800303c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003040:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	fa93 f1a3 	rbit	r1, r3
 800304a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800304e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003052:	6019      	str	r1, [r3, #0]
  return result;
 8003054:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003058:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	fab3 f383 	clz	r3, r3
 8003062:	b2db      	uxtb	r3, r3
 8003064:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003068:	b2db      	uxtb	r3, r3
 800306a:	f003 031f 	and.w	r3, r3, #31
 800306e:	2101      	movs	r1, #1
 8003070:	fa01 f303 	lsl.w	r3, r1, r3
 8003074:	4013      	ands	r3, r2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0a0      	beq.n	8002fbc <HAL_RCC_OscConfig+0x6a0>
 800307a:	e08d      	b.n	8003198 <HAL_RCC_OscConfig+0x87c>
 800307c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003080:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003084:	2201      	movs	r2, #1
 8003086:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003088:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800308c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	fa93 f2a3 	rbit	r2, r3
 8003096:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800309a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800309e:	601a      	str	r2, [r3, #0]
  return result;
 80030a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80030a8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030aa:	fab3 f383 	clz	r3, r3
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	461a      	mov	r2, r3
 80030b2:	4b68      	ldr	r3, [pc, #416]	@ (8003254 <HAL_RCC_OscConfig+0x938>)
 80030b4:	4413      	add	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	461a      	mov	r2, r3
 80030ba:	2300      	movs	r3, #0
 80030bc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030be:	f7fe fbfb 	bl	80018b8 <HAL_GetTick>
 80030c2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c6:	e00a      	b.n	80030de <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030c8:	f7fe fbf6 	bl	80018b8 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d902      	bls.n	80030de <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	f000 bc55 	b.w	8003988 <HAL_RCC_OscConfig+0x106c>
 80030de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80030e6:	2202      	movs	r2, #2
 80030e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	fa93 f2a3 	rbit	r2, r3
 80030f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003106:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800310a:	2202      	movs	r2, #2
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003112:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	fa93 f2a3 	rbit	r2, r3
 800311c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003120:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800312e:	2202      	movs	r2, #2
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003136:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	fa93 f2a3 	rbit	r2, r3
 8003140:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003144:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003148:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800314a:	4b41      	ldr	r3, [pc, #260]	@ (8003250 <HAL_RCC_OscConfig+0x934>)
 800314c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800314e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003152:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003156:	2102      	movs	r1, #2
 8003158:	6019      	str	r1, [r3, #0]
 800315a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800315e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	fa93 f1a3 	rbit	r1, r3
 8003168:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800316c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003170:	6019      	str	r1, [r3, #0]
  return result;
 8003172:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003176:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	fab3 f383 	clz	r3, r3
 8003180:	b2db      	uxtb	r3, r3
 8003182:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003186:	b2db      	uxtb	r3, r3
 8003188:	f003 031f 	and.w	r3, r3, #31
 800318c:	2101      	movs	r1, #1
 800318e:	fa01 f303 	lsl.w	r3, r1, r3
 8003192:	4013      	ands	r3, r2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d197      	bne.n	80030c8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003198:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800319c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 81a1 	beq.w	80034f0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ae:	2300      	movs	r3, #0
 80031b0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031b4:	4b26      	ldr	r3, [pc, #152]	@ (8003250 <HAL_RCC_OscConfig+0x934>)
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d116      	bne.n	80031ee <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c0:	4b23      	ldr	r3, [pc, #140]	@ (8003250 <HAL_RCC_OscConfig+0x934>)
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	4a22      	ldr	r2, [pc, #136]	@ (8003250 <HAL_RCC_OscConfig+0x934>)
 80031c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031ca:	61d3      	str	r3, [r2, #28]
 80031cc:	4b20      	ldr	r3, [pc, #128]	@ (8003250 <HAL_RCC_OscConfig+0x934>)
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80031d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80031e6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80031e8:	2301      	movs	r3, #1
 80031ea:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003258 <HAL_RCC_OscConfig+0x93c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d11a      	bne.n	8003230 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031fa:	4b17      	ldr	r3, [pc, #92]	@ (8003258 <HAL_RCC_OscConfig+0x93c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a16      	ldr	r2, [pc, #88]	@ (8003258 <HAL_RCC_OscConfig+0x93c>)
 8003200:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003204:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003206:	f7fe fb57 	bl	80018b8 <HAL_GetTick>
 800320a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320e:	e009      	b.n	8003224 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003210:	f7fe fb52 	bl	80018b8 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b64      	cmp	r3, #100	@ 0x64
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e3b1      	b.n	8003988 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003224:	4b0c      	ldr	r3, [pc, #48]	@ (8003258 <HAL_RCC_OscConfig+0x93c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0ef      	beq.n	8003210 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003234:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d10d      	bne.n	800325c <HAL_RCC_OscConfig+0x940>
 8003240:	4b03      	ldr	r3, [pc, #12]	@ (8003250 <HAL_RCC_OscConfig+0x934>)
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	4a02      	ldr	r2, [pc, #8]	@ (8003250 <HAL_RCC_OscConfig+0x934>)
 8003246:	f043 0301 	orr.w	r3, r3, #1
 800324a:	6213      	str	r3, [r2, #32]
 800324c:	e03c      	b.n	80032c8 <HAL_RCC_OscConfig+0x9ac>
 800324e:	bf00      	nop
 8003250:	40021000 	.word	0x40021000
 8003254:	10908120 	.word	0x10908120
 8003258:	40007000 	.word	0x40007000
 800325c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003260:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10c      	bne.n	8003286 <HAL_RCC_OscConfig+0x96a>
 800326c:	4bc1      	ldr	r3, [pc, #772]	@ (8003574 <HAL_RCC_OscConfig+0xc58>)
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	4ac0      	ldr	r2, [pc, #768]	@ (8003574 <HAL_RCC_OscConfig+0xc58>)
 8003272:	f023 0301 	bic.w	r3, r3, #1
 8003276:	6213      	str	r3, [r2, #32]
 8003278:	4bbe      	ldr	r3, [pc, #760]	@ (8003574 <HAL_RCC_OscConfig+0xc58>)
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	4abd      	ldr	r2, [pc, #756]	@ (8003574 <HAL_RCC_OscConfig+0xc58>)
 800327e:	f023 0304 	bic.w	r3, r3, #4
 8003282:	6213      	str	r3, [r2, #32]
 8003284:	e020      	b.n	80032c8 <HAL_RCC_OscConfig+0x9ac>
 8003286:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800328a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	2b05      	cmp	r3, #5
 8003294:	d10c      	bne.n	80032b0 <HAL_RCC_OscConfig+0x994>
 8003296:	4bb7      	ldr	r3, [pc, #732]	@ (8003574 <HAL_RCC_OscConfig+0xc58>)
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	4ab6      	ldr	r2, [pc, #728]	@ (8003574 <HAL_RCC_OscConfig+0xc58>)
 800329c:	f043 0304 	orr.w	r3, r3, #4
 80032a0:	6213      	str	r3, [r2, #32]
 80032a2:	4bb4      	ldr	r3, [pc, #720]	@ (8003574 <HAL_RCC_OscConfig+0xc58>)
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	4ab3      	ldr	r2, [pc, #716]	@ (8003574 <HAL_RCC_OscConfig+0xc58>)
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	6213      	str	r3, [r2, #32]
 80032ae:	e00b      	b.n	80032c8 <HAL_RCC_OscConfig+0x9ac>
 80032b0:	4bb0      	ldr	r3, [pc, #704]	@ (8003574 <HAL_RCC_OscConfig+0xc58>)
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	4aaf      	ldr	r2, [pc, #700]	@ (8003574 <HAL_RCC_OscConfig+0xc58>)
 80032b6:	f023 0301 	bic.w	r3, r3, #1
 80032ba:	6213      	str	r3, [r2, #32]
 80032bc:	4bad      	ldr	r3, [pc, #692]	@ (8003574 <HAL_RCC_OscConfig+0xc58>)
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	4aac      	ldr	r2, [pc, #688]	@ (8003574 <HAL_RCC_OscConfig+0xc58>)
 80032c2:	f023 0304 	bic.w	r3, r3, #4
 80032c6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 8081 	beq.w	80033dc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032da:	f7fe faed 	bl	80018b8 <HAL_GetTick>
 80032de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e2:	e00b      	b.n	80032fc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e4:	f7fe fae8 	bl	80018b8 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e345      	b.n	8003988 <HAL_RCC_OscConfig+0x106c>
 80032fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003300:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003304:	2202      	movs	r2, #2
 8003306:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003308:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800330c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	fa93 f2a3 	rbit	r2, r3
 8003316:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800331a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003324:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003328:	2202      	movs	r2, #2
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003330:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	fa93 f2a3 	rbit	r2, r3
 800333a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800333e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003342:	601a      	str	r2, [r3, #0]
  return result;
 8003344:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003348:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800334c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334e:	fab3 f383 	clz	r3, r3
 8003352:	b2db      	uxtb	r3, r3
 8003354:	095b      	lsrs	r3, r3, #5
 8003356:	b2db      	uxtb	r3, r3
 8003358:	f043 0302 	orr.w	r3, r3, #2
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d102      	bne.n	8003368 <HAL_RCC_OscConfig+0xa4c>
 8003362:	4b84      	ldr	r3, [pc, #528]	@ (8003574 <HAL_RCC_OscConfig+0xc58>)
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	e013      	b.n	8003390 <HAL_RCC_OscConfig+0xa74>
 8003368:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800336c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003370:	2202      	movs	r2, #2
 8003372:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003374:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003378:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	fa93 f2a3 	rbit	r2, r3
 8003382:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003386:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	4b79      	ldr	r3, [pc, #484]	@ (8003574 <HAL_RCC_OscConfig+0xc58>)
 800338e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003390:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003394:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003398:	2102      	movs	r1, #2
 800339a:	6011      	str	r1, [r2, #0]
 800339c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033a0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80033a4:	6812      	ldr	r2, [r2, #0]
 80033a6:	fa92 f1a2 	rbit	r1, r2
 80033aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033ae:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80033b2:	6011      	str	r1, [r2, #0]
  return result;
 80033b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033b8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80033bc:	6812      	ldr	r2, [r2, #0]
 80033be:	fab2 f282 	clz	r2, r2
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	f002 021f 	and.w	r2, r2, #31
 80033ce:	2101      	movs	r1, #1
 80033d0:	fa01 f202 	lsl.w	r2, r1, r2
 80033d4:	4013      	ands	r3, r2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d084      	beq.n	80032e4 <HAL_RCC_OscConfig+0x9c8>
 80033da:	e07f      	b.n	80034dc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033dc:	f7fe fa6c 	bl	80018b8 <HAL_GetTick>
 80033e0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e4:	e00b      	b.n	80033fe <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033e6:	f7fe fa67 	bl	80018b8 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e2c4      	b.n	8003988 <HAL_RCC_OscConfig+0x106c>
 80033fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003402:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003406:	2202      	movs	r2, #2
 8003408:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800340e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	fa93 f2a3 	rbit	r2, r3
 8003418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800341c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003426:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800342a:	2202      	movs	r2, #2
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003432:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	fa93 f2a3 	rbit	r2, r3
 800343c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003440:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003444:	601a      	str	r2, [r3, #0]
  return result;
 8003446:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800344a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800344e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003450:	fab3 f383 	clz	r3, r3
 8003454:	b2db      	uxtb	r3, r3
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	b2db      	uxtb	r3, r3
 800345a:	f043 0302 	orr.w	r3, r3, #2
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d102      	bne.n	800346a <HAL_RCC_OscConfig+0xb4e>
 8003464:	4b43      	ldr	r3, [pc, #268]	@ (8003574 <HAL_RCC_OscConfig+0xc58>)
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	e013      	b.n	8003492 <HAL_RCC_OscConfig+0xb76>
 800346a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800346e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003472:	2202      	movs	r2, #2
 8003474:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800347a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	fa93 f2a3 	rbit	r2, r3
 8003484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003488:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	4b39      	ldr	r3, [pc, #228]	@ (8003574 <HAL_RCC_OscConfig+0xc58>)
 8003490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003492:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003496:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800349a:	2102      	movs	r1, #2
 800349c:	6011      	str	r1, [r2, #0]
 800349e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034a2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80034a6:	6812      	ldr	r2, [r2, #0]
 80034a8:	fa92 f1a2 	rbit	r1, r2
 80034ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034b0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80034b4:	6011      	str	r1, [r2, #0]
  return result;
 80034b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034ba:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80034be:	6812      	ldr	r2, [r2, #0]
 80034c0:	fab2 f282 	clz	r2, r2
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	f002 021f 	and.w	r2, r2, #31
 80034d0:	2101      	movs	r1, #1
 80034d2:	fa01 f202 	lsl.w	r2, r1, r2
 80034d6:	4013      	ands	r3, r2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d184      	bne.n	80033e6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034dc:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d105      	bne.n	80034f0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e4:	4b23      	ldr	r3, [pc, #140]	@ (8003574 <HAL_RCC_OscConfig+0xc58>)
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	4a22      	ldr	r2, [pc, #136]	@ (8003574 <HAL_RCC_OscConfig+0xc58>)
 80034ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034ee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 8242 	beq.w	8003986 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003502:	4b1c      	ldr	r3, [pc, #112]	@ (8003574 <HAL_RCC_OscConfig+0xc58>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	2b08      	cmp	r3, #8
 800350c:	f000 8213 	beq.w	8003936 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003510:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003514:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	2b02      	cmp	r3, #2
 800351e:	f040 8162 	bne.w	80037e6 <HAL_RCC_OscConfig+0xeca>
 8003522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003526:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800352a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800352e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003530:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003534:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	fa93 f2a3 	rbit	r2, r3
 800353e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003542:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003546:	601a      	str	r2, [r3, #0]
  return result;
 8003548:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800354c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003550:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003552:	fab3 f383 	clz	r3, r3
 8003556:	b2db      	uxtb	r3, r3
 8003558:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800355c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	461a      	mov	r2, r3
 8003564:	2300      	movs	r3, #0
 8003566:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003568:	f7fe f9a6 	bl	80018b8 <HAL_GetTick>
 800356c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003570:	e00c      	b.n	800358c <HAL_RCC_OscConfig+0xc70>
 8003572:	bf00      	nop
 8003574:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003578:	f7fe f99e 	bl	80018b8 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e1fd      	b.n	8003988 <HAL_RCC_OscConfig+0x106c>
 800358c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003590:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003594:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003598:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800359e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	fa93 f2a3 	rbit	r2, r3
 80035a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ac:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80035b0:	601a      	str	r2, [r3, #0]
  return result;
 80035b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80035ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035bc:	fab3 f383 	clz	r3, r3
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	095b      	lsrs	r3, r3, #5
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	f043 0301 	orr.w	r3, r3, #1
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d102      	bne.n	80035d6 <HAL_RCC_OscConfig+0xcba>
 80035d0:	4bb0      	ldr	r3, [pc, #704]	@ (8003894 <HAL_RCC_OscConfig+0xf78>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	e027      	b.n	8003626 <HAL_RCC_OscConfig+0xd0a>
 80035d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035da:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80035de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035e8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	fa93 f2a3 	rbit	r2, r3
 80035f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035f6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003600:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003604:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800360e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	fa93 f2a3 	rbit	r2, r3
 8003618:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800361c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	4b9c      	ldr	r3, [pc, #624]	@ (8003894 <HAL_RCC_OscConfig+0xf78>)
 8003624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003626:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800362a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800362e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003632:	6011      	str	r1, [r2, #0]
 8003634:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003638:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800363c:	6812      	ldr	r2, [r2, #0]
 800363e:	fa92 f1a2 	rbit	r1, r2
 8003642:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003646:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800364a:	6011      	str	r1, [r2, #0]
  return result;
 800364c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003650:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003654:	6812      	ldr	r2, [r2, #0]
 8003656:	fab2 f282 	clz	r2, r2
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	f042 0220 	orr.w	r2, r2, #32
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	f002 021f 	and.w	r2, r2, #31
 8003666:	2101      	movs	r1, #1
 8003668:	fa01 f202 	lsl.w	r2, r1, r2
 800366c:	4013      	ands	r3, r2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d182      	bne.n	8003578 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003672:	4b88      	ldr	r3, [pc, #544]	@ (8003894 <HAL_RCC_OscConfig+0xf78>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800367a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800367e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003686:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800368a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	430b      	orrs	r3, r1
 8003694:	497f      	ldr	r1, [pc, #508]	@ (8003894 <HAL_RCC_OscConfig+0xf78>)
 8003696:	4313      	orrs	r3, r2
 8003698:	604b      	str	r3, [r1, #4]
 800369a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800369e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80036a2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036ac:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	fa93 f2a3 	rbit	r2, r3
 80036b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036ba:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80036be:	601a      	str	r2, [r3, #0]
  return result;
 80036c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036c4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80036c8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036ca:	fab3 f383 	clz	r3, r3
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80036d4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	461a      	mov	r2, r3
 80036dc:	2301      	movs	r3, #1
 80036de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e0:	f7fe f8ea 	bl	80018b8 <HAL_GetTick>
 80036e4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036e8:	e009      	b.n	80036fe <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ea:	f7fe f8e5 	bl	80018b8 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e144      	b.n	8003988 <HAL_RCC_OscConfig+0x106c>
 80036fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003702:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003706:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800370a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003710:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	fa93 f2a3 	rbit	r2, r3
 800371a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800371e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003722:	601a      	str	r2, [r3, #0]
  return result;
 8003724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003728:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800372c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800372e:	fab3 f383 	clz	r3, r3
 8003732:	b2db      	uxtb	r3, r3
 8003734:	095b      	lsrs	r3, r3, #5
 8003736:	b2db      	uxtb	r3, r3
 8003738:	f043 0301 	orr.w	r3, r3, #1
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b01      	cmp	r3, #1
 8003740:	d102      	bne.n	8003748 <HAL_RCC_OscConfig+0xe2c>
 8003742:	4b54      	ldr	r3, [pc, #336]	@ (8003894 <HAL_RCC_OscConfig+0xf78>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	e027      	b.n	8003798 <HAL_RCC_OscConfig+0xe7c>
 8003748:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800374c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003750:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003754:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003756:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800375a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	fa93 f2a3 	rbit	r2, r3
 8003764:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003768:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003772:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003776:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003780:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	fa93 f2a3 	rbit	r2, r3
 800378a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800378e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	4b3f      	ldr	r3, [pc, #252]	@ (8003894 <HAL_RCC_OscConfig+0xf78>)
 8003796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003798:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800379c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80037a0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80037a4:	6011      	str	r1, [r2, #0]
 80037a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037aa:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	fa92 f1a2 	rbit	r1, r2
 80037b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037b8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80037bc:	6011      	str	r1, [r2, #0]
  return result;
 80037be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037c2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	fab2 f282 	clz	r2, r2
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	f042 0220 	orr.w	r2, r2, #32
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	f002 021f 	and.w	r2, r2, #31
 80037d8:	2101      	movs	r1, #1
 80037da:	fa01 f202 	lsl.w	r2, r1, r2
 80037de:	4013      	ands	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d082      	beq.n	80036ea <HAL_RCC_OscConfig+0xdce>
 80037e4:	e0cf      	b.n	8003986 <HAL_RCC_OscConfig+0x106a>
 80037e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ea:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80037ee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80037f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037f8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	fa93 f2a3 	rbit	r2, r3
 8003802:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003806:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800380a:	601a      	str	r2, [r3, #0]
  return result;
 800380c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003810:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003814:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003816:	fab3 f383 	clz	r3, r3
 800381a:	b2db      	uxtb	r3, r3
 800381c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003820:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	461a      	mov	r2, r3
 8003828:	2300      	movs	r3, #0
 800382a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382c:	f7fe f844 	bl	80018b8 <HAL_GetTick>
 8003830:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003834:	e009      	b.n	800384a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003836:	f7fe f83f 	bl	80018b8 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e09e      	b.n	8003988 <HAL_RCC_OscConfig+0x106c>
 800384a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800384e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003852:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003856:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003858:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800385c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	fa93 f2a3 	rbit	r2, r3
 8003866:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800386a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800386e:	601a      	str	r2, [r3, #0]
  return result;
 8003870:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003874:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003878:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800387a:	fab3 f383 	clz	r3, r3
 800387e:	b2db      	uxtb	r3, r3
 8003880:	095b      	lsrs	r3, r3, #5
 8003882:	b2db      	uxtb	r3, r3
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b01      	cmp	r3, #1
 800388c:	d104      	bne.n	8003898 <HAL_RCC_OscConfig+0xf7c>
 800388e:	4b01      	ldr	r3, [pc, #4]	@ (8003894 <HAL_RCC_OscConfig+0xf78>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	e029      	b.n	80038e8 <HAL_RCC_OscConfig+0xfcc>
 8003894:	40021000 	.word	0x40021000
 8003898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800389c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80038a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038aa:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	fa93 f2a3 	rbit	r2, r3
 80038b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038b8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038c2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80038c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	fa93 f2a3 	rbit	r2, r3
 80038da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038de:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003994 <HAL_RCC_OscConfig+0x1078>)
 80038e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038ec:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80038f0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80038f4:	6011      	str	r1, [r2, #0]
 80038f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038fa:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80038fe:	6812      	ldr	r2, [r2, #0]
 8003900:	fa92 f1a2 	rbit	r1, r2
 8003904:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003908:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800390c:	6011      	str	r1, [r2, #0]
  return result;
 800390e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003912:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	fab2 f282 	clz	r2, r2
 800391c:	b2d2      	uxtb	r2, r2
 800391e:	f042 0220 	orr.w	r2, r2, #32
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	f002 021f 	and.w	r2, r2, #31
 8003928:	2101      	movs	r1, #1
 800392a:	fa01 f202 	lsl.w	r2, r1, r2
 800392e:	4013      	ands	r3, r2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d180      	bne.n	8003836 <HAL_RCC_OscConfig+0xf1a>
 8003934:	e027      	b.n	8003986 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003936:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800393a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d101      	bne.n	800394a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e01e      	b.n	8003988 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800394a:	4b12      	ldr	r3, [pc, #72]	@ (8003994 <HAL_RCC_OscConfig+0x1078>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003952:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003956:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800395a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800395e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	429a      	cmp	r2, r3
 8003968:	d10b      	bne.n	8003982 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800396a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800396e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003976:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800397e:	429a      	cmp	r2, r3
 8003980:	d001      	beq.n	8003986 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e000      	b.n	8003988 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40021000 	.word	0x40021000

08003998 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b09e      	sub	sp, #120	@ 0x78
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e162      	b.n	8003c76 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039b0:	4b90      	ldr	r3, [pc, #576]	@ (8003bf4 <HAL_RCC_ClockConfig+0x25c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d910      	bls.n	80039e0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039be:	4b8d      	ldr	r3, [pc, #564]	@ (8003bf4 <HAL_RCC_ClockConfig+0x25c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f023 0207 	bic.w	r2, r3, #7
 80039c6:	498b      	ldr	r1, [pc, #556]	@ (8003bf4 <HAL_RCC_ClockConfig+0x25c>)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ce:	4b89      	ldr	r3, [pc, #548]	@ (8003bf4 <HAL_RCC_ClockConfig+0x25c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d001      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e14a      	b.n	8003c76 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d008      	beq.n	80039fe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039ec:	4b82      	ldr	r3, [pc, #520]	@ (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	497f      	ldr	r1, [pc, #508]	@ (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80dc 	beq.w	8003bc4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d13c      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xf6>
 8003a14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a18:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a1c:	fa93 f3a3 	rbit	r3, r3
 8003a20:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003a22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a24:	fab3 f383 	clz	r3, r3
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	f043 0301 	orr.w	r3, r3, #1
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d102      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xa6>
 8003a38:	4b6f      	ldr	r3, [pc, #444]	@ (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	e00f      	b.n	8003a5e <HAL_RCC_ClockConfig+0xc6>
 8003a3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a42:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a46:	fa93 f3a3 	rbit	r3, r3
 8003a4a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a50:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a54:	fa93 f3a3 	rbit	r3, r3
 8003a58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a5a:	4b67      	ldr	r3, [pc, #412]	@ (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a62:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a66:	fa92 f2a2 	rbit	r2, r2
 8003a6a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003a6c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003a6e:	fab2 f282 	clz	r2, r2
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	f042 0220 	orr.w	r2, r2, #32
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	f002 021f 	and.w	r2, r2, #31
 8003a7e:	2101      	movs	r1, #1
 8003a80:	fa01 f202 	lsl.w	r2, r1, r2
 8003a84:	4013      	ands	r3, r2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d17b      	bne.n	8003b82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e0f3      	b.n	8003c76 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d13c      	bne.n	8003b10 <HAL_RCC_ClockConfig+0x178>
 8003a96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a9a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a9e:	fa93 f3a3 	rbit	r3, r3
 8003aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003aa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa6:	fab3 f383 	clz	r3, r3
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	095b      	lsrs	r3, r3, #5
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	f043 0301 	orr.w	r3, r3, #1
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d102      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0x128>
 8003aba:	4b4f      	ldr	r3, [pc, #316]	@ (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	e00f      	b.n	8003ae0 <HAL_RCC_ClockConfig+0x148>
 8003ac0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ac8:	fa93 f3a3 	rbit	r3, r3
 8003acc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ace:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ad2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ad6:	fa93 f3a3 	rbit	r3, r3
 8003ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003adc:	4b46      	ldr	r3, [pc, #280]	@ (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ae4:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003ae6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ae8:	fa92 f2a2 	rbit	r2, r2
 8003aec:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003aee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003af0:	fab2 f282 	clz	r2, r2
 8003af4:	b2d2      	uxtb	r2, r2
 8003af6:	f042 0220 	orr.w	r2, r2, #32
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	f002 021f 	and.w	r2, r2, #31
 8003b00:	2101      	movs	r1, #1
 8003b02:	fa01 f202 	lsl.w	r2, r1, r2
 8003b06:	4013      	ands	r3, r2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d13a      	bne.n	8003b82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e0b2      	b.n	8003c76 <HAL_RCC_ClockConfig+0x2de>
 8003b10:	2302      	movs	r3, #2
 8003b12:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b16:	fa93 f3a3 	rbit	r3, r3
 8003b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b1e:	fab3 f383 	clz	r3, r3
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	095b      	lsrs	r3, r3, #5
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	f043 0301 	orr.w	r3, r3, #1
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d102      	bne.n	8003b38 <HAL_RCC_ClockConfig+0x1a0>
 8003b32:	4b31      	ldr	r3, [pc, #196]	@ (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	e00d      	b.n	8003b54 <HAL_RCC_ClockConfig+0x1bc>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b3e:	fa93 f3a3 	rbit	r3, r3
 8003b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b44:	2302      	movs	r3, #2
 8003b46:	623b      	str	r3, [r7, #32]
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	fa93 f3a3 	rbit	r3, r3
 8003b4e:	61fb      	str	r3, [r7, #28]
 8003b50:	4b29      	ldr	r3, [pc, #164]	@ (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b54:	2202      	movs	r2, #2
 8003b56:	61ba      	str	r2, [r7, #24]
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	fa92 f2a2 	rbit	r2, r2
 8003b5e:	617a      	str	r2, [r7, #20]
  return result;
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	fab2 f282 	clz	r2, r2
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	f042 0220 	orr.w	r2, r2, #32
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	f002 021f 	and.w	r2, r2, #31
 8003b72:	2101      	movs	r1, #1
 8003b74:	fa01 f202 	lsl.w	r2, r1, r2
 8003b78:	4013      	ands	r3, r2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e079      	b.n	8003c76 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b82:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f023 0203 	bic.w	r2, r3, #3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	491a      	ldr	r1, [pc, #104]	@ (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b94:	f7fd fe90 	bl	80018b8 <HAL_GetTick>
 8003b98:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9a:	e00a      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b9c:	f7fd fe8c 	bl	80018b8 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e061      	b.n	8003c76 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb2:	4b11      	ldr	r3, [pc, #68]	@ (8003bf8 <HAL_RCC_ClockConfig+0x260>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f003 020c 	and.w	r2, r3, #12
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d1eb      	bne.n	8003b9c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf4 <HAL_RCC_ClockConfig+0x25c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d214      	bcs.n	8003bfc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd2:	4b08      	ldr	r3, [pc, #32]	@ (8003bf4 <HAL_RCC_ClockConfig+0x25c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f023 0207 	bic.w	r2, r3, #7
 8003bda:	4906      	ldr	r1, [pc, #24]	@ (8003bf4 <HAL_RCC_ClockConfig+0x25c>)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be2:	4b04      	ldr	r3, [pc, #16]	@ (8003bf4 <HAL_RCC_ClockConfig+0x25c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d005      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e040      	b.n	8003c76 <HAL_RCC_ClockConfig+0x2de>
 8003bf4:	40022000 	.word	0x40022000
 8003bf8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d008      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c08:	4b1d      	ldr	r3, [pc, #116]	@ (8003c80 <HAL_RCC_ClockConfig+0x2e8>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	491a      	ldr	r1, [pc, #104]	@ (8003c80 <HAL_RCC_ClockConfig+0x2e8>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d009      	beq.n	8003c3a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c26:	4b16      	ldr	r3, [pc, #88]	@ (8003c80 <HAL_RCC_ClockConfig+0x2e8>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	4912      	ldr	r1, [pc, #72]	@ (8003c80 <HAL_RCC_ClockConfig+0x2e8>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c3a:	f000 f829 	bl	8003c90 <HAL_RCC_GetSysClockFreq>
 8003c3e:	4601      	mov	r1, r0
 8003c40:	4b0f      	ldr	r3, [pc, #60]	@ (8003c80 <HAL_RCC_ClockConfig+0x2e8>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c48:	22f0      	movs	r2, #240	@ 0xf0
 8003c4a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	fa92 f2a2 	rbit	r2, r2
 8003c52:	60fa      	str	r2, [r7, #12]
  return result;
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	fab2 f282 	clz	r2, r2
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	40d3      	lsrs	r3, r2
 8003c5e:	4a09      	ldr	r2, [pc, #36]	@ (8003c84 <HAL_RCC_ClockConfig+0x2ec>)
 8003c60:	5cd3      	ldrb	r3, [r2, r3]
 8003c62:	fa21 f303 	lsr.w	r3, r1, r3
 8003c66:	4a08      	ldr	r2, [pc, #32]	@ (8003c88 <HAL_RCC_ClockConfig+0x2f0>)
 8003c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003c6a:	4b08      	ldr	r3, [pc, #32]	@ (8003c8c <HAL_RCC_ClockConfig+0x2f4>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fd fdde 	bl	8001830 <HAL_InitTick>
  
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3778      	adds	r7, #120	@ 0x78
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40021000 	.word	0x40021000
 8003c84:	08007234 	.word	0x08007234
 8003c88:	20000004 	.word	0x20000004
 8003c8c:	20000008 	.word	0x20000008

08003c90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b08b      	sub	sp, #44	@ 0x2c
 8003c94:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	61fb      	str	r3, [r7, #28]
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61bb      	str	r3, [r7, #24]
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003caa:	4b29      	ldr	r3, [pc, #164]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d002      	beq.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x30>
 8003cba:	2b08      	cmp	r3, #8
 8003cbc:	d003      	beq.n	8003cc6 <HAL_RCC_GetSysClockFreq+0x36>
 8003cbe:	e03c      	b.n	8003d3a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cc0:	4b24      	ldr	r3, [pc, #144]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003cc2:	623b      	str	r3, [r7, #32]
      break;
 8003cc4:	e03c      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003ccc:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8003cd0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	fa92 f2a2 	rbit	r2, r2
 8003cd8:	607a      	str	r2, [r7, #4]
  return result;
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	fab2 f282 	clz	r2, r2
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	40d3      	lsrs	r3, r2
 8003ce4:	4a1c      	ldr	r2, [pc, #112]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ce6:	5cd3      	ldrb	r3, [r2, r3]
 8003ce8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003cea:	4b19      	ldr	r3, [pc, #100]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	220f      	movs	r2, #15
 8003cf4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	fa92 f2a2 	rbit	r2, r2
 8003cfc:	60fa      	str	r2, [r7, #12]
  return result;
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	fab2 f282 	clz	r2, r2
 8003d04:	b2d2      	uxtb	r2, r2
 8003d06:	40d3      	lsrs	r3, r2
 8003d08:	4a14      	ldr	r2, [pc, #80]	@ (8003d5c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d0a:	5cd3      	ldrb	r3, [r2, r3]
 8003d0c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d18:	4a0e      	ldr	r2, [pc, #56]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	fb02 f303 	mul.w	r3, r2, r3
 8003d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d28:	e004      	b.n	8003d34 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	4a0c      	ldr	r2, [pc, #48]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d2e:	fb02 f303 	mul.w	r3, r2, r3
 8003d32:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d36:	623b      	str	r3, [r7, #32]
      break;
 8003d38:	e002      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d3a:	4b06      	ldr	r3, [pc, #24]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d3c:	623b      	str	r3, [r7, #32]
      break;
 8003d3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d40:	6a3b      	ldr	r3, [r7, #32]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	372c      	adds	r7, #44	@ 0x2c
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40021000 	.word	0x40021000
 8003d54:	007a1200 	.word	0x007a1200
 8003d58:	08007244 	.word	0x08007244
 8003d5c:	08007254 	.word	0x08007254
 8003d60:	003d0900 	.word	0x003d0900

08003d64 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b092      	sub	sp, #72	@ 0x48
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003d74:	2300      	movs	r3, #0
 8003d76:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 80d4 	beq.w	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d88:	4b4e      	ldr	r3, [pc, #312]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10e      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d94:	4b4b      	ldr	r3, [pc, #300]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	4a4a      	ldr	r2, [pc, #296]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d9e:	61d3      	str	r3, [r2, #28]
 8003da0:	4b48      	ldr	r3, [pc, #288]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003da2:	69db      	ldr	r3, [r3, #28]
 8003da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003da8:	60bb      	str	r3, [r7, #8]
 8003daa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dac:	2301      	movs	r3, #1
 8003dae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db2:	4b45      	ldr	r3, [pc, #276]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d118      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dbe:	4b42      	ldr	r3, [pc, #264]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a41      	ldr	r2, [pc, #260]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dc8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dca:	f7fd fd75 	bl	80018b8 <HAL_GetTick>
 8003dce:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd0:	e008      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd2:	f7fd fd71 	bl	80018b8 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b64      	cmp	r3, #100	@ 0x64
 8003dde:	d901      	bls.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e169      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de4:	4b38      	ldr	r3, [pc, #224]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0f0      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003df0:	4b34      	ldr	r3, [pc, #208]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 8084 	beq.w	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e0a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d07c      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e10:	4b2c      	ldr	r3, [pc, #176]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e1e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e22:	fa93 f3a3 	rbit	r3, r3
 8003e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e2a:	fab3 f383 	clz	r3, r3
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	461a      	mov	r2, r3
 8003e32:	4b26      	ldr	r3, [pc, #152]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e34:	4413      	add	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	461a      	mov	r2, r3
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	6013      	str	r3, [r2, #0]
 8003e3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e46:	fa93 f3a3 	rbit	r3, r3
 8003e4a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e4e:	fab3 f383 	clz	r3, r3
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	461a      	mov	r2, r3
 8003e56:	4b1d      	ldr	r3, [pc, #116]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e58:	4413      	add	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	2300      	movs	r3, #0
 8003e60:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e62:	4a18      	ldr	r2, [pc, #96]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e66:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d04b      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e72:	f7fd fd21 	bl	80018b8 <HAL_GetTick>
 8003e76:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e78:	e00a      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7a:	f7fd fd1d 	bl	80018b8 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e113      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003e90:	2302      	movs	r3, #2
 8003e92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e96:	fa93 f3a3 	rbit	r3, r3
 8003e9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	623b      	str	r3, [r7, #32]
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	fa93 f3a3 	rbit	r3, r3
 8003ea6:	61fb      	str	r3, [r7, #28]
  return result;
 8003ea8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eaa:	fab3 f383 	clz	r3, r3
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	095b      	lsrs	r3, r3, #5
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	f043 0302 	orr.w	r3, r3, #2
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d108      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003ebe:	4b01      	ldr	r3, [pc, #4]	@ (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	e00d      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	40007000 	.word	0x40007000
 8003ecc:	10908100 	.word	0x10908100
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	fa93 f3a3 	rbit	r3, r3
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	4b78      	ldr	r3, [pc, #480]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	613a      	str	r2, [r7, #16]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	fa92 f2a2 	rbit	r2, r2
 8003eea:	60fa      	str	r2, [r7, #12]
  return result;
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	fab2 f282 	clz	r2, r2
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ef8:	b2d2      	uxtb	r2, r2
 8003efa:	f002 021f 	and.w	r2, r2, #31
 8003efe:	2101      	movs	r1, #1
 8003f00:	fa01 f202 	lsl.w	r2, r1, r2
 8003f04:	4013      	ands	r3, r2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0b7      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f0a:	4b6d      	ldr	r3, [pc, #436]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	496a      	ldr	r1, [pc, #424]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f1c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d105      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f24:	4b66      	ldr	r3, [pc, #408]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	4a65      	ldr	r2, [pc, #404]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d008      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f3c:	4b60      	ldr	r3, [pc, #384]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f40:	f023 0203 	bic.w	r2, r3, #3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	495d      	ldr	r1, [pc, #372]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d008      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f5a:	4b59      	ldr	r3, [pc, #356]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	4956      	ldr	r1, [pc, #344]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d008      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f78:	4b51      	ldr	r3, [pc, #324]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	494e      	ldr	r1, [pc, #312]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d008      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f96:	4b4a      	ldr	r3, [pc, #296]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9a:	f023 0210 	bic.w	r2, r3, #16
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	4947      	ldr	r1, [pc, #284]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d008      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003fb4:	4b42      	ldr	r3, [pc, #264]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc0:	493f      	ldr	r1, [pc, #252]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d008      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fd2:	4b3b      	ldr	r3, [pc, #236]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd6:	f023 0220 	bic.w	r2, r3, #32
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	4938      	ldr	r1, [pc, #224]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d008      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ff0:	4b33      	ldr	r3, [pc, #204]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	4930      	ldr	r1, [pc, #192]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0310 	and.w	r3, r3, #16
 800400a:	2b00      	cmp	r3, #0
 800400c:	d008      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800400e:	4b2c      	ldr	r3, [pc, #176]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004012:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	4929      	ldr	r1, [pc, #164]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800401c:	4313      	orrs	r3, r2
 800401e:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004028:	2b00      	cmp	r3, #0
 800402a:	d008      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800402c:	4b24      	ldr	r3, [pc, #144]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004038:	4921      	ldr	r1, [pc, #132]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800403a:	4313      	orrs	r3, r2
 800403c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004046:	2b00      	cmp	r3, #0
 8004048:	d008      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800404a:	4b1d      	ldr	r3, [pc, #116]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800404c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004056:	491a      	ldr	r1, [pc, #104]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004058:	4313      	orrs	r3, r2
 800405a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004064:	2b00      	cmp	r3, #0
 8004066:	d008      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004068:	4b15      	ldr	r3, [pc, #84]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800406a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406c:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004074:	4912      	ldr	r1, [pc, #72]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004076:	4313      	orrs	r3, r2
 8004078:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d008      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004086:	4b0e      	ldr	r3, [pc, #56]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004092:	490b      	ldr	r1, [pc, #44]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004094:	4313      	orrs	r3, r2
 8004096:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d008      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80040a4:	4b06      	ldr	r3, [pc, #24]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040b0:	4903      	ldr	r1, [pc, #12]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3748      	adds	r7, #72	@ 0x48
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40021000 	.word	0x40021000

080040c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e09d      	b.n	8004212 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d108      	bne.n	80040f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040e6:	d009      	beq.n	80040fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	61da      	str	r2, [r3, #28]
 80040ee:	e005      	b.n	80040fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d106      	bne.n	800411c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7fd f99e 	bl	8001458 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004132:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800413c:	d902      	bls.n	8004144 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800413e:	2300      	movs	r3, #0
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	e002      	b.n	800414a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004144:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004148:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004152:	d007      	beq.n	8004164 <HAL_SPI_Init+0xa0>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800415c:	d002      	beq.n	8004164 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004174:	431a      	orrs	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	431a      	orrs	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041a6:	ea42 0103 	orr.w	r1, r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ae:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	0c1b      	lsrs	r3, r3, #16
 80041c0:	f003 0204 	and.w	r2, r3, #4
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c8:	f003 0310 	and.w	r3, r3, #16
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80041e0:	ea42 0103 	orr.w	r1, r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69da      	ldr	r2, [r3, #28]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004200:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b082      	sub	sp, #8
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e049      	b.n	80042c0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d106      	bne.n	8004246 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7fd f94b 	bl	80014dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2202      	movs	r2, #2
 800424a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	3304      	adds	r3, #4
 8004256:	4619      	mov	r1, r3
 8004258:	4610      	mov	r0, r2
 800425a:	f000 f961 	bl	8004520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d001      	beq.n	80042e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e042      	b.n	8004366 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a21      	ldr	r2, [pc, #132]	@ (8004374 <HAL_TIM_Base_Start+0xac>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d018      	beq.n	8004324 <HAL_TIM_Base_Start+0x5c>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042fa:	d013      	beq.n	8004324 <HAL_TIM_Base_Start+0x5c>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a1d      	ldr	r2, [pc, #116]	@ (8004378 <HAL_TIM_Base_Start+0xb0>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d00e      	beq.n	8004324 <HAL_TIM_Base_Start+0x5c>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a1c      	ldr	r2, [pc, #112]	@ (800437c <HAL_TIM_Base_Start+0xb4>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d009      	beq.n	8004324 <HAL_TIM_Base_Start+0x5c>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a1a      	ldr	r2, [pc, #104]	@ (8004380 <HAL_TIM_Base_Start+0xb8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d004      	beq.n	8004324 <HAL_TIM_Base_Start+0x5c>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a19      	ldr	r2, [pc, #100]	@ (8004384 <HAL_TIM_Base_Start+0xbc>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d115      	bne.n	8004350 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689a      	ldr	r2, [r3, #8]
 800432a:	4b17      	ldr	r3, [pc, #92]	@ (8004388 <HAL_TIM_Base_Start+0xc0>)
 800432c:	4013      	ands	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2b06      	cmp	r3, #6
 8004334:	d015      	beq.n	8004362 <HAL_TIM_Base_Start+0x9a>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800433c:	d011      	beq.n	8004362 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f042 0201 	orr.w	r2, r2, #1
 800434c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434e:	e008      	b.n	8004362 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0201 	orr.w	r2, r2, #1
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	e000      	b.n	8004364 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004362:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	40012c00 	.word	0x40012c00
 8004378:	40000400 	.word	0x40000400
 800437c:	40000800 	.word	0x40000800
 8004380:	40013400 	.word	0x40013400
 8004384:	40014000 	.word	0x40014000
 8004388:	00010007 	.word	0x00010007

0800438c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <HAL_TIM_ConfigClockSource+0x1c>
 80043a4:	2302      	movs	r3, #2
 80043a6:	e0b6      	b.n	8004516 <HAL_TIM_ConfigClockSource+0x18a>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80043ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043e4:	d03e      	beq.n	8004464 <HAL_TIM_ConfigClockSource+0xd8>
 80043e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043ea:	f200 8087 	bhi.w	80044fc <HAL_TIM_ConfigClockSource+0x170>
 80043ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043f2:	f000 8086 	beq.w	8004502 <HAL_TIM_ConfigClockSource+0x176>
 80043f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043fa:	d87f      	bhi.n	80044fc <HAL_TIM_ConfigClockSource+0x170>
 80043fc:	2b70      	cmp	r3, #112	@ 0x70
 80043fe:	d01a      	beq.n	8004436 <HAL_TIM_ConfigClockSource+0xaa>
 8004400:	2b70      	cmp	r3, #112	@ 0x70
 8004402:	d87b      	bhi.n	80044fc <HAL_TIM_ConfigClockSource+0x170>
 8004404:	2b60      	cmp	r3, #96	@ 0x60
 8004406:	d050      	beq.n	80044aa <HAL_TIM_ConfigClockSource+0x11e>
 8004408:	2b60      	cmp	r3, #96	@ 0x60
 800440a:	d877      	bhi.n	80044fc <HAL_TIM_ConfigClockSource+0x170>
 800440c:	2b50      	cmp	r3, #80	@ 0x50
 800440e:	d03c      	beq.n	800448a <HAL_TIM_ConfigClockSource+0xfe>
 8004410:	2b50      	cmp	r3, #80	@ 0x50
 8004412:	d873      	bhi.n	80044fc <HAL_TIM_ConfigClockSource+0x170>
 8004414:	2b40      	cmp	r3, #64	@ 0x40
 8004416:	d058      	beq.n	80044ca <HAL_TIM_ConfigClockSource+0x13e>
 8004418:	2b40      	cmp	r3, #64	@ 0x40
 800441a:	d86f      	bhi.n	80044fc <HAL_TIM_ConfigClockSource+0x170>
 800441c:	2b30      	cmp	r3, #48	@ 0x30
 800441e:	d064      	beq.n	80044ea <HAL_TIM_ConfigClockSource+0x15e>
 8004420:	2b30      	cmp	r3, #48	@ 0x30
 8004422:	d86b      	bhi.n	80044fc <HAL_TIM_ConfigClockSource+0x170>
 8004424:	2b20      	cmp	r3, #32
 8004426:	d060      	beq.n	80044ea <HAL_TIM_ConfigClockSource+0x15e>
 8004428:	2b20      	cmp	r3, #32
 800442a:	d867      	bhi.n	80044fc <HAL_TIM_ConfigClockSource+0x170>
 800442c:	2b00      	cmp	r3, #0
 800442e:	d05c      	beq.n	80044ea <HAL_TIM_ConfigClockSource+0x15e>
 8004430:	2b10      	cmp	r3, #16
 8004432:	d05a      	beq.n	80044ea <HAL_TIM_ConfigClockSource+0x15e>
 8004434:	e062      	b.n	80044fc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004446:	f000 f975 	bl	8004734 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004458:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	609a      	str	r2, [r3, #8]
      break;
 8004462:	e04f      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004474:	f000 f95e 	bl	8004734 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689a      	ldr	r2, [r3, #8]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004486:	609a      	str	r2, [r3, #8]
      break;
 8004488:	e03c      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004496:	461a      	mov	r2, r3
 8004498:	f000 f8d2 	bl	8004640 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2150      	movs	r1, #80	@ 0x50
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 f92b 	bl	80046fe <TIM_ITRx_SetConfig>
      break;
 80044a8:	e02c      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044b6:	461a      	mov	r2, r3
 80044b8:	f000 f8f1 	bl	800469e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2160      	movs	r1, #96	@ 0x60
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 f91b 	bl	80046fe <TIM_ITRx_SetConfig>
      break;
 80044c8:	e01c      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044d6:	461a      	mov	r2, r3
 80044d8:	f000 f8b2 	bl	8004640 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2140      	movs	r1, #64	@ 0x40
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 f90b 	bl	80046fe <TIM_ITRx_SetConfig>
      break;
 80044e8:	e00c      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4619      	mov	r1, r3
 80044f4:	4610      	mov	r0, r2
 80044f6:	f000 f902 	bl	80046fe <TIM_ITRx_SetConfig>
      break;
 80044fa:	e003      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004500:	e000      	b.n	8004504 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004502:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004514:	7bfb      	ldrb	r3, [r7, #15]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
	...

08004520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a3c      	ldr	r2, [pc, #240]	@ (8004624 <TIM_Base_SetConfig+0x104>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d00f      	beq.n	8004558 <TIM_Base_SetConfig+0x38>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800453e:	d00b      	beq.n	8004558 <TIM_Base_SetConfig+0x38>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a39      	ldr	r2, [pc, #228]	@ (8004628 <TIM_Base_SetConfig+0x108>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d007      	beq.n	8004558 <TIM_Base_SetConfig+0x38>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a38      	ldr	r2, [pc, #224]	@ (800462c <TIM_Base_SetConfig+0x10c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d003      	beq.n	8004558 <TIM_Base_SetConfig+0x38>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a37      	ldr	r2, [pc, #220]	@ (8004630 <TIM_Base_SetConfig+0x110>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d108      	bne.n	800456a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800455e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a2d      	ldr	r2, [pc, #180]	@ (8004624 <TIM_Base_SetConfig+0x104>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d01b      	beq.n	80045aa <TIM_Base_SetConfig+0x8a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004578:	d017      	beq.n	80045aa <TIM_Base_SetConfig+0x8a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a2a      	ldr	r2, [pc, #168]	@ (8004628 <TIM_Base_SetConfig+0x108>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d013      	beq.n	80045aa <TIM_Base_SetConfig+0x8a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a29      	ldr	r2, [pc, #164]	@ (800462c <TIM_Base_SetConfig+0x10c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d00f      	beq.n	80045aa <TIM_Base_SetConfig+0x8a>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a28      	ldr	r2, [pc, #160]	@ (8004630 <TIM_Base_SetConfig+0x110>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d00b      	beq.n	80045aa <TIM_Base_SetConfig+0x8a>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a27      	ldr	r2, [pc, #156]	@ (8004634 <TIM_Base_SetConfig+0x114>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d007      	beq.n	80045aa <TIM_Base_SetConfig+0x8a>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a26      	ldr	r2, [pc, #152]	@ (8004638 <TIM_Base_SetConfig+0x118>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d003      	beq.n	80045aa <TIM_Base_SetConfig+0x8a>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a25      	ldr	r2, [pc, #148]	@ (800463c <TIM_Base_SetConfig+0x11c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d108      	bne.n	80045bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a10      	ldr	r2, [pc, #64]	@ (8004624 <TIM_Base_SetConfig+0x104>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d00f      	beq.n	8004608 <TIM_Base_SetConfig+0xe8>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a11      	ldr	r2, [pc, #68]	@ (8004630 <TIM_Base_SetConfig+0x110>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d00b      	beq.n	8004608 <TIM_Base_SetConfig+0xe8>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a10      	ldr	r2, [pc, #64]	@ (8004634 <TIM_Base_SetConfig+0x114>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d007      	beq.n	8004608 <TIM_Base_SetConfig+0xe8>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a0f      	ldr	r2, [pc, #60]	@ (8004638 <TIM_Base_SetConfig+0x118>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d003      	beq.n	8004608 <TIM_Base_SetConfig+0xe8>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a0e      	ldr	r2, [pc, #56]	@ (800463c <TIM_Base_SetConfig+0x11c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d103      	bne.n	8004610 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	691a      	ldr	r2, [r3, #16]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	615a      	str	r2, [r3, #20]
}
 8004616:	bf00      	nop
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	40012c00 	.word	0x40012c00
 8004628:	40000400 	.word	0x40000400
 800462c:	40000800 	.word	0x40000800
 8004630:	40013400 	.word	0x40013400
 8004634:	40014000 	.word	0x40014000
 8004638:	40014400 	.word	0x40014400
 800463c:	40014800 	.word	0x40014800

08004640 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004640:	b480      	push	{r7}
 8004642:	b087      	sub	sp, #28
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	f023 0201 	bic.w	r2, r3, #1
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800466a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	011b      	lsls	r3, r3, #4
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	4313      	orrs	r3, r2
 8004674:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f023 030a 	bic.w	r3, r3, #10
 800467c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	4313      	orrs	r3, r2
 8004684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	621a      	str	r2, [r3, #32]
}
 8004692:	bf00      	nop
 8004694:	371c      	adds	r7, #28
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800469e:	b480      	push	{r7}
 80046a0:	b087      	sub	sp, #28
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	60f8      	str	r0, [r7, #12]
 80046a6:	60b9      	str	r1, [r7, #8]
 80046a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	f023 0210 	bic.w	r2, r3, #16
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	031b      	lsls	r3, r3, #12
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80046da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	011b      	lsls	r3, r3, #4
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	621a      	str	r2, [r3, #32]
}
 80046f2:	bf00      	nop
 80046f4:	371c      	adds	r7, #28
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046fe:	b480      	push	{r7}
 8004700:	b085      	sub	sp, #20
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
 8004706:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004714:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4313      	orrs	r3, r2
 800471c:	f043 0307 	orr.w	r3, r3, #7
 8004720:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	609a      	str	r2, [r3, #8]
}
 8004728:	bf00      	nop
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
 8004740:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800474e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	021a      	lsls	r2, r3, #8
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	431a      	orrs	r2, r3
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	4313      	orrs	r3, r2
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	4313      	orrs	r3, r2
 8004760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	609a      	str	r2, [r3, #8]
}
 8004768:	bf00      	nop
 800476a:	371c      	adds	r7, #28
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004784:	2b01      	cmp	r3, #1
 8004786:	d101      	bne.n	800478c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004788:	2302      	movs	r3, #2
 800478a:	e063      	b.n	8004854 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a2b      	ldr	r2, [pc, #172]	@ (8004860 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d004      	beq.n	80047c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a2a      	ldr	r2, [pc, #168]	@ (8004864 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d108      	bne.n	80047d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80047c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a1b      	ldr	r2, [pc, #108]	@ (8004860 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d018      	beq.n	8004828 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047fe:	d013      	beq.n	8004828 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a18      	ldr	r2, [pc, #96]	@ (8004868 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d00e      	beq.n	8004828 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a17      	ldr	r2, [pc, #92]	@ (800486c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d009      	beq.n	8004828 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a12      	ldr	r2, [pc, #72]	@ (8004864 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d004      	beq.n	8004828 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a13      	ldr	r2, [pc, #76]	@ (8004870 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d10c      	bne.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800482e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	4313      	orrs	r3, r2
 8004838:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	40012c00 	.word	0x40012c00
 8004864:	40013400 	.word	0x40013400
 8004868:	40000400 	.word	0x40000400
 800486c:	40000800 	.word	0x40000800
 8004870:	40014000 	.word	0x40014000

08004874 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800487c:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004880:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004888:	b29a      	uxth	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	b29b      	uxth	r3, r3
 800488e:	43db      	mvns	r3, r3
 8004890:	b29b      	uxth	r3, r3
 8004892:	4013      	ands	r3, r2
 8004894:	b29a      	uxth	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80048aa:	b084      	sub	sp, #16
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	f107 0014 	add.w	r0, r7, #20
 80048b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	b004      	add	sp, #16
 80048ea:	4770      	bx	lr

080048ec <__cvt>:
 80048ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048f0:	ec57 6b10 	vmov	r6, r7, d0
 80048f4:	2f00      	cmp	r7, #0
 80048f6:	460c      	mov	r4, r1
 80048f8:	4619      	mov	r1, r3
 80048fa:	463b      	mov	r3, r7
 80048fc:	bfbb      	ittet	lt
 80048fe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004902:	461f      	movlt	r7, r3
 8004904:	2300      	movge	r3, #0
 8004906:	232d      	movlt	r3, #45	@ 0x2d
 8004908:	700b      	strb	r3, [r1, #0]
 800490a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800490c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004910:	4691      	mov	r9, r2
 8004912:	f023 0820 	bic.w	r8, r3, #32
 8004916:	bfbc      	itt	lt
 8004918:	4632      	movlt	r2, r6
 800491a:	4616      	movlt	r6, r2
 800491c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004920:	d005      	beq.n	800492e <__cvt+0x42>
 8004922:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004926:	d100      	bne.n	800492a <__cvt+0x3e>
 8004928:	3401      	adds	r4, #1
 800492a:	2102      	movs	r1, #2
 800492c:	e000      	b.n	8004930 <__cvt+0x44>
 800492e:	2103      	movs	r1, #3
 8004930:	ab03      	add	r3, sp, #12
 8004932:	9301      	str	r3, [sp, #4]
 8004934:	ab02      	add	r3, sp, #8
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	ec47 6b10 	vmov	d0, r6, r7
 800493c:	4653      	mov	r3, sl
 800493e:	4622      	mov	r2, r4
 8004940:	f000 fe5a 	bl	80055f8 <_dtoa_r>
 8004944:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004948:	4605      	mov	r5, r0
 800494a:	d119      	bne.n	8004980 <__cvt+0x94>
 800494c:	f019 0f01 	tst.w	r9, #1
 8004950:	d00e      	beq.n	8004970 <__cvt+0x84>
 8004952:	eb00 0904 	add.w	r9, r0, r4
 8004956:	2200      	movs	r2, #0
 8004958:	2300      	movs	r3, #0
 800495a:	4630      	mov	r0, r6
 800495c:	4639      	mov	r1, r7
 800495e:	f7fc f8b3 	bl	8000ac8 <__aeabi_dcmpeq>
 8004962:	b108      	cbz	r0, 8004968 <__cvt+0x7c>
 8004964:	f8cd 900c 	str.w	r9, [sp, #12]
 8004968:	2230      	movs	r2, #48	@ 0x30
 800496a:	9b03      	ldr	r3, [sp, #12]
 800496c:	454b      	cmp	r3, r9
 800496e:	d31e      	bcc.n	80049ae <__cvt+0xc2>
 8004970:	9b03      	ldr	r3, [sp, #12]
 8004972:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004974:	1b5b      	subs	r3, r3, r5
 8004976:	4628      	mov	r0, r5
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	b004      	add	sp, #16
 800497c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004980:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004984:	eb00 0904 	add.w	r9, r0, r4
 8004988:	d1e5      	bne.n	8004956 <__cvt+0x6a>
 800498a:	7803      	ldrb	r3, [r0, #0]
 800498c:	2b30      	cmp	r3, #48	@ 0x30
 800498e:	d10a      	bne.n	80049a6 <__cvt+0xba>
 8004990:	2200      	movs	r2, #0
 8004992:	2300      	movs	r3, #0
 8004994:	4630      	mov	r0, r6
 8004996:	4639      	mov	r1, r7
 8004998:	f7fc f896 	bl	8000ac8 <__aeabi_dcmpeq>
 800499c:	b918      	cbnz	r0, 80049a6 <__cvt+0xba>
 800499e:	f1c4 0401 	rsb	r4, r4, #1
 80049a2:	f8ca 4000 	str.w	r4, [sl]
 80049a6:	f8da 3000 	ldr.w	r3, [sl]
 80049aa:	4499      	add	r9, r3
 80049ac:	e7d3      	b.n	8004956 <__cvt+0x6a>
 80049ae:	1c59      	adds	r1, r3, #1
 80049b0:	9103      	str	r1, [sp, #12]
 80049b2:	701a      	strb	r2, [r3, #0]
 80049b4:	e7d9      	b.n	800496a <__cvt+0x7e>

080049b6 <__exponent>:
 80049b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049b8:	2900      	cmp	r1, #0
 80049ba:	bfba      	itte	lt
 80049bc:	4249      	neglt	r1, r1
 80049be:	232d      	movlt	r3, #45	@ 0x2d
 80049c0:	232b      	movge	r3, #43	@ 0x2b
 80049c2:	2909      	cmp	r1, #9
 80049c4:	7002      	strb	r2, [r0, #0]
 80049c6:	7043      	strb	r3, [r0, #1]
 80049c8:	dd29      	ble.n	8004a1e <__exponent+0x68>
 80049ca:	f10d 0307 	add.w	r3, sp, #7
 80049ce:	461d      	mov	r5, r3
 80049d0:	270a      	movs	r7, #10
 80049d2:	461a      	mov	r2, r3
 80049d4:	fbb1 f6f7 	udiv	r6, r1, r7
 80049d8:	fb07 1416 	mls	r4, r7, r6, r1
 80049dc:	3430      	adds	r4, #48	@ 0x30
 80049de:	f802 4c01 	strb.w	r4, [r2, #-1]
 80049e2:	460c      	mov	r4, r1
 80049e4:	2c63      	cmp	r4, #99	@ 0x63
 80049e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80049ea:	4631      	mov	r1, r6
 80049ec:	dcf1      	bgt.n	80049d2 <__exponent+0x1c>
 80049ee:	3130      	adds	r1, #48	@ 0x30
 80049f0:	1e94      	subs	r4, r2, #2
 80049f2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80049f6:	1c41      	adds	r1, r0, #1
 80049f8:	4623      	mov	r3, r4
 80049fa:	42ab      	cmp	r3, r5
 80049fc:	d30a      	bcc.n	8004a14 <__exponent+0x5e>
 80049fe:	f10d 0309 	add.w	r3, sp, #9
 8004a02:	1a9b      	subs	r3, r3, r2
 8004a04:	42ac      	cmp	r4, r5
 8004a06:	bf88      	it	hi
 8004a08:	2300      	movhi	r3, #0
 8004a0a:	3302      	adds	r3, #2
 8004a0c:	4403      	add	r3, r0
 8004a0e:	1a18      	subs	r0, r3, r0
 8004a10:	b003      	add	sp, #12
 8004a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a14:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004a18:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004a1c:	e7ed      	b.n	80049fa <__exponent+0x44>
 8004a1e:	2330      	movs	r3, #48	@ 0x30
 8004a20:	3130      	adds	r1, #48	@ 0x30
 8004a22:	7083      	strb	r3, [r0, #2]
 8004a24:	70c1      	strb	r1, [r0, #3]
 8004a26:	1d03      	adds	r3, r0, #4
 8004a28:	e7f1      	b.n	8004a0e <__exponent+0x58>
	...

08004a2c <_printf_float>:
 8004a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a30:	b08d      	sub	sp, #52	@ 0x34
 8004a32:	460c      	mov	r4, r1
 8004a34:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004a38:	4616      	mov	r6, r2
 8004a3a:	461f      	mov	r7, r3
 8004a3c:	4605      	mov	r5, r0
 8004a3e:	f000 fccd 	bl	80053dc <_localeconv_r>
 8004a42:	6803      	ldr	r3, [r0, #0]
 8004a44:	9304      	str	r3, [sp, #16]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fb fc12 	bl	8000270 <strlen>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a50:	f8d8 3000 	ldr.w	r3, [r8]
 8004a54:	9005      	str	r0, [sp, #20]
 8004a56:	3307      	adds	r3, #7
 8004a58:	f023 0307 	bic.w	r3, r3, #7
 8004a5c:	f103 0208 	add.w	r2, r3, #8
 8004a60:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004a64:	f8d4 b000 	ldr.w	fp, [r4]
 8004a68:	f8c8 2000 	str.w	r2, [r8]
 8004a6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004a70:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004a74:	9307      	str	r3, [sp, #28]
 8004a76:	f8cd 8018 	str.w	r8, [sp, #24]
 8004a7a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004a7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a82:	4b9c      	ldr	r3, [pc, #624]	@ (8004cf4 <_printf_float+0x2c8>)
 8004a84:	f04f 32ff 	mov.w	r2, #4294967295
 8004a88:	f7fc f850 	bl	8000b2c <__aeabi_dcmpun>
 8004a8c:	bb70      	cbnz	r0, 8004aec <_printf_float+0xc0>
 8004a8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a92:	4b98      	ldr	r3, [pc, #608]	@ (8004cf4 <_printf_float+0x2c8>)
 8004a94:	f04f 32ff 	mov.w	r2, #4294967295
 8004a98:	f7fc f82a 	bl	8000af0 <__aeabi_dcmple>
 8004a9c:	bb30      	cbnz	r0, 8004aec <_printf_float+0xc0>
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	4640      	mov	r0, r8
 8004aa4:	4649      	mov	r1, r9
 8004aa6:	f7fc f819 	bl	8000adc <__aeabi_dcmplt>
 8004aaa:	b110      	cbz	r0, 8004ab2 <_printf_float+0x86>
 8004aac:	232d      	movs	r3, #45	@ 0x2d
 8004aae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ab2:	4a91      	ldr	r2, [pc, #580]	@ (8004cf8 <_printf_float+0x2cc>)
 8004ab4:	4b91      	ldr	r3, [pc, #580]	@ (8004cfc <_printf_float+0x2d0>)
 8004ab6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004aba:	bf94      	ite	ls
 8004abc:	4690      	movls	r8, r2
 8004abe:	4698      	movhi	r8, r3
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	6123      	str	r3, [r4, #16]
 8004ac4:	f02b 0304 	bic.w	r3, fp, #4
 8004ac8:	6023      	str	r3, [r4, #0]
 8004aca:	f04f 0900 	mov.w	r9, #0
 8004ace:	9700      	str	r7, [sp, #0]
 8004ad0:	4633      	mov	r3, r6
 8004ad2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004ad4:	4621      	mov	r1, r4
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	f000 f9d2 	bl	8004e80 <_printf_common>
 8004adc:	3001      	adds	r0, #1
 8004ade:	f040 808d 	bne.w	8004bfc <_printf_float+0x1d0>
 8004ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae6:	b00d      	add	sp, #52	@ 0x34
 8004ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aec:	4642      	mov	r2, r8
 8004aee:	464b      	mov	r3, r9
 8004af0:	4640      	mov	r0, r8
 8004af2:	4649      	mov	r1, r9
 8004af4:	f7fc f81a 	bl	8000b2c <__aeabi_dcmpun>
 8004af8:	b140      	cbz	r0, 8004b0c <_printf_float+0xe0>
 8004afa:	464b      	mov	r3, r9
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	bfbc      	itt	lt
 8004b00:	232d      	movlt	r3, #45	@ 0x2d
 8004b02:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004b06:	4a7e      	ldr	r2, [pc, #504]	@ (8004d00 <_printf_float+0x2d4>)
 8004b08:	4b7e      	ldr	r3, [pc, #504]	@ (8004d04 <_printf_float+0x2d8>)
 8004b0a:	e7d4      	b.n	8004ab6 <_printf_float+0x8a>
 8004b0c:	6863      	ldr	r3, [r4, #4]
 8004b0e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004b12:	9206      	str	r2, [sp, #24]
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	d13b      	bne.n	8004b90 <_printf_float+0x164>
 8004b18:	2306      	movs	r3, #6
 8004b1a:	6063      	str	r3, [r4, #4]
 8004b1c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004b20:	2300      	movs	r3, #0
 8004b22:	6022      	str	r2, [r4, #0]
 8004b24:	9303      	str	r3, [sp, #12]
 8004b26:	ab0a      	add	r3, sp, #40	@ 0x28
 8004b28:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004b2c:	ab09      	add	r3, sp, #36	@ 0x24
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	6861      	ldr	r1, [r4, #4]
 8004b32:	ec49 8b10 	vmov	d0, r8, r9
 8004b36:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	f7ff fed6 	bl	80048ec <__cvt>
 8004b40:	9b06      	ldr	r3, [sp, #24]
 8004b42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004b44:	2b47      	cmp	r3, #71	@ 0x47
 8004b46:	4680      	mov	r8, r0
 8004b48:	d129      	bne.n	8004b9e <_printf_float+0x172>
 8004b4a:	1cc8      	adds	r0, r1, #3
 8004b4c:	db02      	blt.n	8004b54 <_printf_float+0x128>
 8004b4e:	6863      	ldr	r3, [r4, #4]
 8004b50:	4299      	cmp	r1, r3
 8004b52:	dd41      	ble.n	8004bd8 <_printf_float+0x1ac>
 8004b54:	f1aa 0a02 	sub.w	sl, sl, #2
 8004b58:	fa5f fa8a 	uxtb.w	sl, sl
 8004b5c:	3901      	subs	r1, #1
 8004b5e:	4652      	mov	r2, sl
 8004b60:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004b64:	9109      	str	r1, [sp, #36]	@ 0x24
 8004b66:	f7ff ff26 	bl	80049b6 <__exponent>
 8004b6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004b6c:	1813      	adds	r3, r2, r0
 8004b6e:	2a01      	cmp	r2, #1
 8004b70:	4681      	mov	r9, r0
 8004b72:	6123      	str	r3, [r4, #16]
 8004b74:	dc02      	bgt.n	8004b7c <_printf_float+0x150>
 8004b76:	6822      	ldr	r2, [r4, #0]
 8004b78:	07d2      	lsls	r2, r2, #31
 8004b7a:	d501      	bpl.n	8004b80 <_printf_float+0x154>
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	6123      	str	r3, [r4, #16]
 8004b80:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0a2      	beq.n	8004ace <_printf_float+0xa2>
 8004b88:	232d      	movs	r3, #45	@ 0x2d
 8004b8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b8e:	e79e      	b.n	8004ace <_printf_float+0xa2>
 8004b90:	9a06      	ldr	r2, [sp, #24]
 8004b92:	2a47      	cmp	r2, #71	@ 0x47
 8004b94:	d1c2      	bne.n	8004b1c <_printf_float+0xf0>
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1c0      	bne.n	8004b1c <_printf_float+0xf0>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e7bd      	b.n	8004b1a <_printf_float+0xee>
 8004b9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004ba2:	d9db      	bls.n	8004b5c <_printf_float+0x130>
 8004ba4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004ba8:	d118      	bne.n	8004bdc <_printf_float+0x1b0>
 8004baa:	2900      	cmp	r1, #0
 8004bac:	6863      	ldr	r3, [r4, #4]
 8004bae:	dd0b      	ble.n	8004bc8 <_printf_float+0x19c>
 8004bb0:	6121      	str	r1, [r4, #16]
 8004bb2:	b913      	cbnz	r3, 8004bba <_printf_float+0x18e>
 8004bb4:	6822      	ldr	r2, [r4, #0]
 8004bb6:	07d0      	lsls	r0, r2, #31
 8004bb8:	d502      	bpl.n	8004bc0 <_printf_float+0x194>
 8004bba:	3301      	adds	r3, #1
 8004bbc:	440b      	add	r3, r1
 8004bbe:	6123      	str	r3, [r4, #16]
 8004bc0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004bc2:	f04f 0900 	mov.w	r9, #0
 8004bc6:	e7db      	b.n	8004b80 <_printf_float+0x154>
 8004bc8:	b913      	cbnz	r3, 8004bd0 <_printf_float+0x1a4>
 8004bca:	6822      	ldr	r2, [r4, #0]
 8004bcc:	07d2      	lsls	r2, r2, #31
 8004bce:	d501      	bpl.n	8004bd4 <_printf_float+0x1a8>
 8004bd0:	3302      	adds	r3, #2
 8004bd2:	e7f4      	b.n	8004bbe <_printf_float+0x192>
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e7f2      	b.n	8004bbe <_printf_float+0x192>
 8004bd8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004bdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004bde:	4299      	cmp	r1, r3
 8004be0:	db05      	blt.n	8004bee <_printf_float+0x1c2>
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	6121      	str	r1, [r4, #16]
 8004be6:	07d8      	lsls	r0, r3, #31
 8004be8:	d5ea      	bpl.n	8004bc0 <_printf_float+0x194>
 8004bea:	1c4b      	adds	r3, r1, #1
 8004bec:	e7e7      	b.n	8004bbe <_printf_float+0x192>
 8004bee:	2900      	cmp	r1, #0
 8004bf0:	bfd4      	ite	le
 8004bf2:	f1c1 0202 	rsble	r2, r1, #2
 8004bf6:	2201      	movgt	r2, #1
 8004bf8:	4413      	add	r3, r2
 8004bfa:	e7e0      	b.n	8004bbe <_printf_float+0x192>
 8004bfc:	6823      	ldr	r3, [r4, #0]
 8004bfe:	055a      	lsls	r2, r3, #21
 8004c00:	d407      	bmi.n	8004c12 <_printf_float+0x1e6>
 8004c02:	6923      	ldr	r3, [r4, #16]
 8004c04:	4642      	mov	r2, r8
 8004c06:	4631      	mov	r1, r6
 8004c08:	4628      	mov	r0, r5
 8004c0a:	47b8      	blx	r7
 8004c0c:	3001      	adds	r0, #1
 8004c0e:	d12b      	bne.n	8004c68 <_printf_float+0x23c>
 8004c10:	e767      	b.n	8004ae2 <_printf_float+0xb6>
 8004c12:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004c16:	f240 80dd 	bls.w	8004dd4 <_printf_float+0x3a8>
 8004c1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004c1e:	2200      	movs	r2, #0
 8004c20:	2300      	movs	r3, #0
 8004c22:	f7fb ff51 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c26:	2800      	cmp	r0, #0
 8004c28:	d033      	beq.n	8004c92 <_printf_float+0x266>
 8004c2a:	4a37      	ldr	r2, [pc, #220]	@ (8004d08 <_printf_float+0x2dc>)
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	4631      	mov	r1, r6
 8004c30:	4628      	mov	r0, r5
 8004c32:	47b8      	blx	r7
 8004c34:	3001      	adds	r0, #1
 8004c36:	f43f af54 	beq.w	8004ae2 <_printf_float+0xb6>
 8004c3a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004c3e:	4543      	cmp	r3, r8
 8004c40:	db02      	blt.n	8004c48 <_printf_float+0x21c>
 8004c42:	6823      	ldr	r3, [r4, #0]
 8004c44:	07d8      	lsls	r0, r3, #31
 8004c46:	d50f      	bpl.n	8004c68 <_printf_float+0x23c>
 8004c48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c4c:	4631      	mov	r1, r6
 8004c4e:	4628      	mov	r0, r5
 8004c50:	47b8      	blx	r7
 8004c52:	3001      	adds	r0, #1
 8004c54:	f43f af45 	beq.w	8004ae2 <_printf_float+0xb6>
 8004c58:	f04f 0900 	mov.w	r9, #0
 8004c5c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004c60:	f104 0a1a 	add.w	sl, r4, #26
 8004c64:	45c8      	cmp	r8, r9
 8004c66:	dc09      	bgt.n	8004c7c <_printf_float+0x250>
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	079b      	lsls	r3, r3, #30
 8004c6c:	f100 8103 	bmi.w	8004e76 <_printf_float+0x44a>
 8004c70:	68e0      	ldr	r0, [r4, #12]
 8004c72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c74:	4298      	cmp	r0, r3
 8004c76:	bfb8      	it	lt
 8004c78:	4618      	movlt	r0, r3
 8004c7a:	e734      	b.n	8004ae6 <_printf_float+0xba>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	4652      	mov	r2, sl
 8004c80:	4631      	mov	r1, r6
 8004c82:	4628      	mov	r0, r5
 8004c84:	47b8      	blx	r7
 8004c86:	3001      	adds	r0, #1
 8004c88:	f43f af2b 	beq.w	8004ae2 <_printf_float+0xb6>
 8004c8c:	f109 0901 	add.w	r9, r9, #1
 8004c90:	e7e8      	b.n	8004c64 <_printf_float+0x238>
 8004c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	dc39      	bgt.n	8004d0c <_printf_float+0x2e0>
 8004c98:	4a1b      	ldr	r2, [pc, #108]	@ (8004d08 <_printf_float+0x2dc>)
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	4631      	mov	r1, r6
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	47b8      	blx	r7
 8004ca2:	3001      	adds	r0, #1
 8004ca4:	f43f af1d 	beq.w	8004ae2 <_printf_float+0xb6>
 8004ca8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004cac:	ea59 0303 	orrs.w	r3, r9, r3
 8004cb0:	d102      	bne.n	8004cb8 <_printf_float+0x28c>
 8004cb2:	6823      	ldr	r3, [r4, #0]
 8004cb4:	07d9      	lsls	r1, r3, #31
 8004cb6:	d5d7      	bpl.n	8004c68 <_printf_float+0x23c>
 8004cb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cbc:	4631      	mov	r1, r6
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	47b8      	blx	r7
 8004cc2:	3001      	adds	r0, #1
 8004cc4:	f43f af0d 	beq.w	8004ae2 <_printf_float+0xb6>
 8004cc8:	f04f 0a00 	mov.w	sl, #0
 8004ccc:	f104 0b1a 	add.w	fp, r4, #26
 8004cd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cd2:	425b      	negs	r3, r3
 8004cd4:	4553      	cmp	r3, sl
 8004cd6:	dc01      	bgt.n	8004cdc <_printf_float+0x2b0>
 8004cd8:	464b      	mov	r3, r9
 8004cda:	e793      	b.n	8004c04 <_printf_float+0x1d8>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	465a      	mov	r2, fp
 8004ce0:	4631      	mov	r1, r6
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	47b8      	blx	r7
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	f43f aefb 	beq.w	8004ae2 <_printf_float+0xb6>
 8004cec:	f10a 0a01 	add.w	sl, sl, #1
 8004cf0:	e7ee      	b.n	8004cd0 <_printf_float+0x2a4>
 8004cf2:	bf00      	nop
 8004cf4:	7fefffff 	.word	0x7fefffff
 8004cf8:	08007264 	.word	0x08007264
 8004cfc:	08007268 	.word	0x08007268
 8004d00:	0800726c 	.word	0x0800726c
 8004d04:	08007270 	.word	0x08007270
 8004d08:	08007274 	.word	0x08007274
 8004d0c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d0e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004d12:	4553      	cmp	r3, sl
 8004d14:	bfa8      	it	ge
 8004d16:	4653      	movge	r3, sl
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	4699      	mov	r9, r3
 8004d1c:	dc36      	bgt.n	8004d8c <_printf_float+0x360>
 8004d1e:	f04f 0b00 	mov.w	fp, #0
 8004d22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d26:	f104 021a 	add.w	r2, r4, #26
 8004d2a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d2c:	9306      	str	r3, [sp, #24]
 8004d2e:	eba3 0309 	sub.w	r3, r3, r9
 8004d32:	455b      	cmp	r3, fp
 8004d34:	dc31      	bgt.n	8004d9a <_printf_float+0x36e>
 8004d36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d38:	459a      	cmp	sl, r3
 8004d3a:	dc3a      	bgt.n	8004db2 <_printf_float+0x386>
 8004d3c:	6823      	ldr	r3, [r4, #0]
 8004d3e:	07da      	lsls	r2, r3, #31
 8004d40:	d437      	bmi.n	8004db2 <_printf_float+0x386>
 8004d42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d44:	ebaa 0903 	sub.w	r9, sl, r3
 8004d48:	9b06      	ldr	r3, [sp, #24]
 8004d4a:	ebaa 0303 	sub.w	r3, sl, r3
 8004d4e:	4599      	cmp	r9, r3
 8004d50:	bfa8      	it	ge
 8004d52:	4699      	movge	r9, r3
 8004d54:	f1b9 0f00 	cmp.w	r9, #0
 8004d58:	dc33      	bgt.n	8004dc2 <_printf_float+0x396>
 8004d5a:	f04f 0800 	mov.w	r8, #0
 8004d5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d62:	f104 0b1a 	add.w	fp, r4, #26
 8004d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d68:	ebaa 0303 	sub.w	r3, sl, r3
 8004d6c:	eba3 0309 	sub.w	r3, r3, r9
 8004d70:	4543      	cmp	r3, r8
 8004d72:	f77f af79 	ble.w	8004c68 <_printf_float+0x23c>
 8004d76:	2301      	movs	r3, #1
 8004d78:	465a      	mov	r2, fp
 8004d7a:	4631      	mov	r1, r6
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	47b8      	blx	r7
 8004d80:	3001      	adds	r0, #1
 8004d82:	f43f aeae 	beq.w	8004ae2 <_printf_float+0xb6>
 8004d86:	f108 0801 	add.w	r8, r8, #1
 8004d8a:	e7ec      	b.n	8004d66 <_printf_float+0x33a>
 8004d8c:	4642      	mov	r2, r8
 8004d8e:	4631      	mov	r1, r6
 8004d90:	4628      	mov	r0, r5
 8004d92:	47b8      	blx	r7
 8004d94:	3001      	adds	r0, #1
 8004d96:	d1c2      	bne.n	8004d1e <_printf_float+0x2f2>
 8004d98:	e6a3      	b.n	8004ae2 <_printf_float+0xb6>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	4631      	mov	r1, r6
 8004d9e:	4628      	mov	r0, r5
 8004da0:	9206      	str	r2, [sp, #24]
 8004da2:	47b8      	blx	r7
 8004da4:	3001      	adds	r0, #1
 8004da6:	f43f ae9c 	beq.w	8004ae2 <_printf_float+0xb6>
 8004daa:	9a06      	ldr	r2, [sp, #24]
 8004dac:	f10b 0b01 	add.w	fp, fp, #1
 8004db0:	e7bb      	b.n	8004d2a <_printf_float+0x2fe>
 8004db2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004db6:	4631      	mov	r1, r6
 8004db8:	4628      	mov	r0, r5
 8004dba:	47b8      	blx	r7
 8004dbc:	3001      	adds	r0, #1
 8004dbe:	d1c0      	bne.n	8004d42 <_printf_float+0x316>
 8004dc0:	e68f      	b.n	8004ae2 <_printf_float+0xb6>
 8004dc2:	9a06      	ldr	r2, [sp, #24]
 8004dc4:	464b      	mov	r3, r9
 8004dc6:	4442      	add	r2, r8
 8004dc8:	4631      	mov	r1, r6
 8004dca:	4628      	mov	r0, r5
 8004dcc:	47b8      	blx	r7
 8004dce:	3001      	adds	r0, #1
 8004dd0:	d1c3      	bne.n	8004d5a <_printf_float+0x32e>
 8004dd2:	e686      	b.n	8004ae2 <_printf_float+0xb6>
 8004dd4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004dd8:	f1ba 0f01 	cmp.w	sl, #1
 8004ddc:	dc01      	bgt.n	8004de2 <_printf_float+0x3b6>
 8004dde:	07db      	lsls	r3, r3, #31
 8004de0:	d536      	bpl.n	8004e50 <_printf_float+0x424>
 8004de2:	2301      	movs	r3, #1
 8004de4:	4642      	mov	r2, r8
 8004de6:	4631      	mov	r1, r6
 8004de8:	4628      	mov	r0, r5
 8004dea:	47b8      	blx	r7
 8004dec:	3001      	adds	r0, #1
 8004dee:	f43f ae78 	beq.w	8004ae2 <_printf_float+0xb6>
 8004df2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004df6:	4631      	mov	r1, r6
 8004df8:	4628      	mov	r0, r5
 8004dfa:	47b8      	blx	r7
 8004dfc:	3001      	adds	r0, #1
 8004dfe:	f43f ae70 	beq.w	8004ae2 <_printf_float+0xb6>
 8004e02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004e06:	2200      	movs	r2, #0
 8004e08:	2300      	movs	r3, #0
 8004e0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e0e:	f7fb fe5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e12:	b9c0      	cbnz	r0, 8004e46 <_printf_float+0x41a>
 8004e14:	4653      	mov	r3, sl
 8004e16:	f108 0201 	add.w	r2, r8, #1
 8004e1a:	4631      	mov	r1, r6
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	47b8      	blx	r7
 8004e20:	3001      	adds	r0, #1
 8004e22:	d10c      	bne.n	8004e3e <_printf_float+0x412>
 8004e24:	e65d      	b.n	8004ae2 <_printf_float+0xb6>
 8004e26:	2301      	movs	r3, #1
 8004e28:	465a      	mov	r2, fp
 8004e2a:	4631      	mov	r1, r6
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	47b8      	blx	r7
 8004e30:	3001      	adds	r0, #1
 8004e32:	f43f ae56 	beq.w	8004ae2 <_printf_float+0xb6>
 8004e36:	f108 0801 	add.w	r8, r8, #1
 8004e3a:	45d0      	cmp	r8, sl
 8004e3c:	dbf3      	blt.n	8004e26 <_printf_float+0x3fa>
 8004e3e:	464b      	mov	r3, r9
 8004e40:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004e44:	e6df      	b.n	8004c06 <_printf_float+0x1da>
 8004e46:	f04f 0800 	mov.w	r8, #0
 8004e4a:	f104 0b1a 	add.w	fp, r4, #26
 8004e4e:	e7f4      	b.n	8004e3a <_printf_float+0x40e>
 8004e50:	2301      	movs	r3, #1
 8004e52:	4642      	mov	r2, r8
 8004e54:	e7e1      	b.n	8004e1a <_printf_float+0x3ee>
 8004e56:	2301      	movs	r3, #1
 8004e58:	464a      	mov	r2, r9
 8004e5a:	4631      	mov	r1, r6
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	47b8      	blx	r7
 8004e60:	3001      	adds	r0, #1
 8004e62:	f43f ae3e 	beq.w	8004ae2 <_printf_float+0xb6>
 8004e66:	f108 0801 	add.w	r8, r8, #1
 8004e6a:	68e3      	ldr	r3, [r4, #12]
 8004e6c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004e6e:	1a5b      	subs	r3, r3, r1
 8004e70:	4543      	cmp	r3, r8
 8004e72:	dcf0      	bgt.n	8004e56 <_printf_float+0x42a>
 8004e74:	e6fc      	b.n	8004c70 <_printf_float+0x244>
 8004e76:	f04f 0800 	mov.w	r8, #0
 8004e7a:	f104 0919 	add.w	r9, r4, #25
 8004e7e:	e7f4      	b.n	8004e6a <_printf_float+0x43e>

08004e80 <_printf_common>:
 8004e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e84:	4616      	mov	r6, r2
 8004e86:	4698      	mov	r8, r3
 8004e88:	688a      	ldr	r2, [r1, #8]
 8004e8a:	690b      	ldr	r3, [r1, #16]
 8004e8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e90:	4293      	cmp	r3, r2
 8004e92:	bfb8      	it	lt
 8004e94:	4613      	movlt	r3, r2
 8004e96:	6033      	str	r3, [r6, #0]
 8004e98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e9c:	4607      	mov	r7, r0
 8004e9e:	460c      	mov	r4, r1
 8004ea0:	b10a      	cbz	r2, 8004ea6 <_printf_common+0x26>
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	6033      	str	r3, [r6, #0]
 8004ea6:	6823      	ldr	r3, [r4, #0]
 8004ea8:	0699      	lsls	r1, r3, #26
 8004eaa:	bf42      	ittt	mi
 8004eac:	6833      	ldrmi	r3, [r6, #0]
 8004eae:	3302      	addmi	r3, #2
 8004eb0:	6033      	strmi	r3, [r6, #0]
 8004eb2:	6825      	ldr	r5, [r4, #0]
 8004eb4:	f015 0506 	ands.w	r5, r5, #6
 8004eb8:	d106      	bne.n	8004ec8 <_printf_common+0x48>
 8004eba:	f104 0a19 	add.w	sl, r4, #25
 8004ebe:	68e3      	ldr	r3, [r4, #12]
 8004ec0:	6832      	ldr	r2, [r6, #0]
 8004ec2:	1a9b      	subs	r3, r3, r2
 8004ec4:	42ab      	cmp	r3, r5
 8004ec6:	dc26      	bgt.n	8004f16 <_printf_common+0x96>
 8004ec8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ecc:	6822      	ldr	r2, [r4, #0]
 8004ece:	3b00      	subs	r3, #0
 8004ed0:	bf18      	it	ne
 8004ed2:	2301      	movne	r3, #1
 8004ed4:	0692      	lsls	r2, r2, #26
 8004ed6:	d42b      	bmi.n	8004f30 <_printf_common+0xb0>
 8004ed8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004edc:	4641      	mov	r1, r8
 8004ede:	4638      	mov	r0, r7
 8004ee0:	47c8      	blx	r9
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	d01e      	beq.n	8004f24 <_printf_common+0xa4>
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	6922      	ldr	r2, [r4, #16]
 8004eea:	f003 0306 	and.w	r3, r3, #6
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	bf02      	ittt	eq
 8004ef2:	68e5      	ldreq	r5, [r4, #12]
 8004ef4:	6833      	ldreq	r3, [r6, #0]
 8004ef6:	1aed      	subeq	r5, r5, r3
 8004ef8:	68a3      	ldr	r3, [r4, #8]
 8004efa:	bf0c      	ite	eq
 8004efc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f00:	2500      	movne	r5, #0
 8004f02:	4293      	cmp	r3, r2
 8004f04:	bfc4      	itt	gt
 8004f06:	1a9b      	subgt	r3, r3, r2
 8004f08:	18ed      	addgt	r5, r5, r3
 8004f0a:	2600      	movs	r6, #0
 8004f0c:	341a      	adds	r4, #26
 8004f0e:	42b5      	cmp	r5, r6
 8004f10:	d11a      	bne.n	8004f48 <_printf_common+0xc8>
 8004f12:	2000      	movs	r0, #0
 8004f14:	e008      	b.n	8004f28 <_printf_common+0xa8>
 8004f16:	2301      	movs	r3, #1
 8004f18:	4652      	mov	r2, sl
 8004f1a:	4641      	mov	r1, r8
 8004f1c:	4638      	mov	r0, r7
 8004f1e:	47c8      	blx	r9
 8004f20:	3001      	adds	r0, #1
 8004f22:	d103      	bne.n	8004f2c <_printf_common+0xac>
 8004f24:	f04f 30ff 	mov.w	r0, #4294967295
 8004f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f2c:	3501      	adds	r5, #1
 8004f2e:	e7c6      	b.n	8004ebe <_printf_common+0x3e>
 8004f30:	18e1      	adds	r1, r4, r3
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	2030      	movs	r0, #48	@ 0x30
 8004f36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f3a:	4422      	add	r2, r4
 8004f3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f44:	3302      	adds	r3, #2
 8004f46:	e7c7      	b.n	8004ed8 <_printf_common+0x58>
 8004f48:	2301      	movs	r3, #1
 8004f4a:	4622      	mov	r2, r4
 8004f4c:	4641      	mov	r1, r8
 8004f4e:	4638      	mov	r0, r7
 8004f50:	47c8      	blx	r9
 8004f52:	3001      	adds	r0, #1
 8004f54:	d0e6      	beq.n	8004f24 <_printf_common+0xa4>
 8004f56:	3601      	adds	r6, #1
 8004f58:	e7d9      	b.n	8004f0e <_printf_common+0x8e>
	...

08004f5c <_printf_i>:
 8004f5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f60:	7e0f      	ldrb	r7, [r1, #24]
 8004f62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f64:	2f78      	cmp	r7, #120	@ 0x78
 8004f66:	4691      	mov	r9, r2
 8004f68:	4680      	mov	r8, r0
 8004f6a:	460c      	mov	r4, r1
 8004f6c:	469a      	mov	sl, r3
 8004f6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f72:	d807      	bhi.n	8004f84 <_printf_i+0x28>
 8004f74:	2f62      	cmp	r7, #98	@ 0x62
 8004f76:	d80a      	bhi.n	8004f8e <_printf_i+0x32>
 8004f78:	2f00      	cmp	r7, #0
 8004f7a:	f000 80d2 	beq.w	8005122 <_printf_i+0x1c6>
 8004f7e:	2f58      	cmp	r7, #88	@ 0x58
 8004f80:	f000 80b9 	beq.w	80050f6 <_printf_i+0x19a>
 8004f84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f8c:	e03a      	b.n	8005004 <_printf_i+0xa8>
 8004f8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f92:	2b15      	cmp	r3, #21
 8004f94:	d8f6      	bhi.n	8004f84 <_printf_i+0x28>
 8004f96:	a101      	add	r1, pc, #4	@ (adr r1, 8004f9c <_printf_i+0x40>)
 8004f98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f9c:	08004ff5 	.word	0x08004ff5
 8004fa0:	08005009 	.word	0x08005009
 8004fa4:	08004f85 	.word	0x08004f85
 8004fa8:	08004f85 	.word	0x08004f85
 8004fac:	08004f85 	.word	0x08004f85
 8004fb0:	08004f85 	.word	0x08004f85
 8004fb4:	08005009 	.word	0x08005009
 8004fb8:	08004f85 	.word	0x08004f85
 8004fbc:	08004f85 	.word	0x08004f85
 8004fc0:	08004f85 	.word	0x08004f85
 8004fc4:	08004f85 	.word	0x08004f85
 8004fc8:	08005109 	.word	0x08005109
 8004fcc:	08005033 	.word	0x08005033
 8004fd0:	080050c3 	.word	0x080050c3
 8004fd4:	08004f85 	.word	0x08004f85
 8004fd8:	08004f85 	.word	0x08004f85
 8004fdc:	0800512b 	.word	0x0800512b
 8004fe0:	08004f85 	.word	0x08004f85
 8004fe4:	08005033 	.word	0x08005033
 8004fe8:	08004f85 	.word	0x08004f85
 8004fec:	08004f85 	.word	0x08004f85
 8004ff0:	080050cb 	.word	0x080050cb
 8004ff4:	6833      	ldr	r3, [r6, #0]
 8004ff6:	1d1a      	adds	r2, r3, #4
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6032      	str	r2, [r6, #0]
 8004ffc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005000:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005004:	2301      	movs	r3, #1
 8005006:	e09d      	b.n	8005144 <_printf_i+0x1e8>
 8005008:	6833      	ldr	r3, [r6, #0]
 800500a:	6820      	ldr	r0, [r4, #0]
 800500c:	1d19      	adds	r1, r3, #4
 800500e:	6031      	str	r1, [r6, #0]
 8005010:	0606      	lsls	r6, r0, #24
 8005012:	d501      	bpl.n	8005018 <_printf_i+0xbc>
 8005014:	681d      	ldr	r5, [r3, #0]
 8005016:	e003      	b.n	8005020 <_printf_i+0xc4>
 8005018:	0645      	lsls	r5, r0, #25
 800501a:	d5fb      	bpl.n	8005014 <_printf_i+0xb8>
 800501c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005020:	2d00      	cmp	r5, #0
 8005022:	da03      	bge.n	800502c <_printf_i+0xd0>
 8005024:	232d      	movs	r3, #45	@ 0x2d
 8005026:	426d      	negs	r5, r5
 8005028:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800502c:	4859      	ldr	r0, [pc, #356]	@ (8005194 <_printf_i+0x238>)
 800502e:	230a      	movs	r3, #10
 8005030:	e011      	b.n	8005056 <_printf_i+0xfa>
 8005032:	6821      	ldr	r1, [r4, #0]
 8005034:	6833      	ldr	r3, [r6, #0]
 8005036:	0608      	lsls	r0, r1, #24
 8005038:	f853 5b04 	ldr.w	r5, [r3], #4
 800503c:	d402      	bmi.n	8005044 <_printf_i+0xe8>
 800503e:	0649      	lsls	r1, r1, #25
 8005040:	bf48      	it	mi
 8005042:	b2ad      	uxthmi	r5, r5
 8005044:	2f6f      	cmp	r7, #111	@ 0x6f
 8005046:	4853      	ldr	r0, [pc, #332]	@ (8005194 <_printf_i+0x238>)
 8005048:	6033      	str	r3, [r6, #0]
 800504a:	bf14      	ite	ne
 800504c:	230a      	movne	r3, #10
 800504e:	2308      	moveq	r3, #8
 8005050:	2100      	movs	r1, #0
 8005052:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005056:	6866      	ldr	r6, [r4, #4]
 8005058:	60a6      	str	r6, [r4, #8]
 800505a:	2e00      	cmp	r6, #0
 800505c:	bfa2      	ittt	ge
 800505e:	6821      	ldrge	r1, [r4, #0]
 8005060:	f021 0104 	bicge.w	r1, r1, #4
 8005064:	6021      	strge	r1, [r4, #0]
 8005066:	b90d      	cbnz	r5, 800506c <_printf_i+0x110>
 8005068:	2e00      	cmp	r6, #0
 800506a:	d04b      	beq.n	8005104 <_printf_i+0x1a8>
 800506c:	4616      	mov	r6, r2
 800506e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005072:	fb03 5711 	mls	r7, r3, r1, r5
 8005076:	5dc7      	ldrb	r7, [r0, r7]
 8005078:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800507c:	462f      	mov	r7, r5
 800507e:	42bb      	cmp	r3, r7
 8005080:	460d      	mov	r5, r1
 8005082:	d9f4      	bls.n	800506e <_printf_i+0x112>
 8005084:	2b08      	cmp	r3, #8
 8005086:	d10b      	bne.n	80050a0 <_printf_i+0x144>
 8005088:	6823      	ldr	r3, [r4, #0]
 800508a:	07df      	lsls	r7, r3, #31
 800508c:	d508      	bpl.n	80050a0 <_printf_i+0x144>
 800508e:	6923      	ldr	r3, [r4, #16]
 8005090:	6861      	ldr	r1, [r4, #4]
 8005092:	4299      	cmp	r1, r3
 8005094:	bfde      	ittt	le
 8005096:	2330      	movle	r3, #48	@ 0x30
 8005098:	f806 3c01 	strble.w	r3, [r6, #-1]
 800509c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050a0:	1b92      	subs	r2, r2, r6
 80050a2:	6122      	str	r2, [r4, #16]
 80050a4:	f8cd a000 	str.w	sl, [sp]
 80050a8:	464b      	mov	r3, r9
 80050aa:	aa03      	add	r2, sp, #12
 80050ac:	4621      	mov	r1, r4
 80050ae:	4640      	mov	r0, r8
 80050b0:	f7ff fee6 	bl	8004e80 <_printf_common>
 80050b4:	3001      	adds	r0, #1
 80050b6:	d14a      	bne.n	800514e <_printf_i+0x1f2>
 80050b8:	f04f 30ff 	mov.w	r0, #4294967295
 80050bc:	b004      	add	sp, #16
 80050be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050c2:	6823      	ldr	r3, [r4, #0]
 80050c4:	f043 0320 	orr.w	r3, r3, #32
 80050c8:	6023      	str	r3, [r4, #0]
 80050ca:	4833      	ldr	r0, [pc, #204]	@ (8005198 <_printf_i+0x23c>)
 80050cc:	2778      	movs	r7, #120	@ 0x78
 80050ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	6831      	ldr	r1, [r6, #0]
 80050d6:	061f      	lsls	r7, r3, #24
 80050d8:	f851 5b04 	ldr.w	r5, [r1], #4
 80050dc:	d402      	bmi.n	80050e4 <_printf_i+0x188>
 80050de:	065f      	lsls	r7, r3, #25
 80050e0:	bf48      	it	mi
 80050e2:	b2ad      	uxthmi	r5, r5
 80050e4:	6031      	str	r1, [r6, #0]
 80050e6:	07d9      	lsls	r1, r3, #31
 80050e8:	bf44      	itt	mi
 80050ea:	f043 0320 	orrmi.w	r3, r3, #32
 80050ee:	6023      	strmi	r3, [r4, #0]
 80050f0:	b11d      	cbz	r5, 80050fa <_printf_i+0x19e>
 80050f2:	2310      	movs	r3, #16
 80050f4:	e7ac      	b.n	8005050 <_printf_i+0xf4>
 80050f6:	4827      	ldr	r0, [pc, #156]	@ (8005194 <_printf_i+0x238>)
 80050f8:	e7e9      	b.n	80050ce <_printf_i+0x172>
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	f023 0320 	bic.w	r3, r3, #32
 8005100:	6023      	str	r3, [r4, #0]
 8005102:	e7f6      	b.n	80050f2 <_printf_i+0x196>
 8005104:	4616      	mov	r6, r2
 8005106:	e7bd      	b.n	8005084 <_printf_i+0x128>
 8005108:	6833      	ldr	r3, [r6, #0]
 800510a:	6825      	ldr	r5, [r4, #0]
 800510c:	6961      	ldr	r1, [r4, #20]
 800510e:	1d18      	adds	r0, r3, #4
 8005110:	6030      	str	r0, [r6, #0]
 8005112:	062e      	lsls	r6, r5, #24
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	d501      	bpl.n	800511c <_printf_i+0x1c0>
 8005118:	6019      	str	r1, [r3, #0]
 800511a:	e002      	b.n	8005122 <_printf_i+0x1c6>
 800511c:	0668      	lsls	r0, r5, #25
 800511e:	d5fb      	bpl.n	8005118 <_printf_i+0x1bc>
 8005120:	8019      	strh	r1, [r3, #0]
 8005122:	2300      	movs	r3, #0
 8005124:	6123      	str	r3, [r4, #16]
 8005126:	4616      	mov	r6, r2
 8005128:	e7bc      	b.n	80050a4 <_printf_i+0x148>
 800512a:	6833      	ldr	r3, [r6, #0]
 800512c:	1d1a      	adds	r2, r3, #4
 800512e:	6032      	str	r2, [r6, #0]
 8005130:	681e      	ldr	r6, [r3, #0]
 8005132:	6862      	ldr	r2, [r4, #4]
 8005134:	2100      	movs	r1, #0
 8005136:	4630      	mov	r0, r6
 8005138:	f7fb f84a 	bl	80001d0 <memchr>
 800513c:	b108      	cbz	r0, 8005142 <_printf_i+0x1e6>
 800513e:	1b80      	subs	r0, r0, r6
 8005140:	6060      	str	r0, [r4, #4]
 8005142:	6863      	ldr	r3, [r4, #4]
 8005144:	6123      	str	r3, [r4, #16]
 8005146:	2300      	movs	r3, #0
 8005148:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800514c:	e7aa      	b.n	80050a4 <_printf_i+0x148>
 800514e:	6923      	ldr	r3, [r4, #16]
 8005150:	4632      	mov	r2, r6
 8005152:	4649      	mov	r1, r9
 8005154:	4640      	mov	r0, r8
 8005156:	47d0      	blx	sl
 8005158:	3001      	adds	r0, #1
 800515a:	d0ad      	beq.n	80050b8 <_printf_i+0x15c>
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	079b      	lsls	r3, r3, #30
 8005160:	d413      	bmi.n	800518a <_printf_i+0x22e>
 8005162:	68e0      	ldr	r0, [r4, #12]
 8005164:	9b03      	ldr	r3, [sp, #12]
 8005166:	4298      	cmp	r0, r3
 8005168:	bfb8      	it	lt
 800516a:	4618      	movlt	r0, r3
 800516c:	e7a6      	b.n	80050bc <_printf_i+0x160>
 800516e:	2301      	movs	r3, #1
 8005170:	4632      	mov	r2, r6
 8005172:	4649      	mov	r1, r9
 8005174:	4640      	mov	r0, r8
 8005176:	47d0      	blx	sl
 8005178:	3001      	adds	r0, #1
 800517a:	d09d      	beq.n	80050b8 <_printf_i+0x15c>
 800517c:	3501      	adds	r5, #1
 800517e:	68e3      	ldr	r3, [r4, #12]
 8005180:	9903      	ldr	r1, [sp, #12]
 8005182:	1a5b      	subs	r3, r3, r1
 8005184:	42ab      	cmp	r3, r5
 8005186:	dcf2      	bgt.n	800516e <_printf_i+0x212>
 8005188:	e7eb      	b.n	8005162 <_printf_i+0x206>
 800518a:	2500      	movs	r5, #0
 800518c:	f104 0619 	add.w	r6, r4, #25
 8005190:	e7f5      	b.n	800517e <_printf_i+0x222>
 8005192:	bf00      	nop
 8005194:	08007276 	.word	0x08007276
 8005198:	08007287 	.word	0x08007287

0800519c <std>:
 800519c:	2300      	movs	r3, #0
 800519e:	b510      	push	{r4, lr}
 80051a0:	4604      	mov	r4, r0
 80051a2:	e9c0 3300 	strd	r3, r3, [r0]
 80051a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051aa:	6083      	str	r3, [r0, #8]
 80051ac:	8181      	strh	r1, [r0, #12]
 80051ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80051b0:	81c2      	strh	r2, [r0, #14]
 80051b2:	6183      	str	r3, [r0, #24]
 80051b4:	4619      	mov	r1, r3
 80051b6:	2208      	movs	r2, #8
 80051b8:	305c      	adds	r0, #92	@ 0x5c
 80051ba:	f000 f906 	bl	80053ca <memset>
 80051be:	4b0d      	ldr	r3, [pc, #52]	@ (80051f4 <std+0x58>)
 80051c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80051c2:	4b0d      	ldr	r3, [pc, #52]	@ (80051f8 <std+0x5c>)
 80051c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80051c6:	4b0d      	ldr	r3, [pc, #52]	@ (80051fc <std+0x60>)
 80051c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80051ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005200 <std+0x64>)
 80051cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80051ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005204 <std+0x68>)
 80051d0:	6224      	str	r4, [r4, #32]
 80051d2:	429c      	cmp	r4, r3
 80051d4:	d006      	beq.n	80051e4 <std+0x48>
 80051d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80051da:	4294      	cmp	r4, r2
 80051dc:	d002      	beq.n	80051e4 <std+0x48>
 80051de:	33d0      	adds	r3, #208	@ 0xd0
 80051e0:	429c      	cmp	r4, r3
 80051e2:	d105      	bne.n	80051f0 <std+0x54>
 80051e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80051e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051ec:	f000 b96a 	b.w	80054c4 <__retarget_lock_init_recursive>
 80051f0:	bd10      	pop	{r4, pc}
 80051f2:	bf00      	nop
 80051f4:	08005345 	.word	0x08005345
 80051f8:	08005367 	.word	0x08005367
 80051fc:	0800539f 	.word	0x0800539f
 8005200:	080053c3 	.word	0x080053c3
 8005204:	200009f4 	.word	0x200009f4

08005208 <stdio_exit_handler>:
 8005208:	4a02      	ldr	r2, [pc, #8]	@ (8005214 <stdio_exit_handler+0xc>)
 800520a:	4903      	ldr	r1, [pc, #12]	@ (8005218 <stdio_exit_handler+0x10>)
 800520c:	4803      	ldr	r0, [pc, #12]	@ (800521c <stdio_exit_handler+0x14>)
 800520e:	f000 b869 	b.w	80052e4 <_fwalk_sglue>
 8005212:	bf00      	nop
 8005214:	20000010 	.word	0x20000010
 8005218:	08006e11 	.word	0x08006e11
 800521c:	20000020 	.word	0x20000020

08005220 <cleanup_stdio>:
 8005220:	6841      	ldr	r1, [r0, #4]
 8005222:	4b0c      	ldr	r3, [pc, #48]	@ (8005254 <cleanup_stdio+0x34>)
 8005224:	4299      	cmp	r1, r3
 8005226:	b510      	push	{r4, lr}
 8005228:	4604      	mov	r4, r0
 800522a:	d001      	beq.n	8005230 <cleanup_stdio+0x10>
 800522c:	f001 fdf0 	bl	8006e10 <_fflush_r>
 8005230:	68a1      	ldr	r1, [r4, #8]
 8005232:	4b09      	ldr	r3, [pc, #36]	@ (8005258 <cleanup_stdio+0x38>)
 8005234:	4299      	cmp	r1, r3
 8005236:	d002      	beq.n	800523e <cleanup_stdio+0x1e>
 8005238:	4620      	mov	r0, r4
 800523a:	f001 fde9 	bl	8006e10 <_fflush_r>
 800523e:	68e1      	ldr	r1, [r4, #12]
 8005240:	4b06      	ldr	r3, [pc, #24]	@ (800525c <cleanup_stdio+0x3c>)
 8005242:	4299      	cmp	r1, r3
 8005244:	d004      	beq.n	8005250 <cleanup_stdio+0x30>
 8005246:	4620      	mov	r0, r4
 8005248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800524c:	f001 bde0 	b.w	8006e10 <_fflush_r>
 8005250:	bd10      	pop	{r4, pc}
 8005252:	bf00      	nop
 8005254:	200009f4 	.word	0x200009f4
 8005258:	20000a5c 	.word	0x20000a5c
 800525c:	20000ac4 	.word	0x20000ac4

08005260 <global_stdio_init.part.0>:
 8005260:	b510      	push	{r4, lr}
 8005262:	4b0b      	ldr	r3, [pc, #44]	@ (8005290 <global_stdio_init.part.0+0x30>)
 8005264:	4c0b      	ldr	r4, [pc, #44]	@ (8005294 <global_stdio_init.part.0+0x34>)
 8005266:	4a0c      	ldr	r2, [pc, #48]	@ (8005298 <global_stdio_init.part.0+0x38>)
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	4620      	mov	r0, r4
 800526c:	2200      	movs	r2, #0
 800526e:	2104      	movs	r1, #4
 8005270:	f7ff ff94 	bl	800519c <std>
 8005274:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005278:	2201      	movs	r2, #1
 800527a:	2109      	movs	r1, #9
 800527c:	f7ff ff8e 	bl	800519c <std>
 8005280:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005284:	2202      	movs	r2, #2
 8005286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800528a:	2112      	movs	r1, #18
 800528c:	f7ff bf86 	b.w	800519c <std>
 8005290:	20000b2c 	.word	0x20000b2c
 8005294:	200009f4 	.word	0x200009f4
 8005298:	08005209 	.word	0x08005209

0800529c <__sfp_lock_acquire>:
 800529c:	4801      	ldr	r0, [pc, #4]	@ (80052a4 <__sfp_lock_acquire+0x8>)
 800529e:	f000 b912 	b.w	80054c6 <__retarget_lock_acquire_recursive>
 80052a2:	bf00      	nop
 80052a4:	20000b35 	.word	0x20000b35

080052a8 <__sfp_lock_release>:
 80052a8:	4801      	ldr	r0, [pc, #4]	@ (80052b0 <__sfp_lock_release+0x8>)
 80052aa:	f000 b90d 	b.w	80054c8 <__retarget_lock_release_recursive>
 80052ae:	bf00      	nop
 80052b0:	20000b35 	.word	0x20000b35

080052b4 <__sinit>:
 80052b4:	b510      	push	{r4, lr}
 80052b6:	4604      	mov	r4, r0
 80052b8:	f7ff fff0 	bl	800529c <__sfp_lock_acquire>
 80052bc:	6a23      	ldr	r3, [r4, #32]
 80052be:	b11b      	cbz	r3, 80052c8 <__sinit+0x14>
 80052c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052c4:	f7ff bff0 	b.w	80052a8 <__sfp_lock_release>
 80052c8:	4b04      	ldr	r3, [pc, #16]	@ (80052dc <__sinit+0x28>)
 80052ca:	6223      	str	r3, [r4, #32]
 80052cc:	4b04      	ldr	r3, [pc, #16]	@ (80052e0 <__sinit+0x2c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1f5      	bne.n	80052c0 <__sinit+0xc>
 80052d4:	f7ff ffc4 	bl	8005260 <global_stdio_init.part.0>
 80052d8:	e7f2      	b.n	80052c0 <__sinit+0xc>
 80052da:	bf00      	nop
 80052dc:	08005221 	.word	0x08005221
 80052e0:	20000b2c 	.word	0x20000b2c

080052e4 <_fwalk_sglue>:
 80052e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052e8:	4607      	mov	r7, r0
 80052ea:	4688      	mov	r8, r1
 80052ec:	4614      	mov	r4, r2
 80052ee:	2600      	movs	r6, #0
 80052f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052f4:	f1b9 0901 	subs.w	r9, r9, #1
 80052f8:	d505      	bpl.n	8005306 <_fwalk_sglue+0x22>
 80052fa:	6824      	ldr	r4, [r4, #0]
 80052fc:	2c00      	cmp	r4, #0
 80052fe:	d1f7      	bne.n	80052f0 <_fwalk_sglue+0xc>
 8005300:	4630      	mov	r0, r6
 8005302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005306:	89ab      	ldrh	r3, [r5, #12]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d907      	bls.n	800531c <_fwalk_sglue+0x38>
 800530c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005310:	3301      	adds	r3, #1
 8005312:	d003      	beq.n	800531c <_fwalk_sglue+0x38>
 8005314:	4629      	mov	r1, r5
 8005316:	4638      	mov	r0, r7
 8005318:	47c0      	blx	r8
 800531a:	4306      	orrs	r6, r0
 800531c:	3568      	adds	r5, #104	@ 0x68
 800531e:	e7e9      	b.n	80052f4 <_fwalk_sglue+0x10>

08005320 <iprintf>:
 8005320:	b40f      	push	{r0, r1, r2, r3}
 8005322:	b507      	push	{r0, r1, r2, lr}
 8005324:	4906      	ldr	r1, [pc, #24]	@ (8005340 <iprintf+0x20>)
 8005326:	ab04      	add	r3, sp, #16
 8005328:	6808      	ldr	r0, [r1, #0]
 800532a:	f853 2b04 	ldr.w	r2, [r3], #4
 800532e:	6881      	ldr	r1, [r0, #8]
 8005330:	9301      	str	r3, [sp, #4]
 8005332:	f001 fbd1 	bl	8006ad8 <_vfiprintf_r>
 8005336:	b003      	add	sp, #12
 8005338:	f85d eb04 	ldr.w	lr, [sp], #4
 800533c:	b004      	add	sp, #16
 800533e:	4770      	bx	lr
 8005340:	2000001c 	.word	0x2000001c

08005344 <__sread>:
 8005344:	b510      	push	{r4, lr}
 8005346:	460c      	mov	r4, r1
 8005348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800534c:	f000 f86c 	bl	8005428 <_read_r>
 8005350:	2800      	cmp	r0, #0
 8005352:	bfab      	itete	ge
 8005354:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005356:	89a3      	ldrhlt	r3, [r4, #12]
 8005358:	181b      	addge	r3, r3, r0
 800535a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800535e:	bfac      	ite	ge
 8005360:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005362:	81a3      	strhlt	r3, [r4, #12]
 8005364:	bd10      	pop	{r4, pc}

08005366 <__swrite>:
 8005366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800536a:	461f      	mov	r7, r3
 800536c:	898b      	ldrh	r3, [r1, #12]
 800536e:	05db      	lsls	r3, r3, #23
 8005370:	4605      	mov	r5, r0
 8005372:	460c      	mov	r4, r1
 8005374:	4616      	mov	r6, r2
 8005376:	d505      	bpl.n	8005384 <__swrite+0x1e>
 8005378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800537c:	2302      	movs	r3, #2
 800537e:	2200      	movs	r2, #0
 8005380:	f000 f840 	bl	8005404 <_lseek_r>
 8005384:	89a3      	ldrh	r3, [r4, #12]
 8005386:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800538a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800538e:	81a3      	strh	r3, [r4, #12]
 8005390:	4632      	mov	r2, r6
 8005392:	463b      	mov	r3, r7
 8005394:	4628      	mov	r0, r5
 8005396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800539a:	f000 b857 	b.w	800544c <_write_r>

0800539e <__sseek>:
 800539e:	b510      	push	{r4, lr}
 80053a0:	460c      	mov	r4, r1
 80053a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053a6:	f000 f82d 	bl	8005404 <_lseek_r>
 80053aa:	1c43      	adds	r3, r0, #1
 80053ac:	89a3      	ldrh	r3, [r4, #12]
 80053ae:	bf15      	itete	ne
 80053b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80053b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80053b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80053ba:	81a3      	strheq	r3, [r4, #12]
 80053bc:	bf18      	it	ne
 80053be:	81a3      	strhne	r3, [r4, #12]
 80053c0:	bd10      	pop	{r4, pc}

080053c2 <__sclose>:
 80053c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053c6:	f000 b80d 	b.w	80053e4 <_close_r>

080053ca <memset>:
 80053ca:	4402      	add	r2, r0
 80053cc:	4603      	mov	r3, r0
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d100      	bne.n	80053d4 <memset+0xa>
 80053d2:	4770      	bx	lr
 80053d4:	f803 1b01 	strb.w	r1, [r3], #1
 80053d8:	e7f9      	b.n	80053ce <memset+0x4>
	...

080053dc <_localeconv_r>:
 80053dc:	4800      	ldr	r0, [pc, #0]	@ (80053e0 <_localeconv_r+0x4>)
 80053de:	4770      	bx	lr
 80053e0:	2000015c 	.word	0x2000015c

080053e4 <_close_r>:
 80053e4:	b538      	push	{r3, r4, r5, lr}
 80053e6:	4d06      	ldr	r5, [pc, #24]	@ (8005400 <_close_r+0x1c>)
 80053e8:	2300      	movs	r3, #0
 80053ea:	4604      	mov	r4, r0
 80053ec:	4608      	mov	r0, r1
 80053ee:	602b      	str	r3, [r5, #0]
 80053f0:	f7fc f961 	bl	80016b6 <_close>
 80053f4:	1c43      	adds	r3, r0, #1
 80053f6:	d102      	bne.n	80053fe <_close_r+0x1a>
 80053f8:	682b      	ldr	r3, [r5, #0]
 80053fa:	b103      	cbz	r3, 80053fe <_close_r+0x1a>
 80053fc:	6023      	str	r3, [r4, #0]
 80053fe:	bd38      	pop	{r3, r4, r5, pc}
 8005400:	20000b30 	.word	0x20000b30

08005404 <_lseek_r>:
 8005404:	b538      	push	{r3, r4, r5, lr}
 8005406:	4d07      	ldr	r5, [pc, #28]	@ (8005424 <_lseek_r+0x20>)
 8005408:	4604      	mov	r4, r0
 800540a:	4608      	mov	r0, r1
 800540c:	4611      	mov	r1, r2
 800540e:	2200      	movs	r2, #0
 8005410:	602a      	str	r2, [r5, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	f7fc f976 	bl	8001704 <_lseek>
 8005418:	1c43      	adds	r3, r0, #1
 800541a:	d102      	bne.n	8005422 <_lseek_r+0x1e>
 800541c:	682b      	ldr	r3, [r5, #0]
 800541e:	b103      	cbz	r3, 8005422 <_lseek_r+0x1e>
 8005420:	6023      	str	r3, [r4, #0]
 8005422:	bd38      	pop	{r3, r4, r5, pc}
 8005424:	20000b30 	.word	0x20000b30

08005428 <_read_r>:
 8005428:	b538      	push	{r3, r4, r5, lr}
 800542a:	4d07      	ldr	r5, [pc, #28]	@ (8005448 <_read_r+0x20>)
 800542c:	4604      	mov	r4, r0
 800542e:	4608      	mov	r0, r1
 8005430:	4611      	mov	r1, r2
 8005432:	2200      	movs	r2, #0
 8005434:	602a      	str	r2, [r5, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	f7fc f904 	bl	8001644 <_read>
 800543c:	1c43      	adds	r3, r0, #1
 800543e:	d102      	bne.n	8005446 <_read_r+0x1e>
 8005440:	682b      	ldr	r3, [r5, #0]
 8005442:	b103      	cbz	r3, 8005446 <_read_r+0x1e>
 8005444:	6023      	str	r3, [r4, #0]
 8005446:	bd38      	pop	{r3, r4, r5, pc}
 8005448:	20000b30 	.word	0x20000b30

0800544c <_write_r>:
 800544c:	b538      	push	{r3, r4, r5, lr}
 800544e:	4d07      	ldr	r5, [pc, #28]	@ (800546c <_write_r+0x20>)
 8005450:	4604      	mov	r4, r0
 8005452:	4608      	mov	r0, r1
 8005454:	4611      	mov	r1, r2
 8005456:	2200      	movs	r2, #0
 8005458:	602a      	str	r2, [r5, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	f7fc f90f 	bl	800167e <_write>
 8005460:	1c43      	adds	r3, r0, #1
 8005462:	d102      	bne.n	800546a <_write_r+0x1e>
 8005464:	682b      	ldr	r3, [r5, #0]
 8005466:	b103      	cbz	r3, 800546a <_write_r+0x1e>
 8005468:	6023      	str	r3, [r4, #0]
 800546a:	bd38      	pop	{r3, r4, r5, pc}
 800546c:	20000b30 	.word	0x20000b30

08005470 <__errno>:
 8005470:	4b01      	ldr	r3, [pc, #4]	@ (8005478 <__errno+0x8>)
 8005472:	6818      	ldr	r0, [r3, #0]
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	2000001c 	.word	0x2000001c

0800547c <__libc_init_array>:
 800547c:	b570      	push	{r4, r5, r6, lr}
 800547e:	4d0d      	ldr	r5, [pc, #52]	@ (80054b4 <__libc_init_array+0x38>)
 8005480:	4c0d      	ldr	r4, [pc, #52]	@ (80054b8 <__libc_init_array+0x3c>)
 8005482:	1b64      	subs	r4, r4, r5
 8005484:	10a4      	asrs	r4, r4, #2
 8005486:	2600      	movs	r6, #0
 8005488:	42a6      	cmp	r6, r4
 800548a:	d109      	bne.n	80054a0 <__libc_init_array+0x24>
 800548c:	4d0b      	ldr	r5, [pc, #44]	@ (80054bc <__libc_init_array+0x40>)
 800548e:	4c0c      	ldr	r4, [pc, #48]	@ (80054c0 <__libc_init_array+0x44>)
 8005490:	f001 febe 	bl	8007210 <_init>
 8005494:	1b64      	subs	r4, r4, r5
 8005496:	10a4      	asrs	r4, r4, #2
 8005498:	2600      	movs	r6, #0
 800549a:	42a6      	cmp	r6, r4
 800549c:	d105      	bne.n	80054aa <__libc_init_array+0x2e>
 800549e:	bd70      	pop	{r4, r5, r6, pc}
 80054a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80054a4:	4798      	blx	r3
 80054a6:	3601      	adds	r6, #1
 80054a8:	e7ee      	b.n	8005488 <__libc_init_array+0xc>
 80054aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ae:	4798      	blx	r3
 80054b0:	3601      	adds	r6, #1
 80054b2:	e7f2      	b.n	800549a <__libc_init_array+0x1e>
 80054b4:	080075e0 	.word	0x080075e0
 80054b8:	080075e0 	.word	0x080075e0
 80054bc:	080075e0 	.word	0x080075e0
 80054c0:	080075e4 	.word	0x080075e4

080054c4 <__retarget_lock_init_recursive>:
 80054c4:	4770      	bx	lr

080054c6 <__retarget_lock_acquire_recursive>:
 80054c6:	4770      	bx	lr

080054c8 <__retarget_lock_release_recursive>:
 80054c8:	4770      	bx	lr

080054ca <memcpy>:
 80054ca:	440a      	add	r2, r1
 80054cc:	4291      	cmp	r1, r2
 80054ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80054d2:	d100      	bne.n	80054d6 <memcpy+0xc>
 80054d4:	4770      	bx	lr
 80054d6:	b510      	push	{r4, lr}
 80054d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054e0:	4291      	cmp	r1, r2
 80054e2:	d1f9      	bne.n	80054d8 <memcpy+0xe>
 80054e4:	bd10      	pop	{r4, pc}

080054e6 <quorem>:
 80054e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ea:	6903      	ldr	r3, [r0, #16]
 80054ec:	690c      	ldr	r4, [r1, #16]
 80054ee:	42a3      	cmp	r3, r4
 80054f0:	4607      	mov	r7, r0
 80054f2:	db7e      	blt.n	80055f2 <quorem+0x10c>
 80054f4:	3c01      	subs	r4, #1
 80054f6:	f101 0814 	add.w	r8, r1, #20
 80054fa:	00a3      	lsls	r3, r4, #2
 80054fc:	f100 0514 	add.w	r5, r0, #20
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005506:	9301      	str	r3, [sp, #4]
 8005508:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800550c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005510:	3301      	adds	r3, #1
 8005512:	429a      	cmp	r2, r3
 8005514:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005518:	fbb2 f6f3 	udiv	r6, r2, r3
 800551c:	d32e      	bcc.n	800557c <quorem+0x96>
 800551e:	f04f 0a00 	mov.w	sl, #0
 8005522:	46c4      	mov	ip, r8
 8005524:	46ae      	mov	lr, r5
 8005526:	46d3      	mov	fp, sl
 8005528:	f85c 3b04 	ldr.w	r3, [ip], #4
 800552c:	b298      	uxth	r0, r3
 800552e:	fb06 a000 	mla	r0, r6, r0, sl
 8005532:	0c02      	lsrs	r2, r0, #16
 8005534:	0c1b      	lsrs	r3, r3, #16
 8005536:	fb06 2303 	mla	r3, r6, r3, r2
 800553a:	f8de 2000 	ldr.w	r2, [lr]
 800553e:	b280      	uxth	r0, r0
 8005540:	b292      	uxth	r2, r2
 8005542:	1a12      	subs	r2, r2, r0
 8005544:	445a      	add	r2, fp
 8005546:	f8de 0000 	ldr.w	r0, [lr]
 800554a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800554e:	b29b      	uxth	r3, r3
 8005550:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005554:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005558:	b292      	uxth	r2, r2
 800555a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800555e:	45e1      	cmp	r9, ip
 8005560:	f84e 2b04 	str.w	r2, [lr], #4
 8005564:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005568:	d2de      	bcs.n	8005528 <quorem+0x42>
 800556a:	9b00      	ldr	r3, [sp, #0]
 800556c:	58eb      	ldr	r3, [r5, r3]
 800556e:	b92b      	cbnz	r3, 800557c <quorem+0x96>
 8005570:	9b01      	ldr	r3, [sp, #4]
 8005572:	3b04      	subs	r3, #4
 8005574:	429d      	cmp	r5, r3
 8005576:	461a      	mov	r2, r3
 8005578:	d32f      	bcc.n	80055da <quorem+0xf4>
 800557a:	613c      	str	r4, [r7, #16]
 800557c:	4638      	mov	r0, r7
 800557e:	f001 f979 	bl	8006874 <__mcmp>
 8005582:	2800      	cmp	r0, #0
 8005584:	db25      	blt.n	80055d2 <quorem+0xec>
 8005586:	4629      	mov	r1, r5
 8005588:	2000      	movs	r0, #0
 800558a:	f858 2b04 	ldr.w	r2, [r8], #4
 800558e:	f8d1 c000 	ldr.w	ip, [r1]
 8005592:	fa1f fe82 	uxth.w	lr, r2
 8005596:	fa1f f38c 	uxth.w	r3, ip
 800559a:	eba3 030e 	sub.w	r3, r3, lr
 800559e:	4403      	add	r3, r0
 80055a0:	0c12      	lsrs	r2, r2, #16
 80055a2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80055a6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055b0:	45c1      	cmp	r9, r8
 80055b2:	f841 3b04 	str.w	r3, [r1], #4
 80055b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80055ba:	d2e6      	bcs.n	800558a <quorem+0xa4>
 80055bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055c4:	b922      	cbnz	r2, 80055d0 <quorem+0xea>
 80055c6:	3b04      	subs	r3, #4
 80055c8:	429d      	cmp	r5, r3
 80055ca:	461a      	mov	r2, r3
 80055cc:	d30b      	bcc.n	80055e6 <quorem+0x100>
 80055ce:	613c      	str	r4, [r7, #16]
 80055d0:	3601      	adds	r6, #1
 80055d2:	4630      	mov	r0, r6
 80055d4:	b003      	add	sp, #12
 80055d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055da:	6812      	ldr	r2, [r2, #0]
 80055dc:	3b04      	subs	r3, #4
 80055de:	2a00      	cmp	r2, #0
 80055e0:	d1cb      	bne.n	800557a <quorem+0x94>
 80055e2:	3c01      	subs	r4, #1
 80055e4:	e7c6      	b.n	8005574 <quorem+0x8e>
 80055e6:	6812      	ldr	r2, [r2, #0]
 80055e8:	3b04      	subs	r3, #4
 80055ea:	2a00      	cmp	r2, #0
 80055ec:	d1ef      	bne.n	80055ce <quorem+0xe8>
 80055ee:	3c01      	subs	r4, #1
 80055f0:	e7ea      	b.n	80055c8 <quorem+0xe2>
 80055f2:	2000      	movs	r0, #0
 80055f4:	e7ee      	b.n	80055d4 <quorem+0xee>
	...

080055f8 <_dtoa_r>:
 80055f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055fc:	69c7      	ldr	r7, [r0, #28]
 80055fe:	b099      	sub	sp, #100	@ 0x64
 8005600:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005604:	ec55 4b10 	vmov	r4, r5, d0
 8005608:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800560a:	9109      	str	r1, [sp, #36]	@ 0x24
 800560c:	4683      	mov	fp, r0
 800560e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005610:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005612:	b97f      	cbnz	r7, 8005634 <_dtoa_r+0x3c>
 8005614:	2010      	movs	r0, #16
 8005616:	f000 fdfd 	bl	8006214 <malloc>
 800561a:	4602      	mov	r2, r0
 800561c:	f8cb 001c 	str.w	r0, [fp, #28]
 8005620:	b920      	cbnz	r0, 800562c <_dtoa_r+0x34>
 8005622:	4ba7      	ldr	r3, [pc, #668]	@ (80058c0 <_dtoa_r+0x2c8>)
 8005624:	21ef      	movs	r1, #239	@ 0xef
 8005626:	48a7      	ldr	r0, [pc, #668]	@ (80058c4 <_dtoa_r+0x2cc>)
 8005628:	f001 fcbe 	bl	8006fa8 <__assert_func>
 800562c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005630:	6007      	str	r7, [r0, #0]
 8005632:	60c7      	str	r7, [r0, #12]
 8005634:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005638:	6819      	ldr	r1, [r3, #0]
 800563a:	b159      	cbz	r1, 8005654 <_dtoa_r+0x5c>
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	604a      	str	r2, [r1, #4]
 8005640:	2301      	movs	r3, #1
 8005642:	4093      	lsls	r3, r2
 8005644:	608b      	str	r3, [r1, #8]
 8005646:	4658      	mov	r0, fp
 8005648:	f000 feda 	bl	8006400 <_Bfree>
 800564c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005650:	2200      	movs	r2, #0
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	1e2b      	subs	r3, r5, #0
 8005656:	bfb9      	ittee	lt
 8005658:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800565c:	9303      	strlt	r3, [sp, #12]
 800565e:	2300      	movge	r3, #0
 8005660:	6033      	strge	r3, [r6, #0]
 8005662:	9f03      	ldr	r7, [sp, #12]
 8005664:	4b98      	ldr	r3, [pc, #608]	@ (80058c8 <_dtoa_r+0x2d0>)
 8005666:	bfbc      	itt	lt
 8005668:	2201      	movlt	r2, #1
 800566a:	6032      	strlt	r2, [r6, #0]
 800566c:	43bb      	bics	r3, r7
 800566e:	d112      	bne.n	8005696 <_dtoa_r+0x9e>
 8005670:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005672:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005676:	6013      	str	r3, [r2, #0]
 8005678:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800567c:	4323      	orrs	r3, r4
 800567e:	f000 854d 	beq.w	800611c <_dtoa_r+0xb24>
 8005682:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005684:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80058dc <_dtoa_r+0x2e4>
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 854f 	beq.w	800612c <_dtoa_r+0xb34>
 800568e:	f10a 0303 	add.w	r3, sl, #3
 8005692:	f000 bd49 	b.w	8006128 <_dtoa_r+0xb30>
 8005696:	ed9d 7b02 	vldr	d7, [sp, #8]
 800569a:	2200      	movs	r2, #0
 800569c:	ec51 0b17 	vmov	r0, r1, d7
 80056a0:	2300      	movs	r3, #0
 80056a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80056a6:	f7fb fa0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80056aa:	4680      	mov	r8, r0
 80056ac:	b158      	cbz	r0, 80056c6 <_dtoa_r+0xce>
 80056ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80056b0:	2301      	movs	r3, #1
 80056b2:	6013      	str	r3, [r2, #0]
 80056b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80056b6:	b113      	cbz	r3, 80056be <_dtoa_r+0xc6>
 80056b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80056ba:	4b84      	ldr	r3, [pc, #528]	@ (80058cc <_dtoa_r+0x2d4>)
 80056bc:	6013      	str	r3, [r2, #0]
 80056be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80058e0 <_dtoa_r+0x2e8>
 80056c2:	f000 bd33 	b.w	800612c <_dtoa_r+0xb34>
 80056c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80056ca:	aa16      	add	r2, sp, #88	@ 0x58
 80056cc:	a917      	add	r1, sp, #92	@ 0x5c
 80056ce:	4658      	mov	r0, fp
 80056d0:	f001 f980 	bl	80069d4 <__d2b>
 80056d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80056d8:	4681      	mov	r9, r0
 80056da:	2e00      	cmp	r6, #0
 80056dc:	d077      	beq.n	80057ce <_dtoa_r+0x1d6>
 80056de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80056e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80056ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80056f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80056f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80056f8:	4619      	mov	r1, r3
 80056fa:	2200      	movs	r2, #0
 80056fc:	4b74      	ldr	r3, [pc, #464]	@ (80058d0 <_dtoa_r+0x2d8>)
 80056fe:	f7fa fdc3 	bl	8000288 <__aeabi_dsub>
 8005702:	a369      	add	r3, pc, #420	@ (adr r3, 80058a8 <_dtoa_r+0x2b0>)
 8005704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005708:	f7fa ff76 	bl	80005f8 <__aeabi_dmul>
 800570c:	a368      	add	r3, pc, #416	@ (adr r3, 80058b0 <_dtoa_r+0x2b8>)
 800570e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005712:	f7fa fdbb 	bl	800028c <__adddf3>
 8005716:	4604      	mov	r4, r0
 8005718:	4630      	mov	r0, r6
 800571a:	460d      	mov	r5, r1
 800571c:	f7fa ff02 	bl	8000524 <__aeabi_i2d>
 8005720:	a365      	add	r3, pc, #404	@ (adr r3, 80058b8 <_dtoa_r+0x2c0>)
 8005722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005726:	f7fa ff67 	bl	80005f8 <__aeabi_dmul>
 800572a:	4602      	mov	r2, r0
 800572c:	460b      	mov	r3, r1
 800572e:	4620      	mov	r0, r4
 8005730:	4629      	mov	r1, r5
 8005732:	f7fa fdab 	bl	800028c <__adddf3>
 8005736:	4604      	mov	r4, r0
 8005738:	460d      	mov	r5, r1
 800573a:	f7fb fa0d 	bl	8000b58 <__aeabi_d2iz>
 800573e:	2200      	movs	r2, #0
 8005740:	4607      	mov	r7, r0
 8005742:	2300      	movs	r3, #0
 8005744:	4620      	mov	r0, r4
 8005746:	4629      	mov	r1, r5
 8005748:	f7fb f9c8 	bl	8000adc <__aeabi_dcmplt>
 800574c:	b140      	cbz	r0, 8005760 <_dtoa_r+0x168>
 800574e:	4638      	mov	r0, r7
 8005750:	f7fa fee8 	bl	8000524 <__aeabi_i2d>
 8005754:	4622      	mov	r2, r4
 8005756:	462b      	mov	r3, r5
 8005758:	f7fb f9b6 	bl	8000ac8 <__aeabi_dcmpeq>
 800575c:	b900      	cbnz	r0, 8005760 <_dtoa_r+0x168>
 800575e:	3f01      	subs	r7, #1
 8005760:	2f16      	cmp	r7, #22
 8005762:	d851      	bhi.n	8005808 <_dtoa_r+0x210>
 8005764:	4b5b      	ldr	r3, [pc, #364]	@ (80058d4 <_dtoa_r+0x2dc>)
 8005766:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800576a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005772:	f7fb f9b3 	bl	8000adc <__aeabi_dcmplt>
 8005776:	2800      	cmp	r0, #0
 8005778:	d048      	beq.n	800580c <_dtoa_r+0x214>
 800577a:	3f01      	subs	r7, #1
 800577c:	2300      	movs	r3, #0
 800577e:	9312      	str	r3, [sp, #72]	@ 0x48
 8005780:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005782:	1b9b      	subs	r3, r3, r6
 8005784:	1e5a      	subs	r2, r3, #1
 8005786:	bf44      	itt	mi
 8005788:	f1c3 0801 	rsbmi	r8, r3, #1
 800578c:	2300      	movmi	r3, #0
 800578e:	9208      	str	r2, [sp, #32]
 8005790:	bf54      	ite	pl
 8005792:	f04f 0800 	movpl.w	r8, #0
 8005796:	9308      	strmi	r3, [sp, #32]
 8005798:	2f00      	cmp	r7, #0
 800579a:	db39      	blt.n	8005810 <_dtoa_r+0x218>
 800579c:	9b08      	ldr	r3, [sp, #32]
 800579e:	970f      	str	r7, [sp, #60]	@ 0x3c
 80057a0:	443b      	add	r3, r7
 80057a2:	9308      	str	r3, [sp, #32]
 80057a4:	2300      	movs	r3, #0
 80057a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80057a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057aa:	2b09      	cmp	r3, #9
 80057ac:	d864      	bhi.n	8005878 <_dtoa_r+0x280>
 80057ae:	2b05      	cmp	r3, #5
 80057b0:	bfc4      	itt	gt
 80057b2:	3b04      	subgt	r3, #4
 80057b4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80057b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057b8:	f1a3 0302 	sub.w	r3, r3, #2
 80057bc:	bfcc      	ite	gt
 80057be:	2400      	movgt	r4, #0
 80057c0:	2401      	movle	r4, #1
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	d863      	bhi.n	800588e <_dtoa_r+0x296>
 80057c6:	e8df f003 	tbb	[pc, r3]
 80057ca:	372a      	.short	0x372a
 80057cc:	5535      	.short	0x5535
 80057ce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80057d2:	441e      	add	r6, r3
 80057d4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80057d8:	2b20      	cmp	r3, #32
 80057da:	bfc1      	itttt	gt
 80057dc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80057e0:	409f      	lslgt	r7, r3
 80057e2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80057e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80057ea:	bfd6      	itet	le
 80057ec:	f1c3 0320 	rsble	r3, r3, #32
 80057f0:	ea47 0003 	orrgt.w	r0, r7, r3
 80057f4:	fa04 f003 	lslle.w	r0, r4, r3
 80057f8:	f7fa fe84 	bl	8000504 <__aeabi_ui2d>
 80057fc:	2201      	movs	r2, #1
 80057fe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005802:	3e01      	subs	r6, #1
 8005804:	9214      	str	r2, [sp, #80]	@ 0x50
 8005806:	e777      	b.n	80056f8 <_dtoa_r+0x100>
 8005808:	2301      	movs	r3, #1
 800580a:	e7b8      	b.n	800577e <_dtoa_r+0x186>
 800580c:	9012      	str	r0, [sp, #72]	@ 0x48
 800580e:	e7b7      	b.n	8005780 <_dtoa_r+0x188>
 8005810:	427b      	negs	r3, r7
 8005812:	930a      	str	r3, [sp, #40]	@ 0x28
 8005814:	2300      	movs	r3, #0
 8005816:	eba8 0807 	sub.w	r8, r8, r7
 800581a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800581c:	e7c4      	b.n	80057a8 <_dtoa_r+0x1b0>
 800581e:	2300      	movs	r3, #0
 8005820:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005822:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005824:	2b00      	cmp	r3, #0
 8005826:	dc35      	bgt.n	8005894 <_dtoa_r+0x29c>
 8005828:	2301      	movs	r3, #1
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	9307      	str	r3, [sp, #28]
 800582e:	461a      	mov	r2, r3
 8005830:	920e      	str	r2, [sp, #56]	@ 0x38
 8005832:	e00b      	b.n	800584c <_dtoa_r+0x254>
 8005834:	2301      	movs	r3, #1
 8005836:	e7f3      	b.n	8005820 <_dtoa_r+0x228>
 8005838:	2300      	movs	r3, #0
 800583a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800583c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800583e:	18fb      	adds	r3, r7, r3
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	3301      	adds	r3, #1
 8005844:	2b01      	cmp	r3, #1
 8005846:	9307      	str	r3, [sp, #28]
 8005848:	bfb8      	it	lt
 800584a:	2301      	movlt	r3, #1
 800584c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005850:	2100      	movs	r1, #0
 8005852:	2204      	movs	r2, #4
 8005854:	f102 0514 	add.w	r5, r2, #20
 8005858:	429d      	cmp	r5, r3
 800585a:	d91f      	bls.n	800589c <_dtoa_r+0x2a4>
 800585c:	6041      	str	r1, [r0, #4]
 800585e:	4658      	mov	r0, fp
 8005860:	f000 fd8e 	bl	8006380 <_Balloc>
 8005864:	4682      	mov	sl, r0
 8005866:	2800      	cmp	r0, #0
 8005868:	d13c      	bne.n	80058e4 <_dtoa_r+0x2ec>
 800586a:	4b1b      	ldr	r3, [pc, #108]	@ (80058d8 <_dtoa_r+0x2e0>)
 800586c:	4602      	mov	r2, r0
 800586e:	f240 11af 	movw	r1, #431	@ 0x1af
 8005872:	e6d8      	b.n	8005626 <_dtoa_r+0x2e>
 8005874:	2301      	movs	r3, #1
 8005876:	e7e0      	b.n	800583a <_dtoa_r+0x242>
 8005878:	2401      	movs	r4, #1
 800587a:	2300      	movs	r3, #0
 800587c:	9309      	str	r3, [sp, #36]	@ 0x24
 800587e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005880:	f04f 33ff 	mov.w	r3, #4294967295
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	9307      	str	r3, [sp, #28]
 8005888:	2200      	movs	r2, #0
 800588a:	2312      	movs	r3, #18
 800588c:	e7d0      	b.n	8005830 <_dtoa_r+0x238>
 800588e:	2301      	movs	r3, #1
 8005890:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005892:	e7f5      	b.n	8005880 <_dtoa_r+0x288>
 8005894:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005896:	9300      	str	r3, [sp, #0]
 8005898:	9307      	str	r3, [sp, #28]
 800589a:	e7d7      	b.n	800584c <_dtoa_r+0x254>
 800589c:	3101      	adds	r1, #1
 800589e:	0052      	lsls	r2, r2, #1
 80058a0:	e7d8      	b.n	8005854 <_dtoa_r+0x25c>
 80058a2:	bf00      	nop
 80058a4:	f3af 8000 	nop.w
 80058a8:	636f4361 	.word	0x636f4361
 80058ac:	3fd287a7 	.word	0x3fd287a7
 80058b0:	8b60c8b3 	.word	0x8b60c8b3
 80058b4:	3fc68a28 	.word	0x3fc68a28
 80058b8:	509f79fb 	.word	0x509f79fb
 80058bc:	3fd34413 	.word	0x3fd34413
 80058c0:	080072a5 	.word	0x080072a5
 80058c4:	080072bc 	.word	0x080072bc
 80058c8:	7ff00000 	.word	0x7ff00000
 80058cc:	08007275 	.word	0x08007275
 80058d0:	3ff80000 	.word	0x3ff80000
 80058d4:	080073b8 	.word	0x080073b8
 80058d8:	08007314 	.word	0x08007314
 80058dc:	080072a1 	.word	0x080072a1
 80058e0:	08007274 	.word	0x08007274
 80058e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80058e8:	6018      	str	r0, [r3, #0]
 80058ea:	9b07      	ldr	r3, [sp, #28]
 80058ec:	2b0e      	cmp	r3, #14
 80058ee:	f200 80a4 	bhi.w	8005a3a <_dtoa_r+0x442>
 80058f2:	2c00      	cmp	r4, #0
 80058f4:	f000 80a1 	beq.w	8005a3a <_dtoa_r+0x442>
 80058f8:	2f00      	cmp	r7, #0
 80058fa:	dd33      	ble.n	8005964 <_dtoa_r+0x36c>
 80058fc:	4bad      	ldr	r3, [pc, #692]	@ (8005bb4 <_dtoa_r+0x5bc>)
 80058fe:	f007 020f 	and.w	r2, r7, #15
 8005902:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005906:	ed93 7b00 	vldr	d7, [r3]
 800590a:	05f8      	lsls	r0, r7, #23
 800590c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005910:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005914:	d516      	bpl.n	8005944 <_dtoa_r+0x34c>
 8005916:	4ba8      	ldr	r3, [pc, #672]	@ (8005bb8 <_dtoa_r+0x5c0>)
 8005918:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800591c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005920:	f7fa ff94 	bl	800084c <__aeabi_ddiv>
 8005924:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005928:	f004 040f 	and.w	r4, r4, #15
 800592c:	2603      	movs	r6, #3
 800592e:	4da2      	ldr	r5, [pc, #648]	@ (8005bb8 <_dtoa_r+0x5c0>)
 8005930:	b954      	cbnz	r4, 8005948 <_dtoa_r+0x350>
 8005932:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800593a:	f7fa ff87 	bl	800084c <__aeabi_ddiv>
 800593e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005942:	e028      	b.n	8005996 <_dtoa_r+0x39e>
 8005944:	2602      	movs	r6, #2
 8005946:	e7f2      	b.n	800592e <_dtoa_r+0x336>
 8005948:	07e1      	lsls	r1, r4, #31
 800594a:	d508      	bpl.n	800595e <_dtoa_r+0x366>
 800594c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005950:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005954:	f7fa fe50 	bl	80005f8 <__aeabi_dmul>
 8005958:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800595c:	3601      	adds	r6, #1
 800595e:	1064      	asrs	r4, r4, #1
 8005960:	3508      	adds	r5, #8
 8005962:	e7e5      	b.n	8005930 <_dtoa_r+0x338>
 8005964:	f000 80d2 	beq.w	8005b0c <_dtoa_r+0x514>
 8005968:	427c      	negs	r4, r7
 800596a:	4b92      	ldr	r3, [pc, #584]	@ (8005bb4 <_dtoa_r+0x5bc>)
 800596c:	4d92      	ldr	r5, [pc, #584]	@ (8005bb8 <_dtoa_r+0x5c0>)
 800596e:	f004 020f 	and.w	r2, r4, #15
 8005972:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800597e:	f7fa fe3b 	bl	80005f8 <__aeabi_dmul>
 8005982:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005986:	1124      	asrs	r4, r4, #4
 8005988:	2300      	movs	r3, #0
 800598a:	2602      	movs	r6, #2
 800598c:	2c00      	cmp	r4, #0
 800598e:	f040 80b2 	bne.w	8005af6 <_dtoa_r+0x4fe>
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1d3      	bne.n	800593e <_dtoa_r+0x346>
 8005996:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005998:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 80b7 	beq.w	8005b10 <_dtoa_r+0x518>
 80059a2:	4b86      	ldr	r3, [pc, #536]	@ (8005bbc <_dtoa_r+0x5c4>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	4620      	mov	r0, r4
 80059a8:	4629      	mov	r1, r5
 80059aa:	f7fb f897 	bl	8000adc <__aeabi_dcmplt>
 80059ae:	2800      	cmp	r0, #0
 80059b0:	f000 80ae 	beq.w	8005b10 <_dtoa_r+0x518>
 80059b4:	9b07      	ldr	r3, [sp, #28]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 80aa 	beq.w	8005b10 <_dtoa_r+0x518>
 80059bc:	9b00      	ldr	r3, [sp, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	dd37      	ble.n	8005a32 <_dtoa_r+0x43a>
 80059c2:	1e7b      	subs	r3, r7, #1
 80059c4:	9304      	str	r3, [sp, #16]
 80059c6:	4620      	mov	r0, r4
 80059c8:	4b7d      	ldr	r3, [pc, #500]	@ (8005bc0 <_dtoa_r+0x5c8>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	4629      	mov	r1, r5
 80059ce:	f7fa fe13 	bl	80005f8 <__aeabi_dmul>
 80059d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059d6:	9c00      	ldr	r4, [sp, #0]
 80059d8:	3601      	adds	r6, #1
 80059da:	4630      	mov	r0, r6
 80059dc:	f7fa fda2 	bl	8000524 <__aeabi_i2d>
 80059e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059e4:	f7fa fe08 	bl	80005f8 <__aeabi_dmul>
 80059e8:	4b76      	ldr	r3, [pc, #472]	@ (8005bc4 <_dtoa_r+0x5cc>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	f7fa fc4e 	bl	800028c <__adddf3>
 80059f0:	4605      	mov	r5, r0
 80059f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80059f6:	2c00      	cmp	r4, #0
 80059f8:	f040 808d 	bne.w	8005b16 <_dtoa_r+0x51e>
 80059fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a00:	4b71      	ldr	r3, [pc, #452]	@ (8005bc8 <_dtoa_r+0x5d0>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	f7fa fc40 	bl	8000288 <__aeabi_dsub>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a10:	462a      	mov	r2, r5
 8005a12:	4633      	mov	r3, r6
 8005a14:	f7fb f880 	bl	8000b18 <__aeabi_dcmpgt>
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	f040 828b 	bne.w	8005f34 <_dtoa_r+0x93c>
 8005a1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a22:	462a      	mov	r2, r5
 8005a24:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005a28:	f7fb f858 	bl	8000adc <__aeabi_dcmplt>
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	f040 8128 	bne.w	8005c82 <_dtoa_r+0x68a>
 8005a32:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005a36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005a3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f2c0 815a 	blt.w	8005cf6 <_dtoa_r+0x6fe>
 8005a42:	2f0e      	cmp	r7, #14
 8005a44:	f300 8157 	bgt.w	8005cf6 <_dtoa_r+0x6fe>
 8005a48:	4b5a      	ldr	r3, [pc, #360]	@ (8005bb4 <_dtoa_r+0x5bc>)
 8005a4a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005a4e:	ed93 7b00 	vldr	d7, [r3]
 8005a52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	ed8d 7b00 	vstr	d7, [sp]
 8005a5a:	da03      	bge.n	8005a64 <_dtoa_r+0x46c>
 8005a5c:	9b07      	ldr	r3, [sp, #28]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f340 8101 	ble.w	8005c66 <_dtoa_r+0x66e>
 8005a64:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005a68:	4656      	mov	r6, sl
 8005a6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a6e:	4620      	mov	r0, r4
 8005a70:	4629      	mov	r1, r5
 8005a72:	f7fa feeb 	bl	800084c <__aeabi_ddiv>
 8005a76:	f7fb f86f 	bl	8000b58 <__aeabi_d2iz>
 8005a7a:	4680      	mov	r8, r0
 8005a7c:	f7fa fd52 	bl	8000524 <__aeabi_i2d>
 8005a80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a84:	f7fa fdb8 	bl	80005f8 <__aeabi_dmul>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	4629      	mov	r1, r5
 8005a90:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005a94:	f7fa fbf8 	bl	8000288 <__aeabi_dsub>
 8005a98:	f806 4b01 	strb.w	r4, [r6], #1
 8005a9c:	9d07      	ldr	r5, [sp, #28]
 8005a9e:	eba6 040a 	sub.w	r4, r6, sl
 8005aa2:	42a5      	cmp	r5, r4
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	f040 8117 	bne.w	8005cda <_dtoa_r+0x6e2>
 8005aac:	f7fa fbee 	bl	800028c <__adddf3>
 8005ab0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ab4:	4604      	mov	r4, r0
 8005ab6:	460d      	mov	r5, r1
 8005ab8:	f7fb f82e 	bl	8000b18 <__aeabi_dcmpgt>
 8005abc:	2800      	cmp	r0, #0
 8005abe:	f040 80f9 	bne.w	8005cb4 <_dtoa_r+0x6bc>
 8005ac2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	4629      	mov	r1, r5
 8005aca:	f7fa fffd 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ace:	b118      	cbz	r0, 8005ad8 <_dtoa_r+0x4e0>
 8005ad0:	f018 0f01 	tst.w	r8, #1
 8005ad4:	f040 80ee 	bne.w	8005cb4 <_dtoa_r+0x6bc>
 8005ad8:	4649      	mov	r1, r9
 8005ada:	4658      	mov	r0, fp
 8005adc:	f000 fc90 	bl	8006400 <_Bfree>
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	7033      	strb	r3, [r6, #0]
 8005ae4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005ae6:	3701      	adds	r7, #1
 8005ae8:	601f      	str	r7, [r3, #0]
 8005aea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 831d 	beq.w	800612c <_dtoa_r+0xb34>
 8005af2:	601e      	str	r6, [r3, #0]
 8005af4:	e31a      	b.n	800612c <_dtoa_r+0xb34>
 8005af6:	07e2      	lsls	r2, r4, #31
 8005af8:	d505      	bpl.n	8005b06 <_dtoa_r+0x50e>
 8005afa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005afe:	f7fa fd7b 	bl	80005f8 <__aeabi_dmul>
 8005b02:	3601      	adds	r6, #1
 8005b04:	2301      	movs	r3, #1
 8005b06:	1064      	asrs	r4, r4, #1
 8005b08:	3508      	adds	r5, #8
 8005b0a:	e73f      	b.n	800598c <_dtoa_r+0x394>
 8005b0c:	2602      	movs	r6, #2
 8005b0e:	e742      	b.n	8005996 <_dtoa_r+0x39e>
 8005b10:	9c07      	ldr	r4, [sp, #28]
 8005b12:	9704      	str	r7, [sp, #16]
 8005b14:	e761      	b.n	80059da <_dtoa_r+0x3e2>
 8005b16:	4b27      	ldr	r3, [pc, #156]	@ (8005bb4 <_dtoa_r+0x5bc>)
 8005b18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005b1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b22:	4454      	add	r4, sl
 8005b24:	2900      	cmp	r1, #0
 8005b26:	d053      	beq.n	8005bd0 <_dtoa_r+0x5d8>
 8005b28:	4928      	ldr	r1, [pc, #160]	@ (8005bcc <_dtoa_r+0x5d4>)
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	f7fa fe8e 	bl	800084c <__aeabi_ddiv>
 8005b30:	4633      	mov	r3, r6
 8005b32:	462a      	mov	r2, r5
 8005b34:	f7fa fba8 	bl	8000288 <__aeabi_dsub>
 8005b38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005b3c:	4656      	mov	r6, sl
 8005b3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b42:	f7fb f809 	bl	8000b58 <__aeabi_d2iz>
 8005b46:	4605      	mov	r5, r0
 8005b48:	f7fa fcec 	bl	8000524 <__aeabi_i2d>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b54:	f7fa fb98 	bl	8000288 <__aeabi_dsub>
 8005b58:	3530      	adds	r5, #48	@ 0x30
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005b62:	f806 5b01 	strb.w	r5, [r6], #1
 8005b66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005b6a:	f7fa ffb7 	bl	8000adc <__aeabi_dcmplt>
 8005b6e:	2800      	cmp	r0, #0
 8005b70:	d171      	bne.n	8005c56 <_dtoa_r+0x65e>
 8005b72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b76:	4911      	ldr	r1, [pc, #68]	@ (8005bbc <_dtoa_r+0x5c4>)
 8005b78:	2000      	movs	r0, #0
 8005b7a:	f7fa fb85 	bl	8000288 <__aeabi_dsub>
 8005b7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005b82:	f7fa ffab 	bl	8000adc <__aeabi_dcmplt>
 8005b86:	2800      	cmp	r0, #0
 8005b88:	f040 8095 	bne.w	8005cb6 <_dtoa_r+0x6be>
 8005b8c:	42a6      	cmp	r6, r4
 8005b8e:	f43f af50 	beq.w	8005a32 <_dtoa_r+0x43a>
 8005b92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005b96:	4b0a      	ldr	r3, [pc, #40]	@ (8005bc0 <_dtoa_r+0x5c8>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f7fa fd2d 	bl	80005f8 <__aeabi_dmul>
 8005b9e:	4b08      	ldr	r3, [pc, #32]	@ (8005bc0 <_dtoa_r+0x5c8>)
 8005ba0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005baa:	f7fa fd25 	bl	80005f8 <__aeabi_dmul>
 8005bae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bb2:	e7c4      	b.n	8005b3e <_dtoa_r+0x546>
 8005bb4:	080073b8 	.word	0x080073b8
 8005bb8:	08007390 	.word	0x08007390
 8005bbc:	3ff00000 	.word	0x3ff00000
 8005bc0:	40240000 	.word	0x40240000
 8005bc4:	401c0000 	.word	0x401c0000
 8005bc8:	40140000 	.word	0x40140000
 8005bcc:	3fe00000 	.word	0x3fe00000
 8005bd0:	4631      	mov	r1, r6
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	f7fa fd10 	bl	80005f8 <__aeabi_dmul>
 8005bd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005bdc:	9415      	str	r4, [sp, #84]	@ 0x54
 8005bde:	4656      	mov	r6, sl
 8005be0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005be4:	f7fa ffb8 	bl	8000b58 <__aeabi_d2iz>
 8005be8:	4605      	mov	r5, r0
 8005bea:	f7fa fc9b 	bl	8000524 <__aeabi_i2d>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bf6:	f7fa fb47 	bl	8000288 <__aeabi_dsub>
 8005bfa:	3530      	adds	r5, #48	@ 0x30
 8005bfc:	f806 5b01 	strb.w	r5, [r6], #1
 8005c00:	4602      	mov	r2, r0
 8005c02:	460b      	mov	r3, r1
 8005c04:	42a6      	cmp	r6, r4
 8005c06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c0a:	f04f 0200 	mov.w	r2, #0
 8005c0e:	d124      	bne.n	8005c5a <_dtoa_r+0x662>
 8005c10:	4bac      	ldr	r3, [pc, #688]	@ (8005ec4 <_dtoa_r+0x8cc>)
 8005c12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c16:	f7fa fb39 	bl	800028c <__adddf3>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c22:	f7fa ff79 	bl	8000b18 <__aeabi_dcmpgt>
 8005c26:	2800      	cmp	r0, #0
 8005c28:	d145      	bne.n	8005cb6 <_dtoa_r+0x6be>
 8005c2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c2e:	49a5      	ldr	r1, [pc, #660]	@ (8005ec4 <_dtoa_r+0x8cc>)
 8005c30:	2000      	movs	r0, #0
 8005c32:	f7fa fb29 	bl	8000288 <__aeabi_dsub>
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c3e:	f7fa ff4d 	bl	8000adc <__aeabi_dcmplt>
 8005c42:	2800      	cmp	r0, #0
 8005c44:	f43f aef5 	beq.w	8005a32 <_dtoa_r+0x43a>
 8005c48:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005c4a:	1e73      	subs	r3, r6, #1
 8005c4c:	9315      	str	r3, [sp, #84]	@ 0x54
 8005c4e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005c52:	2b30      	cmp	r3, #48	@ 0x30
 8005c54:	d0f8      	beq.n	8005c48 <_dtoa_r+0x650>
 8005c56:	9f04      	ldr	r7, [sp, #16]
 8005c58:	e73e      	b.n	8005ad8 <_dtoa_r+0x4e0>
 8005c5a:	4b9b      	ldr	r3, [pc, #620]	@ (8005ec8 <_dtoa_r+0x8d0>)
 8005c5c:	f7fa fccc 	bl	80005f8 <__aeabi_dmul>
 8005c60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c64:	e7bc      	b.n	8005be0 <_dtoa_r+0x5e8>
 8005c66:	d10c      	bne.n	8005c82 <_dtoa_r+0x68a>
 8005c68:	4b98      	ldr	r3, [pc, #608]	@ (8005ecc <_dtoa_r+0x8d4>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c70:	f7fa fcc2 	bl	80005f8 <__aeabi_dmul>
 8005c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c78:	f7fa ff44 	bl	8000b04 <__aeabi_dcmpge>
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	f000 8157 	beq.w	8005f30 <_dtoa_r+0x938>
 8005c82:	2400      	movs	r4, #0
 8005c84:	4625      	mov	r5, r4
 8005c86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c88:	43db      	mvns	r3, r3
 8005c8a:	9304      	str	r3, [sp, #16]
 8005c8c:	4656      	mov	r6, sl
 8005c8e:	2700      	movs	r7, #0
 8005c90:	4621      	mov	r1, r4
 8005c92:	4658      	mov	r0, fp
 8005c94:	f000 fbb4 	bl	8006400 <_Bfree>
 8005c98:	2d00      	cmp	r5, #0
 8005c9a:	d0dc      	beq.n	8005c56 <_dtoa_r+0x65e>
 8005c9c:	b12f      	cbz	r7, 8005caa <_dtoa_r+0x6b2>
 8005c9e:	42af      	cmp	r7, r5
 8005ca0:	d003      	beq.n	8005caa <_dtoa_r+0x6b2>
 8005ca2:	4639      	mov	r1, r7
 8005ca4:	4658      	mov	r0, fp
 8005ca6:	f000 fbab 	bl	8006400 <_Bfree>
 8005caa:	4629      	mov	r1, r5
 8005cac:	4658      	mov	r0, fp
 8005cae:	f000 fba7 	bl	8006400 <_Bfree>
 8005cb2:	e7d0      	b.n	8005c56 <_dtoa_r+0x65e>
 8005cb4:	9704      	str	r7, [sp, #16]
 8005cb6:	4633      	mov	r3, r6
 8005cb8:	461e      	mov	r6, r3
 8005cba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cbe:	2a39      	cmp	r2, #57	@ 0x39
 8005cc0:	d107      	bne.n	8005cd2 <_dtoa_r+0x6da>
 8005cc2:	459a      	cmp	sl, r3
 8005cc4:	d1f8      	bne.n	8005cb8 <_dtoa_r+0x6c0>
 8005cc6:	9a04      	ldr	r2, [sp, #16]
 8005cc8:	3201      	adds	r2, #1
 8005cca:	9204      	str	r2, [sp, #16]
 8005ccc:	2230      	movs	r2, #48	@ 0x30
 8005cce:	f88a 2000 	strb.w	r2, [sl]
 8005cd2:	781a      	ldrb	r2, [r3, #0]
 8005cd4:	3201      	adds	r2, #1
 8005cd6:	701a      	strb	r2, [r3, #0]
 8005cd8:	e7bd      	b.n	8005c56 <_dtoa_r+0x65e>
 8005cda:	4b7b      	ldr	r3, [pc, #492]	@ (8005ec8 <_dtoa_r+0x8d0>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f7fa fc8b 	bl	80005f8 <__aeabi_dmul>
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	4604      	mov	r4, r0
 8005ce8:	460d      	mov	r5, r1
 8005cea:	f7fa feed 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	f43f aebb 	beq.w	8005a6a <_dtoa_r+0x472>
 8005cf4:	e6f0      	b.n	8005ad8 <_dtoa_r+0x4e0>
 8005cf6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005cf8:	2a00      	cmp	r2, #0
 8005cfa:	f000 80db 	beq.w	8005eb4 <_dtoa_r+0x8bc>
 8005cfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d00:	2a01      	cmp	r2, #1
 8005d02:	f300 80bf 	bgt.w	8005e84 <_dtoa_r+0x88c>
 8005d06:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005d08:	2a00      	cmp	r2, #0
 8005d0a:	f000 80b7 	beq.w	8005e7c <_dtoa_r+0x884>
 8005d0e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005d12:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005d14:	4646      	mov	r6, r8
 8005d16:	9a08      	ldr	r2, [sp, #32]
 8005d18:	2101      	movs	r1, #1
 8005d1a:	441a      	add	r2, r3
 8005d1c:	4658      	mov	r0, fp
 8005d1e:	4498      	add	r8, r3
 8005d20:	9208      	str	r2, [sp, #32]
 8005d22:	f000 fc21 	bl	8006568 <__i2b>
 8005d26:	4605      	mov	r5, r0
 8005d28:	b15e      	cbz	r6, 8005d42 <_dtoa_r+0x74a>
 8005d2a:	9b08      	ldr	r3, [sp, #32]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	dd08      	ble.n	8005d42 <_dtoa_r+0x74a>
 8005d30:	42b3      	cmp	r3, r6
 8005d32:	9a08      	ldr	r2, [sp, #32]
 8005d34:	bfa8      	it	ge
 8005d36:	4633      	movge	r3, r6
 8005d38:	eba8 0803 	sub.w	r8, r8, r3
 8005d3c:	1af6      	subs	r6, r6, r3
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	9308      	str	r3, [sp, #32]
 8005d42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d44:	b1f3      	cbz	r3, 8005d84 <_dtoa_r+0x78c>
 8005d46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 80b7 	beq.w	8005ebc <_dtoa_r+0x8c4>
 8005d4e:	b18c      	cbz	r4, 8005d74 <_dtoa_r+0x77c>
 8005d50:	4629      	mov	r1, r5
 8005d52:	4622      	mov	r2, r4
 8005d54:	4658      	mov	r0, fp
 8005d56:	f000 fcc7 	bl	80066e8 <__pow5mult>
 8005d5a:	464a      	mov	r2, r9
 8005d5c:	4601      	mov	r1, r0
 8005d5e:	4605      	mov	r5, r0
 8005d60:	4658      	mov	r0, fp
 8005d62:	f000 fc17 	bl	8006594 <__multiply>
 8005d66:	4649      	mov	r1, r9
 8005d68:	9004      	str	r0, [sp, #16]
 8005d6a:	4658      	mov	r0, fp
 8005d6c:	f000 fb48 	bl	8006400 <_Bfree>
 8005d70:	9b04      	ldr	r3, [sp, #16]
 8005d72:	4699      	mov	r9, r3
 8005d74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d76:	1b1a      	subs	r2, r3, r4
 8005d78:	d004      	beq.n	8005d84 <_dtoa_r+0x78c>
 8005d7a:	4649      	mov	r1, r9
 8005d7c:	4658      	mov	r0, fp
 8005d7e:	f000 fcb3 	bl	80066e8 <__pow5mult>
 8005d82:	4681      	mov	r9, r0
 8005d84:	2101      	movs	r1, #1
 8005d86:	4658      	mov	r0, fp
 8005d88:	f000 fbee 	bl	8006568 <__i2b>
 8005d8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005d8e:	4604      	mov	r4, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 81cf 	beq.w	8006134 <_dtoa_r+0xb3c>
 8005d96:	461a      	mov	r2, r3
 8005d98:	4601      	mov	r1, r0
 8005d9a:	4658      	mov	r0, fp
 8005d9c:	f000 fca4 	bl	80066e8 <__pow5mult>
 8005da0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	4604      	mov	r4, r0
 8005da6:	f300 8095 	bgt.w	8005ed4 <_dtoa_r+0x8dc>
 8005daa:	9b02      	ldr	r3, [sp, #8]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f040 8087 	bne.w	8005ec0 <_dtoa_r+0x8c8>
 8005db2:	9b03      	ldr	r3, [sp, #12]
 8005db4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f040 8089 	bne.w	8005ed0 <_dtoa_r+0x8d8>
 8005dbe:	9b03      	ldr	r3, [sp, #12]
 8005dc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005dc4:	0d1b      	lsrs	r3, r3, #20
 8005dc6:	051b      	lsls	r3, r3, #20
 8005dc8:	b12b      	cbz	r3, 8005dd6 <_dtoa_r+0x7de>
 8005dca:	9b08      	ldr	r3, [sp, #32]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	9308      	str	r3, [sp, #32]
 8005dd0:	f108 0801 	add.w	r8, r8, #1
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005dd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 81b0 	beq.w	8006140 <_dtoa_r+0xb48>
 8005de0:	6923      	ldr	r3, [r4, #16]
 8005de2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005de6:	6918      	ldr	r0, [r3, #16]
 8005de8:	f000 fb72 	bl	80064d0 <__hi0bits>
 8005dec:	f1c0 0020 	rsb	r0, r0, #32
 8005df0:	9b08      	ldr	r3, [sp, #32]
 8005df2:	4418      	add	r0, r3
 8005df4:	f010 001f 	ands.w	r0, r0, #31
 8005df8:	d077      	beq.n	8005eea <_dtoa_r+0x8f2>
 8005dfa:	f1c0 0320 	rsb	r3, r0, #32
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	dd6b      	ble.n	8005eda <_dtoa_r+0x8e2>
 8005e02:	9b08      	ldr	r3, [sp, #32]
 8005e04:	f1c0 001c 	rsb	r0, r0, #28
 8005e08:	4403      	add	r3, r0
 8005e0a:	4480      	add	r8, r0
 8005e0c:	4406      	add	r6, r0
 8005e0e:	9308      	str	r3, [sp, #32]
 8005e10:	f1b8 0f00 	cmp.w	r8, #0
 8005e14:	dd05      	ble.n	8005e22 <_dtoa_r+0x82a>
 8005e16:	4649      	mov	r1, r9
 8005e18:	4642      	mov	r2, r8
 8005e1a:	4658      	mov	r0, fp
 8005e1c:	f000 fcbe 	bl	800679c <__lshift>
 8005e20:	4681      	mov	r9, r0
 8005e22:	9b08      	ldr	r3, [sp, #32]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	dd05      	ble.n	8005e34 <_dtoa_r+0x83c>
 8005e28:	4621      	mov	r1, r4
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	4658      	mov	r0, fp
 8005e2e:	f000 fcb5 	bl	800679c <__lshift>
 8005e32:	4604      	mov	r4, r0
 8005e34:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d059      	beq.n	8005eee <_dtoa_r+0x8f6>
 8005e3a:	4621      	mov	r1, r4
 8005e3c:	4648      	mov	r0, r9
 8005e3e:	f000 fd19 	bl	8006874 <__mcmp>
 8005e42:	2800      	cmp	r0, #0
 8005e44:	da53      	bge.n	8005eee <_dtoa_r+0x8f6>
 8005e46:	1e7b      	subs	r3, r7, #1
 8005e48:	9304      	str	r3, [sp, #16]
 8005e4a:	4649      	mov	r1, r9
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	220a      	movs	r2, #10
 8005e50:	4658      	mov	r0, fp
 8005e52:	f000 faf7 	bl	8006444 <__multadd>
 8005e56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e58:	4681      	mov	r9, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 8172 	beq.w	8006144 <_dtoa_r+0xb4c>
 8005e60:	2300      	movs	r3, #0
 8005e62:	4629      	mov	r1, r5
 8005e64:	220a      	movs	r2, #10
 8005e66:	4658      	mov	r0, fp
 8005e68:	f000 faec 	bl	8006444 <__multadd>
 8005e6c:	9b00      	ldr	r3, [sp, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	4605      	mov	r5, r0
 8005e72:	dc67      	bgt.n	8005f44 <_dtoa_r+0x94c>
 8005e74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	dc41      	bgt.n	8005efe <_dtoa_r+0x906>
 8005e7a:	e063      	b.n	8005f44 <_dtoa_r+0x94c>
 8005e7c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005e7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005e82:	e746      	b.n	8005d12 <_dtoa_r+0x71a>
 8005e84:	9b07      	ldr	r3, [sp, #28]
 8005e86:	1e5c      	subs	r4, r3, #1
 8005e88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e8a:	42a3      	cmp	r3, r4
 8005e8c:	bfbf      	itttt	lt
 8005e8e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005e90:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005e92:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005e94:	1ae3      	sublt	r3, r4, r3
 8005e96:	bfb4      	ite	lt
 8005e98:	18d2      	addlt	r2, r2, r3
 8005e9a:	1b1c      	subge	r4, r3, r4
 8005e9c:	9b07      	ldr	r3, [sp, #28]
 8005e9e:	bfbc      	itt	lt
 8005ea0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005ea2:	2400      	movlt	r4, #0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	bfb5      	itete	lt
 8005ea8:	eba8 0603 	sublt.w	r6, r8, r3
 8005eac:	9b07      	ldrge	r3, [sp, #28]
 8005eae:	2300      	movlt	r3, #0
 8005eb0:	4646      	movge	r6, r8
 8005eb2:	e730      	b.n	8005d16 <_dtoa_r+0x71e>
 8005eb4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005eb6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005eb8:	4646      	mov	r6, r8
 8005eba:	e735      	b.n	8005d28 <_dtoa_r+0x730>
 8005ebc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ebe:	e75c      	b.n	8005d7a <_dtoa_r+0x782>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	e788      	b.n	8005dd6 <_dtoa_r+0x7de>
 8005ec4:	3fe00000 	.word	0x3fe00000
 8005ec8:	40240000 	.word	0x40240000
 8005ecc:	40140000 	.word	0x40140000
 8005ed0:	9b02      	ldr	r3, [sp, #8]
 8005ed2:	e780      	b.n	8005dd6 <_dtoa_r+0x7de>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ed8:	e782      	b.n	8005de0 <_dtoa_r+0x7e8>
 8005eda:	d099      	beq.n	8005e10 <_dtoa_r+0x818>
 8005edc:	9a08      	ldr	r2, [sp, #32]
 8005ede:	331c      	adds	r3, #28
 8005ee0:	441a      	add	r2, r3
 8005ee2:	4498      	add	r8, r3
 8005ee4:	441e      	add	r6, r3
 8005ee6:	9208      	str	r2, [sp, #32]
 8005ee8:	e792      	b.n	8005e10 <_dtoa_r+0x818>
 8005eea:	4603      	mov	r3, r0
 8005eec:	e7f6      	b.n	8005edc <_dtoa_r+0x8e4>
 8005eee:	9b07      	ldr	r3, [sp, #28]
 8005ef0:	9704      	str	r7, [sp, #16]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	dc20      	bgt.n	8005f38 <_dtoa_r+0x940>
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	dd1e      	ble.n	8005f3c <_dtoa_r+0x944>
 8005efe:	9b00      	ldr	r3, [sp, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f47f aec0 	bne.w	8005c86 <_dtoa_r+0x68e>
 8005f06:	4621      	mov	r1, r4
 8005f08:	2205      	movs	r2, #5
 8005f0a:	4658      	mov	r0, fp
 8005f0c:	f000 fa9a 	bl	8006444 <__multadd>
 8005f10:	4601      	mov	r1, r0
 8005f12:	4604      	mov	r4, r0
 8005f14:	4648      	mov	r0, r9
 8005f16:	f000 fcad 	bl	8006874 <__mcmp>
 8005f1a:	2800      	cmp	r0, #0
 8005f1c:	f77f aeb3 	ble.w	8005c86 <_dtoa_r+0x68e>
 8005f20:	4656      	mov	r6, sl
 8005f22:	2331      	movs	r3, #49	@ 0x31
 8005f24:	f806 3b01 	strb.w	r3, [r6], #1
 8005f28:	9b04      	ldr	r3, [sp, #16]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	9304      	str	r3, [sp, #16]
 8005f2e:	e6ae      	b.n	8005c8e <_dtoa_r+0x696>
 8005f30:	9c07      	ldr	r4, [sp, #28]
 8005f32:	9704      	str	r7, [sp, #16]
 8005f34:	4625      	mov	r5, r4
 8005f36:	e7f3      	b.n	8005f20 <_dtoa_r+0x928>
 8005f38:	9b07      	ldr	r3, [sp, #28]
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f000 8104 	beq.w	800614c <_dtoa_r+0xb54>
 8005f44:	2e00      	cmp	r6, #0
 8005f46:	dd05      	ble.n	8005f54 <_dtoa_r+0x95c>
 8005f48:	4629      	mov	r1, r5
 8005f4a:	4632      	mov	r2, r6
 8005f4c:	4658      	mov	r0, fp
 8005f4e:	f000 fc25 	bl	800679c <__lshift>
 8005f52:	4605      	mov	r5, r0
 8005f54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d05a      	beq.n	8006010 <_dtoa_r+0xa18>
 8005f5a:	6869      	ldr	r1, [r5, #4]
 8005f5c:	4658      	mov	r0, fp
 8005f5e:	f000 fa0f 	bl	8006380 <_Balloc>
 8005f62:	4606      	mov	r6, r0
 8005f64:	b928      	cbnz	r0, 8005f72 <_dtoa_r+0x97a>
 8005f66:	4b84      	ldr	r3, [pc, #528]	@ (8006178 <_dtoa_r+0xb80>)
 8005f68:	4602      	mov	r2, r0
 8005f6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005f6e:	f7ff bb5a 	b.w	8005626 <_dtoa_r+0x2e>
 8005f72:	692a      	ldr	r2, [r5, #16]
 8005f74:	3202      	adds	r2, #2
 8005f76:	0092      	lsls	r2, r2, #2
 8005f78:	f105 010c 	add.w	r1, r5, #12
 8005f7c:	300c      	adds	r0, #12
 8005f7e:	f7ff faa4 	bl	80054ca <memcpy>
 8005f82:	2201      	movs	r2, #1
 8005f84:	4631      	mov	r1, r6
 8005f86:	4658      	mov	r0, fp
 8005f88:	f000 fc08 	bl	800679c <__lshift>
 8005f8c:	f10a 0301 	add.w	r3, sl, #1
 8005f90:	9307      	str	r3, [sp, #28]
 8005f92:	9b00      	ldr	r3, [sp, #0]
 8005f94:	4453      	add	r3, sl
 8005f96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f98:	9b02      	ldr	r3, [sp, #8]
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	462f      	mov	r7, r5
 8005fa0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fa2:	4605      	mov	r5, r0
 8005fa4:	9b07      	ldr	r3, [sp, #28]
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	4648      	mov	r0, r9
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	f7ff fa9a 	bl	80054e6 <quorem>
 8005fb2:	4639      	mov	r1, r7
 8005fb4:	9002      	str	r0, [sp, #8]
 8005fb6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005fba:	4648      	mov	r0, r9
 8005fbc:	f000 fc5a 	bl	8006874 <__mcmp>
 8005fc0:	462a      	mov	r2, r5
 8005fc2:	9008      	str	r0, [sp, #32]
 8005fc4:	4621      	mov	r1, r4
 8005fc6:	4658      	mov	r0, fp
 8005fc8:	f000 fc70 	bl	80068ac <__mdiff>
 8005fcc:	68c2      	ldr	r2, [r0, #12]
 8005fce:	4606      	mov	r6, r0
 8005fd0:	bb02      	cbnz	r2, 8006014 <_dtoa_r+0xa1c>
 8005fd2:	4601      	mov	r1, r0
 8005fd4:	4648      	mov	r0, r9
 8005fd6:	f000 fc4d 	bl	8006874 <__mcmp>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	4631      	mov	r1, r6
 8005fde:	4658      	mov	r0, fp
 8005fe0:	920e      	str	r2, [sp, #56]	@ 0x38
 8005fe2:	f000 fa0d 	bl	8006400 <_Bfree>
 8005fe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fe8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005fea:	9e07      	ldr	r6, [sp, #28]
 8005fec:	ea43 0102 	orr.w	r1, r3, r2
 8005ff0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ff2:	4319      	orrs	r1, r3
 8005ff4:	d110      	bne.n	8006018 <_dtoa_r+0xa20>
 8005ff6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005ffa:	d029      	beq.n	8006050 <_dtoa_r+0xa58>
 8005ffc:	9b08      	ldr	r3, [sp, #32]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	dd02      	ble.n	8006008 <_dtoa_r+0xa10>
 8006002:	9b02      	ldr	r3, [sp, #8]
 8006004:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006008:	9b00      	ldr	r3, [sp, #0]
 800600a:	f883 8000 	strb.w	r8, [r3]
 800600e:	e63f      	b.n	8005c90 <_dtoa_r+0x698>
 8006010:	4628      	mov	r0, r5
 8006012:	e7bb      	b.n	8005f8c <_dtoa_r+0x994>
 8006014:	2201      	movs	r2, #1
 8006016:	e7e1      	b.n	8005fdc <_dtoa_r+0x9e4>
 8006018:	9b08      	ldr	r3, [sp, #32]
 800601a:	2b00      	cmp	r3, #0
 800601c:	db04      	blt.n	8006028 <_dtoa_r+0xa30>
 800601e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006020:	430b      	orrs	r3, r1
 8006022:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006024:	430b      	orrs	r3, r1
 8006026:	d120      	bne.n	800606a <_dtoa_r+0xa72>
 8006028:	2a00      	cmp	r2, #0
 800602a:	dded      	ble.n	8006008 <_dtoa_r+0xa10>
 800602c:	4649      	mov	r1, r9
 800602e:	2201      	movs	r2, #1
 8006030:	4658      	mov	r0, fp
 8006032:	f000 fbb3 	bl	800679c <__lshift>
 8006036:	4621      	mov	r1, r4
 8006038:	4681      	mov	r9, r0
 800603a:	f000 fc1b 	bl	8006874 <__mcmp>
 800603e:	2800      	cmp	r0, #0
 8006040:	dc03      	bgt.n	800604a <_dtoa_r+0xa52>
 8006042:	d1e1      	bne.n	8006008 <_dtoa_r+0xa10>
 8006044:	f018 0f01 	tst.w	r8, #1
 8006048:	d0de      	beq.n	8006008 <_dtoa_r+0xa10>
 800604a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800604e:	d1d8      	bne.n	8006002 <_dtoa_r+0xa0a>
 8006050:	9a00      	ldr	r2, [sp, #0]
 8006052:	2339      	movs	r3, #57	@ 0x39
 8006054:	7013      	strb	r3, [r2, #0]
 8006056:	4633      	mov	r3, r6
 8006058:	461e      	mov	r6, r3
 800605a:	3b01      	subs	r3, #1
 800605c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006060:	2a39      	cmp	r2, #57	@ 0x39
 8006062:	d052      	beq.n	800610a <_dtoa_r+0xb12>
 8006064:	3201      	adds	r2, #1
 8006066:	701a      	strb	r2, [r3, #0]
 8006068:	e612      	b.n	8005c90 <_dtoa_r+0x698>
 800606a:	2a00      	cmp	r2, #0
 800606c:	dd07      	ble.n	800607e <_dtoa_r+0xa86>
 800606e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006072:	d0ed      	beq.n	8006050 <_dtoa_r+0xa58>
 8006074:	9a00      	ldr	r2, [sp, #0]
 8006076:	f108 0301 	add.w	r3, r8, #1
 800607a:	7013      	strb	r3, [r2, #0]
 800607c:	e608      	b.n	8005c90 <_dtoa_r+0x698>
 800607e:	9b07      	ldr	r3, [sp, #28]
 8006080:	9a07      	ldr	r2, [sp, #28]
 8006082:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006086:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006088:	4293      	cmp	r3, r2
 800608a:	d028      	beq.n	80060de <_dtoa_r+0xae6>
 800608c:	4649      	mov	r1, r9
 800608e:	2300      	movs	r3, #0
 8006090:	220a      	movs	r2, #10
 8006092:	4658      	mov	r0, fp
 8006094:	f000 f9d6 	bl	8006444 <__multadd>
 8006098:	42af      	cmp	r7, r5
 800609a:	4681      	mov	r9, r0
 800609c:	f04f 0300 	mov.w	r3, #0
 80060a0:	f04f 020a 	mov.w	r2, #10
 80060a4:	4639      	mov	r1, r7
 80060a6:	4658      	mov	r0, fp
 80060a8:	d107      	bne.n	80060ba <_dtoa_r+0xac2>
 80060aa:	f000 f9cb 	bl	8006444 <__multadd>
 80060ae:	4607      	mov	r7, r0
 80060b0:	4605      	mov	r5, r0
 80060b2:	9b07      	ldr	r3, [sp, #28]
 80060b4:	3301      	adds	r3, #1
 80060b6:	9307      	str	r3, [sp, #28]
 80060b8:	e774      	b.n	8005fa4 <_dtoa_r+0x9ac>
 80060ba:	f000 f9c3 	bl	8006444 <__multadd>
 80060be:	4629      	mov	r1, r5
 80060c0:	4607      	mov	r7, r0
 80060c2:	2300      	movs	r3, #0
 80060c4:	220a      	movs	r2, #10
 80060c6:	4658      	mov	r0, fp
 80060c8:	f000 f9bc 	bl	8006444 <__multadd>
 80060cc:	4605      	mov	r5, r0
 80060ce:	e7f0      	b.n	80060b2 <_dtoa_r+0xaba>
 80060d0:	9b00      	ldr	r3, [sp, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	bfcc      	ite	gt
 80060d6:	461e      	movgt	r6, r3
 80060d8:	2601      	movle	r6, #1
 80060da:	4456      	add	r6, sl
 80060dc:	2700      	movs	r7, #0
 80060de:	4649      	mov	r1, r9
 80060e0:	2201      	movs	r2, #1
 80060e2:	4658      	mov	r0, fp
 80060e4:	f000 fb5a 	bl	800679c <__lshift>
 80060e8:	4621      	mov	r1, r4
 80060ea:	4681      	mov	r9, r0
 80060ec:	f000 fbc2 	bl	8006874 <__mcmp>
 80060f0:	2800      	cmp	r0, #0
 80060f2:	dcb0      	bgt.n	8006056 <_dtoa_r+0xa5e>
 80060f4:	d102      	bne.n	80060fc <_dtoa_r+0xb04>
 80060f6:	f018 0f01 	tst.w	r8, #1
 80060fa:	d1ac      	bne.n	8006056 <_dtoa_r+0xa5e>
 80060fc:	4633      	mov	r3, r6
 80060fe:	461e      	mov	r6, r3
 8006100:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006104:	2a30      	cmp	r2, #48	@ 0x30
 8006106:	d0fa      	beq.n	80060fe <_dtoa_r+0xb06>
 8006108:	e5c2      	b.n	8005c90 <_dtoa_r+0x698>
 800610a:	459a      	cmp	sl, r3
 800610c:	d1a4      	bne.n	8006058 <_dtoa_r+0xa60>
 800610e:	9b04      	ldr	r3, [sp, #16]
 8006110:	3301      	adds	r3, #1
 8006112:	9304      	str	r3, [sp, #16]
 8006114:	2331      	movs	r3, #49	@ 0x31
 8006116:	f88a 3000 	strb.w	r3, [sl]
 800611a:	e5b9      	b.n	8005c90 <_dtoa_r+0x698>
 800611c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800611e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800617c <_dtoa_r+0xb84>
 8006122:	b11b      	cbz	r3, 800612c <_dtoa_r+0xb34>
 8006124:	f10a 0308 	add.w	r3, sl, #8
 8006128:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800612a:	6013      	str	r3, [r2, #0]
 800612c:	4650      	mov	r0, sl
 800612e:	b019      	add	sp, #100	@ 0x64
 8006130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006134:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006136:	2b01      	cmp	r3, #1
 8006138:	f77f ae37 	ble.w	8005daa <_dtoa_r+0x7b2>
 800613c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800613e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006140:	2001      	movs	r0, #1
 8006142:	e655      	b.n	8005df0 <_dtoa_r+0x7f8>
 8006144:	9b00      	ldr	r3, [sp, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	f77f aed6 	ble.w	8005ef8 <_dtoa_r+0x900>
 800614c:	4656      	mov	r6, sl
 800614e:	4621      	mov	r1, r4
 8006150:	4648      	mov	r0, r9
 8006152:	f7ff f9c8 	bl	80054e6 <quorem>
 8006156:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800615a:	f806 8b01 	strb.w	r8, [r6], #1
 800615e:	9b00      	ldr	r3, [sp, #0]
 8006160:	eba6 020a 	sub.w	r2, r6, sl
 8006164:	4293      	cmp	r3, r2
 8006166:	ddb3      	ble.n	80060d0 <_dtoa_r+0xad8>
 8006168:	4649      	mov	r1, r9
 800616a:	2300      	movs	r3, #0
 800616c:	220a      	movs	r2, #10
 800616e:	4658      	mov	r0, fp
 8006170:	f000 f968 	bl	8006444 <__multadd>
 8006174:	4681      	mov	r9, r0
 8006176:	e7ea      	b.n	800614e <_dtoa_r+0xb56>
 8006178:	08007314 	.word	0x08007314
 800617c:	08007298 	.word	0x08007298

08006180 <_free_r>:
 8006180:	b538      	push	{r3, r4, r5, lr}
 8006182:	4605      	mov	r5, r0
 8006184:	2900      	cmp	r1, #0
 8006186:	d041      	beq.n	800620c <_free_r+0x8c>
 8006188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800618c:	1f0c      	subs	r4, r1, #4
 800618e:	2b00      	cmp	r3, #0
 8006190:	bfb8      	it	lt
 8006192:	18e4      	addlt	r4, r4, r3
 8006194:	f000 f8e8 	bl	8006368 <__malloc_lock>
 8006198:	4a1d      	ldr	r2, [pc, #116]	@ (8006210 <_free_r+0x90>)
 800619a:	6813      	ldr	r3, [r2, #0]
 800619c:	b933      	cbnz	r3, 80061ac <_free_r+0x2c>
 800619e:	6063      	str	r3, [r4, #4]
 80061a0:	6014      	str	r4, [r2, #0]
 80061a2:	4628      	mov	r0, r5
 80061a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061a8:	f000 b8e4 	b.w	8006374 <__malloc_unlock>
 80061ac:	42a3      	cmp	r3, r4
 80061ae:	d908      	bls.n	80061c2 <_free_r+0x42>
 80061b0:	6820      	ldr	r0, [r4, #0]
 80061b2:	1821      	adds	r1, r4, r0
 80061b4:	428b      	cmp	r3, r1
 80061b6:	bf01      	itttt	eq
 80061b8:	6819      	ldreq	r1, [r3, #0]
 80061ba:	685b      	ldreq	r3, [r3, #4]
 80061bc:	1809      	addeq	r1, r1, r0
 80061be:	6021      	streq	r1, [r4, #0]
 80061c0:	e7ed      	b.n	800619e <_free_r+0x1e>
 80061c2:	461a      	mov	r2, r3
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	b10b      	cbz	r3, 80061cc <_free_r+0x4c>
 80061c8:	42a3      	cmp	r3, r4
 80061ca:	d9fa      	bls.n	80061c2 <_free_r+0x42>
 80061cc:	6811      	ldr	r1, [r2, #0]
 80061ce:	1850      	adds	r0, r2, r1
 80061d0:	42a0      	cmp	r0, r4
 80061d2:	d10b      	bne.n	80061ec <_free_r+0x6c>
 80061d4:	6820      	ldr	r0, [r4, #0]
 80061d6:	4401      	add	r1, r0
 80061d8:	1850      	adds	r0, r2, r1
 80061da:	4283      	cmp	r3, r0
 80061dc:	6011      	str	r1, [r2, #0]
 80061de:	d1e0      	bne.n	80061a2 <_free_r+0x22>
 80061e0:	6818      	ldr	r0, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	6053      	str	r3, [r2, #4]
 80061e6:	4408      	add	r0, r1
 80061e8:	6010      	str	r0, [r2, #0]
 80061ea:	e7da      	b.n	80061a2 <_free_r+0x22>
 80061ec:	d902      	bls.n	80061f4 <_free_r+0x74>
 80061ee:	230c      	movs	r3, #12
 80061f0:	602b      	str	r3, [r5, #0]
 80061f2:	e7d6      	b.n	80061a2 <_free_r+0x22>
 80061f4:	6820      	ldr	r0, [r4, #0]
 80061f6:	1821      	adds	r1, r4, r0
 80061f8:	428b      	cmp	r3, r1
 80061fa:	bf04      	itt	eq
 80061fc:	6819      	ldreq	r1, [r3, #0]
 80061fe:	685b      	ldreq	r3, [r3, #4]
 8006200:	6063      	str	r3, [r4, #4]
 8006202:	bf04      	itt	eq
 8006204:	1809      	addeq	r1, r1, r0
 8006206:	6021      	streq	r1, [r4, #0]
 8006208:	6054      	str	r4, [r2, #4]
 800620a:	e7ca      	b.n	80061a2 <_free_r+0x22>
 800620c:	bd38      	pop	{r3, r4, r5, pc}
 800620e:	bf00      	nop
 8006210:	20000b3c 	.word	0x20000b3c

08006214 <malloc>:
 8006214:	4b02      	ldr	r3, [pc, #8]	@ (8006220 <malloc+0xc>)
 8006216:	4601      	mov	r1, r0
 8006218:	6818      	ldr	r0, [r3, #0]
 800621a:	f000 b825 	b.w	8006268 <_malloc_r>
 800621e:	bf00      	nop
 8006220:	2000001c 	.word	0x2000001c

08006224 <sbrk_aligned>:
 8006224:	b570      	push	{r4, r5, r6, lr}
 8006226:	4e0f      	ldr	r6, [pc, #60]	@ (8006264 <sbrk_aligned+0x40>)
 8006228:	460c      	mov	r4, r1
 800622a:	6831      	ldr	r1, [r6, #0]
 800622c:	4605      	mov	r5, r0
 800622e:	b911      	cbnz	r1, 8006236 <sbrk_aligned+0x12>
 8006230:	f000 feaa 	bl	8006f88 <_sbrk_r>
 8006234:	6030      	str	r0, [r6, #0]
 8006236:	4621      	mov	r1, r4
 8006238:	4628      	mov	r0, r5
 800623a:	f000 fea5 	bl	8006f88 <_sbrk_r>
 800623e:	1c43      	adds	r3, r0, #1
 8006240:	d103      	bne.n	800624a <sbrk_aligned+0x26>
 8006242:	f04f 34ff 	mov.w	r4, #4294967295
 8006246:	4620      	mov	r0, r4
 8006248:	bd70      	pop	{r4, r5, r6, pc}
 800624a:	1cc4      	adds	r4, r0, #3
 800624c:	f024 0403 	bic.w	r4, r4, #3
 8006250:	42a0      	cmp	r0, r4
 8006252:	d0f8      	beq.n	8006246 <sbrk_aligned+0x22>
 8006254:	1a21      	subs	r1, r4, r0
 8006256:	4628      	mov	r0, r5
 8006258:	f000 fe96 	bl	8006f88 <_sbrk_r>
 800625c:	3001      	adds	r0, #1
 800625e:	d1f2      	bne.n	8006246 <sbrk_aligned+0x22>
 8006260:	e7ef      	b.n	8006242 <sbrk_aligned+0x1e>
 8006262:	bf00      	nop
 8006264:	20000b38 	.word	0x20000b38

08006268 <_malloc_r>:
 8006268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800626c:	1ccd      	adds	r5, r1, #3
 800626e:	f025 0503 	bic.w	r5, r5, #3
 8006272:	3508      	adds	r5, #8
 8006274:	2d0c      	cmp	r5, #12
 8006276:	bf38      	it	cc
 8006278:	250c      	movcc	r5, #12
 800627a:	2d00      	cmp	r5, #0
 800627c:	4606      	mov	r6, r0
 800627e:	db01      	blt.n	8006284 <_malloc_r+0x1c>
 8006280:	42a9      	cmp	r1, r5
 8006282:	d904      	bls.n	800628e <_malloc_r+0x26>
 8006284:	230c      	movs	r3, #12
 8006286:	6033      	str	r3, [r6, #0]
 8006288:	2000      	movs	r0, #0
 800628a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800628e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006364 <_malloc_r+0xfc>
 8006292:	f000 f869 	bl	8006368 <__malloc_lock>
 8006296:	f8d8 3000 	ldr.w	r3, [r8]
 800629a:	461c      	mov	r4, r3
 800629c:	bb44      	cbnz	r4, 80062f0 <_malloc_r+0x88>
 800629e:	4629      	mov	r1, r5
 80062a0:	4630      	mov	r0, r6
 80062a2:	f7ff ffbf 	bl	8006224 <sbrk_aligned>
 80062a6:	1c43      	adds	r3, r0, #1
 80062a8:	4604      	mov	r4, r0
 80062aa:	d158      	bne.n	800635e <_malloc_r+0xf6>
 80062ac:	f8d8 4000 	ldr.w	r4, [r8]
 80062b0:	4627      	mov	r7, r4
 80062b2:	2f00      	cmp	r7, #0
 80062b4:	d143      	bne.n	800633e <_malloc_r+0xd6>
 80062b6:	2c00      	cmp	r4, #0
 80062b8:	d04b      	beq.n	8006352 <_malloc_r+0xea>
 80062ba:	6823      	ldr	r3, [r4, #0]
 80062bc:	4639      	mov	r1, r7
 80062be:	4630      	mov	r0, r6
 80062c0:	eb04 0903 	add.w	r9, r4, r3
 80062c4:	f000 fe60 	bl	8006f88 <_sbrk_r>
 80062c8:	4581      	cmp	r9, r0
 80062ca:	d142      	bne.n	8006352 <_malloc_r+0xea>
 80062cc:	6821      	ldr	r1, [r4, #0]
 80062ce:	1a6d      	subs	r5, r5, r1
 80062d0:	4629      	mov	r1, r5
 80062d2:	4630      	mov	r0, r6
 80062d4:	f7ff ffa6 	bl	8006224 <sbrk_aligned>
 80062d8:	3001      	adds	r0, #1
 80062da:	d03a      	beq.n	8006352 <_malloc_r+0xea>
 80062dc:	6823      	ldr	r3, [r4, #0]
 80062de:	442b      	add	r3, r5
 80062e0:	6023      	str	r3, [r4, #0]
 80062e2:	f8d8 3000 	ldr.w	r3, [r8]
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	bb62      	cbnz	r2, 8006344 <_malloc_r+0xdc>
 80062ea:	f8c8 7000 	str.w	r7, [r8]
 80062ee:	e00f      	b.n	8006310 <_malloc_r+0xa8>
 80062f0:	6822      	ldr	r2, [r4, #0]
 80062f2:	1b52      	subs	r2, r2, r5
 80062f4:	d420      	bmi.n	8006338 <_malloc_r+0xd0>
 80062f6:	2a0b      	cmp	r2, #11
 80062f8:	d917      	bls.n	800632a <_malloc_r+0xc2>
 80062fa:	1961      	adds	r1, r4, r5
 80062fc:	42a3      	cmp	r3, r4
 80062fe:	6025      	str	r5, [r4, #0]
 8006300:	bf18      	it	ne
 8006302:	6059      	strne	r1, [r3, #4]
 8006304:	6863      	ldr	r3, [r4, #4]
 8006306:	bf08      	it	eq
 8006308:	f8c8 1000 	streq.w	r1, [r8]
 800630c:	5162      	str	r2, [r4, r5]
 800630e:	604b      	str	r3, [r1, #4]
 8006310:	4630      	mov	r0, r6
 8006312:	f000 f82f 	bl	8006374 <__malloc_unlock>
 8006316:	f104 000b 	add.w	r0, r4, #11
 800631a:	1d23      	adds	r3, r4, #4
 800631c:	f020 0007 	bic.w	r0, r0, #7
 8006320:	1ac2      	subs	r2, r0, r3
 8006322:	bf1c      	itt	ne
 8006324:	1a1b      	subne	r3, r3, r0
 8006326:	50a3      	strne	r3, [r4, r2]
 8006328:	e7af      	b.n	800628a <_malloc_r+0x22>
 800632a:	6862      	ldr	r2, [r4, #4]
 800632c:	42a3      	cmp	r3, r4
 800632e:	bf0c      	ite	eq
 8006330:	f8c8 2000 	streq.w	r2, [r8]
 8006334:	605a      	strne	r2, [r3, #4]
 8006336:	e7eb      	b.n	8006310 <_malloc_r+0xa8>
 8006338:	4623      	mov	r3, r4
 800633a:	6864      	ldr	r4, [r4, #4]
 800633c:	e7ae      	b.n	800629c <_malloc_r+0x34>
 800633e:	463c      	mov	r4, r7
 8006340:	687f      	ldr	r7, [r7, #4]
 8006342:	e7b6      	b.n	80062b2 <_malloc_r+0x4a>
 8006344:	461a      	mov	r2, r3
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	42a3      	cmp	r3, r4
 800634a:	d1fb      	bne.n	8006344 <_malloc_r+0xdc>
 800634c:	2300      	movs	r3, #0
 800634e:	6053      	str	r3, [r2, #4]
 8006350:	e7de      	b.n	8006310 <_malloc_r+0xa8>
 8006352:	230c      	movs	r3, #12
 8006354:	6033      	str	r3, [r6, #0]
 8006356:	4630      	mov	r0, r6
 8006358:	f000 f80c 	bl	8006374 <__malloc_unlock>
 800635c:	e794      	b.n	8006288 <_malloc_r+0x20>
 800635e:	6005      	str	r5, [r0, #0]
 8006360:	e7d6      	b.n	8006310 <_malloc_r+0xa8>
 8006362:	bf00      	nop
 8006364:	20000b3c 	.word	0x20000b3c

08006368 <__malloc_lock>:
 8006368:	4801      	ldr	r0, [pc, #4]	@ (8006370 <__malloc_lock+0x8>)
 800636a:	f7ff b8ac 	b.w	80054c6 <__retarget_lock_acquire_recursive>
 800636e:	bf00      	nop
 8006370:	20000b34 	.word	0x20000b34

08006374 <__malloc_unlock>:
 8006374:	4801      	ldr	r0, [pc, #4]	@ (800637c <__malloc_unlock+0x8>)
 8006376:	f7ff b8a7 	b.w	80054c8 <__retarget_lock_release_recursive>
 800637a:	bf00      	nop
 800637c:	20000b34 	.word	0x20000b34

08006380 <_Balloc>:
 8006380:	b570      	push	{r4, r5, r6, lr}
 8006382:	69c6      	ldr	r6, [r0, #28]
 8006384:	4604      	mov	r4, r0
 8006386:	460d      	mov	r5, r1
 8006388:	b976      	cbnz	r6, 80063a8 <_Balloc+0x28>
 800638a:	2010      	movs	r0, #16
 800638c:	f7ff ff42 	bl	8006214 <malloc>
 8006390:	4602      	mov	r2, r0
 8006392:	61e0      	str	r0, [r4, #28]
 8006394:	b920      	cbnz	r0, 80063a0 <_Balloc+0x20>
 8006396:	4b18      	ldr	r3, [pc, #96]	@ (80063f8 <_Balloc+0x78>)
 8006398:	4818      	ldr	r0, [pc, #96]	@ (80063fc <_Balloc+0x7c>)
 800639a:	216b      	movs	r1, #107	@ 0x6b
 800639c:	f000 fe04 	bl	8006fa8 <__assert_func>
 80063a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063a4:	6006      	str	r6, [r0, #0]
 80063a6:	60c6      	str	r6, [r0, #12]
 80063a8:	69e6      	ldr	r6, [r4, #28]
 80063aa:	68f3      	ldr	r3, [r6, #12]
 80063ac:	b183      	cbz	r3, 80063d0 <_Balloc+0x50>
 80063ae:	69e3      	ldr	r3, [r4, #28]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80063b6:	b9b8      	cbnz	r0, 80063e8 <_Balloc+0x68>
 80063b8:	2101      	movs	r1, #1
 80063ba:	fa01 f605 	lsl.w	r6, r1, r5
 80063be:	1d72      	adds	r2, r6, #5
 80063c0:	0092      	lsls	r2, r2, #2
 80063c2:	4620      	mov	r0, r4
 80063c4:	f000 fe0e 	bl	8006fe4 <_calloc_r>
 80063c8:	b160      	cbz	r0, 80063e4 <_Balloc+0x64>
 80063ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80063ce:	e00e      	b.n	80063ee <_Balloc+0x6e>
 80063d0:	2221      	movs	r2, #33	@ 0x21
 80063d2:	2104      	movs	r1, #4
 80063d4:	4620      	mov	r0, r4
 80063d6:	f000 fe05 	bl	8006fe4 <_calloc_r>
 80063da:	69e3      	ldr	r3, [r4, #28]
 80063dc:	60f0      	str	r0, [r6, #12]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1e4      	bne.n	80063ae <_Balloc+0x2e>
 80063e4:	2000      	movs	r0, #0
 80063e6:	bd70      	pop	{r4, r5, r6, pc}
 80063e8:	6802      	ldr	r2, [r0, #0]
 80063ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80063ee:	2300      	movs	r3, #0
 80063f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80063f4:	e7f7      	b.n	80063e6 <_Balloc+0x66>
 80063f6:	bf00      	nop
 80063f8:	080072a5 	.word	0x080072a5
 80063fc:	08007325 	.word	0x08007325

08006400 <_Bfree>:
 8006400:	b570      	push	{r4, r5, r6, lr}
 8006402:	69c6      	ldr	r6, [r0, #28]
 8006404:	4605      	mov	r5, r0
 8006406:	460c      	mov	r4, r1
 8006408:	b976      	cbnz	r6, 8006428 <_Bfree+0x28>
 800640a:	2010      	movs	r0, #16
 800640c:	f7ff ff02 	bl	8006214 <malloc>
 8006410:	4602      	mov	r2, r0
 8006412:	61e8      	str	r0, [r5, #28]
 8006414:	b920      	cbnz	r0, 8006420 <_Bfree+0x20>
 8006416:	4b09      	ldr	r3, [pc, #36]	@ (800643c <_Bfree+0x3c>)
 8006418:	4809      	ldr	r0, [pc, #36]	@ (8006440 <_Bfree+0x40>)
 800641a:	218f      	movs	r1, #143	@ 0x8f
 800641c:	f000 fdc4 	bl	8006fa8 <__assert_func>
 8006420:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006424:	6006      	str	r6, [r0, #0]
 8006426:	60c6      	str	r6, [r0, #12]
 8006428:	b13c      	cbz	r4, 800643a <_Bfree+0x3a>
 800642a:	69eb      	ldr	r3, [r5, #28]
 800642c:	6862      	ldr	r2, [r4, #4]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006434:	6021      	str	r1, [r4, #0]
 8006436:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800643a:	bd70      	pop	{r4, r5, r6, pc}
 800643c:	080072a5 	.word	0x080072a5
 8006440:	08007325 	.word	0x08007325

08006444 <__multadd>:
 8006444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006448:	690d      	ldr	r5, [r1, #16]
 800644a:	4607      	mov	r7, r0
 800644c:	460c      	mov	r4, r1
 800644e:	461e      	mov	r6, r3
 8006450:	f101 0c14 	add.w	ip, r1, #20
 8006454:	2000      	movs	r0, #0
 8006456:	f8dc 3000 	ldr.w	r3, [ip]
 800645a:	b299      	uxth	r1, r3
 800645c:	fb02 6101 	mla	r1, r2, r1, r6
 8006460:	0c1e      	lsrs	r6, r3, #16
 8006462:	0c0b      	lsrs	r3, r1, #16
 8006464:	fb02 3306 	mla	r3, r2, r6, r3
 8006468:	b289      	uxth	r1, r1
 800646a:	3001      	adds	r0, #1
 800646c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006470:	4285      	cmp	r5, r0
 8006472:	f84c 1b04 	str.w	r1, [ip], #4
 8006476:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800647a:	dcec      	bgt.n	8006456 <__multadd+0x12>
 800647c:	b30e      	cbz	r6, 80064c2 <__multadd+0x7e>
 800647e:	68a3      	ldr	r3, [r4, #8]
 8006480:	42ab      	cmp	r3, r5
 8006482:	dc19      	bgt.n	80064b8 <__multadd+0x74>
 8006484:	6861      	ldr	r1, [r4, #4]
 8006486:	4638      	mov	r0, r7
 8006488:	3101      	adds	r1, #1
 800648a:	f7ff ff79 	bl	8006380 <_Balloc>
 800648e:	4680      	mov	r8, r0
 8006490:	b928      	cbnz	r0, 800649e <__multadd+0x5a>
 8006492:	4602      	mov	r2, r0
 8006494:	4b0c      	ldr	r3, [pc, #48]	@ (80064c8 <__multadd+0x84>)
 8006496:	480d      	ldr	r0, [pc, #52]	@ (80064cc <__multadd+0x88>)
 8006498:	21ba      	movs	r1, #186	@ 0xba
 800649a:	f000 fd85 	bl	8006fa8 <__assert_func>
 800649e:	6922      	ldr	r2, [r4, #16]
 80064a0:	3202      	adds	r2, #2
 80064a2:	f104 010c 	add.w	r1, r4, #12
 80064a6:	0092      	lsls	r2, r2, #2
 80064a8:	300c      	adds	r0, #12
 80064aa:	f7ff f80e 	bl	80054ca <memcpy>
 80064ae:	4621      	mov	r1, r4
 80064b0:	4638      	mov	r0, r7
 80064b2:	f7ff ffa5 	bl	8006400 <_Bfree>
 80064b6:	4644      	mov	r4, r8
 80064b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80064bc:	3501      	adds	r5, #1
 80064be:	615e      	str	r6, [r3, #20]
 80064c0:	6125      	str	r5, [r4, #16]
 80064c2:	4620      	mov	r0, r4
 80064c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064c8:	08007314 	.word	0x08007314
 80064cc:	08007325 	.word	0x08007325

080064d0 <__hi0bits>:
 80064d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80064d4:	4603      	mov	r3, r0
 80064d6:	bf36      	itet	cc
 80064d8:	0403      	lslcc	r3, r0, #16
 80064da:	2000      	movcs	r0, #0
 80064dc:	2010      	movcc	r0, #16
 80064de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80064e2:	bf3c      	itt	cc
 80064e4:	021b      	lslcc	r3, r3, #8
 80064e6:	3008      	addcc	r0, #8
 80064e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064ec:	bf3c      	itt	cc
 80064ee:	011b      	lslcc	r3, r3, #4
 80064f0:	3004      	addcc	r0, #4
 80064f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064f6:	bf3c      	itt	cc
 80064f8:	009b      	lslcc	r3, r3, #2
 80064fa:	3002      	addcc	r0, #2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	db05      	blt.n	800650c <__hi0bits+0x3c>
 8006500:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006504:	f100 0001 	add.w	r0, r0, #1
 8006508:	bf08      	it	eq
 800650a:	2020      	moveq	r0, #32
 800650c:	4770      	bx	lr

0800650e <__lo0bits>:
 800650e:	6803      	ldr	r3, [r0, #0]
 8006510:	4602      	mov	r2, r0
 8006512:	f013 0007 	ands.w	r0, r3, #7
 8006516:	d00b      	beq.n	8006530 <__lo0bits+0x22>
 8006518:	07d9      	lsls	r1, r3, #31
 800651a:	d421      	bmi.n	8006560 <__lo0bits+0x52>
 800651c:	0798      	lsls	r0, r3, #30
 800651e:	bf49      	itett	mi
 8006520:	085b      	lsrmi	r3, r3, #1
 8006522:	089b      	lsrpl	r3, r3, #2
 8006524:	2001      	movmi	r0, #1
 8006526:	6013      	strmi	r3, [r2, #0]
 8006528:	bf5c      	itt	pl
 800652a:	6013      	strpl	r3, [r2, #0]
 800652c:	2002      	movpl	r0, #2
 800652e:	4770      	bx	lr
 8006530:	b299      	uxth	r1, r3
 8006532:	b909      	cbnz	r1, 8006538 <__lo0bits+0x2a>
 8006534:	0c1b      	lsrs	r3, r3, #16
 8006536:	2010      	movs	r0, #16
 8006538:	b2d9      	uxtb	r1, r3
 800653a:	b909      	cbnz	r1, 8006540 <__lo0bits+0x32>
 800653c:	3008      	adds	r0, #8
 800653e:	0a1b      	lsrs	r3, r3, #8
 8006540:	0719      	lsls	r1, r3, #28
 8006542:	bf04      	itt	eq
 8006544:	091b      	lsreq	r3, r3, #4
 8006546:	3004      	addeq	r0, #4
 8006548:	0799      	lsls	r1, r3, #30
 800654a:	bf04      	itt	eq
 800654c:	089b      	lsreq	r3, r3, #2
 800654e:	3002      	addeq	r0, #2
 8006550:	07d9      	lsls	r1, r3, #31
 8006552:	d403      	bmi.n	800655c <__lo0bits+0x4e>
 8006554:	085b      	lsrs	r3, r3, #1
 8006556:	f100 0001 	add.w	r0, r0, #1
 800655a:	d003      	beq.n	8006564 <__lo0bits+0x56>
 800655c:	6013      	str	r3, [r2, #0]
 800655e:	4770      	bx	lr
 8006560:	2000      	movs	r0, #0
 8006562:	4770      	bx	lr
 8006564:	2020      	movs	r0, #32
 8006566:	4770      	bx	lr

08006568 <__i2b>:
 8006568:	b510      	push	{r4, lr}
 800656a:	460c      	mov	r4, r1
 800656c:	2101      	movs	r1, #1
 800656e:	f7ff ff07 	bl	8006380 <_Balloc>
 8006572:	4602      	mov	r2, r0
 8006574:	b928      	cbnz	r0, 8006582 <__i2b+0x1a>
 8006576:	4b05      	ldr	r3, [pc, #20]	@ (800658c <__i2b+0x24>)
 8006578:	4805      	ldr	r0, [pc, #20]	@ (8006590 <__i2b+0x28>)
 800657a:	f240 1145 	movw	r1, #325	@ 0x145
 800657e:	f000 fd13 	bl	8006fa8 <__assert_func>
 8006582:	2301      	movs	r3, #1
 8006584:	6144      	str	r4, [r0, #20]
 8006586:	6103      	str	r3, [r0, #16]
 8006588:	bd10      	pop	{r4, pc}
 800658a:	bf00      	nop
 800658c:	08007314 	.word	0x08007314
 8006590:	08007325 	.word	0x08007325

08006594 <__multiply>:
 8006594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006598:	4614      	mov	r4, r2
 800659a:	690a      	ldr	r2, [r1, #16]
 800659c:	6923      	ldr	r3, [r4, #16]
 800659e:	429a      	cmp	r2, r3
 80065a0:	bfa8      	it	ge
 80065a2:	4623      	movge	r3, r4
 80065a4:	460f      	mov	r7, r1
 80065a6:	bfa4      	itt	ge
 80065a8:	460c      	movge	r4, r1
 80065aa:	461f      	movge	r7, r3
 80065ac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80065b0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80065b4:	68a3      	ldr	r3, [r4, #8]
 80065b6:	6861      	ldr	r1, [r4, #4]
 80065b8:	eb0a 0609 	add.w	r6, sl, r9
 80065bc:	42b3      	cmp	r3, r6
 80065be:	b085      	sub	sp, #20
 80065c0:	bfb8      	it	lt
 80065c2:	3101      	addlt	r1, #1
 80065c4:	f7ff fedc 	bl	8006380 <_Balloc>
 80065c8:	b930      	cbnz	r0, 80065d8 <__multiply+0x44>
 80065ca:	4602      	mov	r2, r0
 80065cc:	4b44      	ldr	r3, [pc, #272]	@ (80066e0 <__multiply+0x14c>)
 80065ce:	4845      	ldr	r0, [pc, #276]	@ (80066e4 <__multiply+0x150>)
 80065d0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80065d4:	f000 fce8 	bl	8006fa8 <__assert_func>
 80065d8:	f100 0514 	add.w	r5, r0, #20
 80065dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80065e0:	462b      	mov	r3, r5
 80065e2:	2200      	movs	r2, #0
 80065e4:	4543      	cmp	r3, r8
 80065e6:	d321      	bcc.n	800662c <__multiply+0x98>
 80065e8:	f107 0114 	add.w	r1, r7, #20
 80065ec:	f104 0214 	add.w	r2, r4, #20
 80065f0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80065f4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80065f8:	9302      	str	r3, [sp, #8]
 80065fa:	1b13      	subs	r3, r2, r4
 80065fc:	3b15      	subs	r3, #21
 80065fe:	f023 0303 	bic.w	r3, r3, #3
 8006602:	3304      	adds	r3, #4
 8006604:	f104 0715 	add.w	r7, r4, #21
 8006608:	42ba      	cmp	r2, r7
 800660a:	bf38      	it	cc
 800660c:	2304      	movcc	r3, #4
 800660e:	9301      	str	r3, [sp, #4]
 8006610:	9b02      	ldr	r3, [sp, #8]
 8006612:	9103      	str	r1, [sp, #12]
 8006614:	428b      	cmp	r3, r1
 8006616:	d80c      	bhi.n	8006632 <__multiply+0x9e>
 8006618:	2e00      	cmp	r6, #0
 800661a:	dd03      	ble.n	8006624 <__multiply+0x90>
 800661c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006620:	2b00      	cmp	r3, #0
 8006622:	d05b      	beq.n	80066dc <__multiply+0x148>
 8006624:	6106      	str	r6, [r0, #16]
 8006626:	b005      	add	sp, #20
 8006628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800662c:	f843 2b04 	str.w	r2, [r3], #4
 8006630:	e7d8      	b.n	80065e4 <__multiply+0x50>
 8006632:	f8b1 a000 	ldrh.w	sl, [r1]
 8006636:	f1ba 0f00 	cmp.w	sl, #0
 800663a:	d024      	beq.n	8006686 <__multiply+0xf2>
 800663c:	f104 0e14 	add.w	lr, r4, #20
 8006640:	46a9      	mov	r9, r5
 8006642:	f04f 0c00 	mov.w	ip, #0
 8006646:	f85e 7b04 	ldr.w	r7, [lr], #4
 800664a:	f8d9 3000 	ldr.w	r3, [r9]
 800664e:	fa1f fb87 	uxth.w	fp, r7
 8006652:	b29b      	uxth	r3, r3
 8006654:	fb0a 330b 	mla	r3, sl, fp, r3
 8006658:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800665c:	f8d9 7000 	ldr.w	r7, [r9]
 8006660:	4463      	add	r3, ip
 8006662:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006666:	fb0a c70b 	mla	r7, sl, fp, ip
 800666a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800666e:	b29b      	uxth	r3, r3
 8006670:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006674:	4572      	cmp	r2, lr
 8006676:	f849 3b04 	str.w	r3, [r9], #4
 800667a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800667e:	d8e2      	bhi.n	8006646 <__multiply+0xb2>
 8006680:	9b01      	ldr	r3, [sp, #4]
 8006682:	f845 c003 	str.w	ip, [r5, r3]
 8006686:	9b03      	ldr	r3, [sp, #12]
 8006688:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800668c:	3104      	adds	r1, #4
 800668e:	f1b9 0f00 	cmp.w	r9, #0
 8006692:	d021      	beq.n	80066d8 <__multiply+0x144>
 8006694:	682b      	ldr	r3, [r5, #0]
 8006696:	f104 0c14 	add.w	ip, r4, #20
 800669a:	46ae      	mov	lr, r5
 800669c:	f04f 0a00 	mov.w	sl, #0
 80066a0:	f8bc b000 	ldrh.w	fp, [ip]
 80066a4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80066a8:	fb09 770b 	mla	r7, r9, fp, r7
 80066ac:	4457      	add	r7, sl
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80066b4:	f84e 3b04 	str.w	r3, [lr], #4
 80066b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80066bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066c0:	f8be 3000 	ldrh.w	r3, [lr]
 80066c4:	fb09 330a 	mla	r3, r9, sl, r3
 80066c8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80066cc:	4562      	cmp	r2, ip
 80066ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066d2:	d8e5      	bhi.n	80066a0 <__multiply+0x10c>
 80066d4:	9f01      	ldr	r7, [sp, #4]
 80066d6:	51eb      	str	r3, [r5, r7]
 80066d8:	3504      	adds	r5, #4
 80066da:	e799      	b.n	8006610 <__multiply+0x7c>
 80066dc:	3e01      	subs	r6, #1
 80066de:	e79b      	b.n	8006618 <__multiply+0x84>
 80066e0:	08007314 	.word	0x08007314
 80066e4:	08007325 	.word	0x08007325

080066e8 <__pow5mult>:
 80066e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066ec:	4615      	mov	r5, r2
 80066ee:	f012 0203 	ands.w	r2, r2, #3
 80066f2:	4607      	mov	r7, r0
 80066f4:	460e      	mov	r6, r1
 80066f6:	d007      	beq.n	8006708 <__pow5mult+0x20>
 80066f8:	4c25      	ldr	r4, [pc, #148]	@ (8006790 <__pow5mult+0xa8>)
 80066fa:	3a01      	subs	r2, #1
 80066fc:	2300      	movs	r3, #0
 80066fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006702:	f7ff fe9f 	bl	8006444 <__multadd>
 8006706:	4606      	mov	r6, r0
 8006708:	10ad      	asrs	r5, r5, #2
 800670a:	d03d      	beq.n	8006788 <__pow5mult+0xa0>
 800670c:	69fc      	ldr	r4, [r7, #28]
 800670e:	b97c      	cbnz	r4, 8006730 <__pow5mult+0x48>
 8006710:	2010      	movs	r0, #16
 8006712:	f7ff fd7f 	bl	8006214 <malloc>
 8006716:	4602      	mov	r2, r0
 8006718:	61f8      	str	r0, [r7, #28]
 800671a:	b928      	cbnz	r0, 8006728 <__pow5mult+0x40>
 800671c:	4b1d      	ldr	r3, [pc, #116]	@ (8006794 <__pow5mult+0xac>)
 800671e:	481e      	ldr	r0, [pc, #120]	@ (8006798 <__pow5mult+0xb0>)
 8006720:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006724:	f000 fc40 	bl	8006fa8 <__assert_func>
 8006728:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800672c:	6004      	str	r4, [r0, #0]
 800672e:	60c4      	str	r4, [r0, #12]
 8006730:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006734:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006738:	b94c      	cbnz	r4, 800674e <__pow5mult+0x66>
 800673a:	f240 2171 	movw	r1, #625	@ 0x271
 800673e:	4638      	mov	r0, r7
 8006740:	f7ff ff12 	bl	8006568 <__i2b>
 8006744:	2300      	movs	r3, #0
 8006746:	f8c8 0008 	str.w	r0, [r8, #8]
 800674a:	4604      	mov	r4, r0
 800674c:	6003      	str	r3, [r0, #0]
 800674e:	f04f 0900 	mov.w	r9, #0
 8006752:	07eb      	lsls	r3, r5, #31
 8006754:	d50a      	bpl.n	800676c <__pow5mult+0x84>
 8006756:	4631      	mov	r1, r6
 8006758:	4622      	mov	r2, r4
 800675a:	4638      	mov	r0, r7
 800675c:	f7ff ff1a 	bl	8006594 <__multiply>
 8006760:	4631      	mov	r1, r6
 8006762:	4680      	mov	r8, r0
 8006764:	4638      	mov	r0, r7
 8006766:	f7ff fe4b 	bl	8006400 <_Bfree>
 800676a:	4646      	mov	r6, r8
 800676c:	106d      	asrs	r5, r5, #1
 800676e:	d00b      	beq.n	8006788 <__pow5mult+0xa0>
 8006770:	6820      	ldr	r0, [r4, #0]
 8006772:	b938      	cbnz	r0, 8006784 <__pow5mult+0x9c>
 8006774:	4622      	mov	r2, r4
 8006776:	4621      	mov	r1, r4
 8006778:	4638      	mov	r0, r7
 800677a:	f7ff ff0b 	bl	8006594 <__multiply>
 800677e:	6020      	str	r0, [r4, #0]
 8006780:	f8c0 9000 	str.w	r9, [r0]
 8006784:	4604      	mov	r4, r0
 8006786:	e7e4      	b.n	8006752 <__pow5mult+0x6a>
 8006788:	4630      	mov	r0, r6
 800678a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800678e:	bf00      	nop
 8006790:	08007380 	.word	0x08007380
 8006794:	080072a5 	.word	0x080072a5
 8006798:	08007325 	.word	0x08007325

0800679c <__lshift>:
 800679c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067a0:	460c      	mov	r4, r1
 80067a2:	6849      	ldr	r1, [r1, #4]
 80067a4:	6923      	ldr	r3, [r4, #16]
 80067a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80067aa:	68a3      	ldr	r3, [r4, #8]
 80067ac:	4607      	mov	r7, r0
 80067ae:	4691      	mov	r9, r2
 80067b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80067b4:	f108 0601 	add.w	r6, r8, #1
 80067b8:	42b3      	cmp	r3, r6
 80067ba:	db0b      	blt.n	80067d4 <__lshift+0x38>
 80067bc:	4638      	mov	r0, r7
 80067be:	f7ff fddf 	bl	8006380 <_Balloc>
 80067c2:	4605      	mov	r5, r0
 80067c4:	b948      	cbnz	r0, 80067da <__lshift+0x3e>
 80067c6:	4602      	mov	r2, r0
 80067c8:	4b28      	ldr	r3, [pc, #160]	@ (800686c <__lshift+0xd0>)
 80067ca:	4829      	ldr	r0, [pc, #164]	@ (8006870 <__lshift+0xd4>)
 80067cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80067d0:	f000 fbea 	bl	8006fa8 <__assert_func>
 80067d4:	3101      	adds	r1, #1
 80067d6:	005b      	lsls	r3, r3, #1
 80067d8:	e7ee      	b.n	80067b8 <__lshift+0x1c>
 80067da:	2300      	movs	r3, #0
 80067dc:	f100 0114 	add.w	r1, r0, #20
 80067e0:	f100 0210 	add.w	r2, r0, #16
 80067e4:	4618      	mov	r0, r3
 80067e6:	4553      	cmp	r3, sl
 80067e8:	db33      	blt.n	8006852 <__lshift+0xb6>
 80067ea:	6920      	ldr	r0, [r4, #16]
 80067ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067f0:	f104 0314 	add.w	r3, r4, #20
 80067f4:	f019 091f 	ands.w	r9, r9, #31
 80067f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80067fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006800:	d02b      	beq.n	800685a <__lshift+0xbe>
 8006802:	f1c9 0e20 	rsb	lr, r9, #32
 8006806:	468a      	mov	sl, r1
 8006808:	2200      	movs	r2, #0
 800680a:	6818      	ldr	r0, [r3, #0]
 800680c:	fa00 f009 	lsl.w	r0, r0, r9
 8006810:	4310      	orrs	r0, r2
 8006812:	f84a 0b04 	str.w	r0, [sl], #4
 8006816:	f853 2b04 	ldr.w	r2, [r3], #4
 800681a:	459c      	cmp	ip, r3
 800681c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006820:	d8f3      	bhi.n	800680a <__lshift+0x6e>
 8006822:	ebac 0304 	sub.w	r3, ip, r4
 8006826:	3b15      	subs	r3, #21
 8006828:	f023 0303 	bic.w	r3, r3, #3
 800682c:	3304      	adds	r3, #4
 800682e:	f104 0015 	add.w	r0, r4, #21
 8006832:	4584      	cmp	ip, r0
 8006834:	bf38      	it	cc
 8006836:	2304      	movcc	r3, #4
 8006838:	50ca      	str	r2, [r1, r3]
 800683a:	b10a      	cbz	r2, 8006840 <__lshift+0xa4>
 800683c:	f108 0602 	add.w	r6, r8, #2
 8006840:	3e01      	subs	r6, #1
 8006842:	4638      	mov	r0, r7
 8006844:	612e      	str	r6, [r5, #16]
 8006846:	4621      	mov	r1, r4
 8006848:	f7ff fdda 	bl	8006400 <_Bfree>
 800684c:	4628      	mov	r0, r5
 800684e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006852:	f842 0f04 	str.w	r0, [r2, #4]!
 8006856:	3301      	adds	r3, #1
 8006858:	e7c5      	b.n	80067e6 <__lshift+0x4a>
 800685a:	3904      	subs	r1, #4
 800685c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006860:	f841 2f04 	str.w	r2, [r1, #4]!
 8006864:	459c      	cmp	ip, r3
 8006866:	d8f9      	bhi.n	800685c <__lshift+0xc0>
 8006868:	e7ea      	b.n	8006840 <__lshift+0xa4>
 800686a:	bf00      	nop
 800686c:	08007314 	.word	0x08007314
 8006870:	08007325 	.word	0x08007325

08006874 <__mcmp>:
 8006874:	690a      	ldr	r2, [r1, #16]
 8006876:	4603      	mov	r3, r0
 8006878:	6900      	ldr	r0, [r0, #16]
 800687a:	1a80      	subs	r0, r0, r2
 800687c:	b530      	push	{r4, r5, lr}
 800687e:	d10e      	bne.n	800689e <__mcmp+0x2a>
 8006880:	3314      	adds	r3, #20
 8006882:	3114      	adds	r1, #20
 8006884:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006888:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800688c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006890:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006894:	4295      	cmp	r5, r2
 8006896:	d003      	beq.n	80068a0 <__mcmp+0x2c>
 8006898:	d205      	bcs.n	80068a6 <__mcmp+0x32>
 800689a:	f04f 30ff 	mov.w	r0, #4294967295
 800689e:	bd30      	pop	{r4, r5, pc}
 80068a0:	42a3      	cmp	r3, r4
 80068a2:	d3f3      	bcc.n	800688c <__mcmp+0x18>
 80068a4:	e7fb      	b.n	800689e <__mcmp+0x2a>
 80068a6:	2001      	movs	r0, #1
 80068a8:	e7f9      	b.n	800689e <__mcmp+0x2a>
	...

080068ac <__mdiff>:
 80068ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b0:	4689      	mov	r9, r1
 80068b2:	4606      	mov	r6, r0
 80068b4:	4611      	mov	r1, r2
 80068b6:	4648      	mov	r0, r9
 80068b8:	4614      	mov	r4, r2
 80068ba:	f7ff ffdb 	bl	8006874 <__mcmp>
 80068be:	1e05      	subs	r5, r0, #0
 80068c0:	d112      	bne.n	80068e8 <__mdiff+0x3c>
 80068c2:	4629      	mov	r1, r5
 80068c4:	4630      	mov	r0, r6
 80068c6:	f7ff fd5b 	bl	8006380 <_Balloc>
 80068ca:	4602      	mov	r2, r0
 80068cc:	b928      	cbnz	r0, 80068da <__mdiff+0x2e>
 80068ce:	4b3f      	ldr	r3, [pc, #252]	@ (80069cc <__mdiff+0x120>)
 80068d0:	f240 2137 	movw	r1, #567	@ 0x237
 80068d4:	483e      	ldr	r0, [pc, #248]	@ (80069d0 <__mdiff+0x124>)
 80068d6:	f000 fb67 	bl	8006fa8 <__assert_func>
 80068da:	2301      	movs	r3, #1
 80068dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80068e0:	4610      	mov	r0, r2
 80068e2:	b003      	add	sp, #12
 80068e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e8:	bfbc      	itt	lt
 80068ea:	464b      	movlt	r3, r9
 80068ec:	46a1      	movlt	r9, r4
 80068ee:	4630      	mov	r0, r6
 80068f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80068f4:	bfba      	itte	lt
 80068f6:	461c      	movlt	r4, r3
 80068f8:	2501      	movlt	r5, #1
 80068fa:	2500      	movge	r5, #0
 80068fc:	f7ff fd40 	bl	8006380 <_Balloc>
 8006900:	4602      	mov	r2, r0
 8006902:	b918      	cbnz	r0, 800690c <__mdiff+0x60>
 8006904:	4b31      	ldr	r3, [pc, #196]	@ (80069cc <__mdiff+0x120>)
 8006906:	f240 2145 	movw	r1, #581	@ 0x245
 800690a:	e7e3      	b.n	80068d4 <__mdiff+0x28>
 800690c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006910:	6926      	ldr	r6, [r4, #16]
 8006912:	60c5      	str	r5, [r0, #12]
 8006914:	f109 0310 	add.w	r3, r9, #16
 8006918:	f109 0514 	add.w	r5, r9, #20
 800691c:	f104 0e14 	add.w	lr, r4, #20
 8006920:	f100 0b14 	add.w	fp, r0, #20
 8006924:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006928:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800692c:	9301      	str	r3, [sp, #4]
 800692e:	46d9      	mov	r9, fp
 8006930:	f04f 0c00 	mov.w	ip, #0
 8006934:	9b01      	ldr	r3, [sp, #4]
 8006936:	f85e 0b04 	ldr.w	r0, [lr], #4
 800693a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800693e:	9301      	str	r3, [sp, #4]
 8006940:	fa1f f38a 	uxth.w	r3, sl
 8006944:	4619      	mov	r1, r3
 8006946:	b283      	uxth	r3, r0
 8006948:	1acb      	subs	r3, r1, r3
 800694a:	0c00      	lsrs	r0, r0, #16
 800694c:	4463      	add	r3, ip
 800694e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006952:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006956:	b29b      	uxth	r3, r3
 8006958:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800695c:	4576      	cmp	r6, lr
 800695e:	f849 3b04 	str.w	r3, [r9], #4
 8006962:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006966:	d8e5      	bhi.n	8006934 <__mdiff+0x88>
 8006968:	1b33      	subs	r3, r6, r4
 800696a:	3b15      	subs	r3, #21
 800696c:	f023 0303 	bic.w	r3, r3, #3
 8006970:	3415      	adds	r4, #21
 8006972:	3304      	adds	r3, #4
 8006974:	42a6      	cmp	r6, r4
 8006976:	bf38      	it	cc
 8006978:	2304      	movcc	r3, #4
 800697a:	441d      	add	r5, r3
 800697c:	445b      	add	r3, fp
 800697e:	461e      	mov	r6, r3
 8006980:	462c      	mov	r4, r5
 8006982:	4544      	cmp	r4, r8
 8006984:	d30e      	bcc.n	80069a4 <__mdiff+0xf8>
 8006986:	f108 0103 	add.w	r1, r8, #3
 800698a:	1b49      	subs	r1, r1, r5
 800698c:	f021 0103 	bic.w	r1, r1, #3
 8006990:	3d03      	subs	r5, #3
 8006992:	45a8      	cmp	r8, r5
 8006994:	bf38      	it	cc
 8006996:	2100      	movcc	r1, #0
 8006998:	440b      	add	r3, r1
 800699a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800699e:	b191      	cbz	r1, 80069c6 <__mdiff+0x11a>
 80069a0:	6117      	str	r7, [r2, #16]
 80069a2:	e79d      	b.n	80068e0 <__mdiff+0x34>
 80069a4:	f854 1b04 	ldr.w	r1, [r4], #4
 80069a8:	46e6      	mov	lr, ip
 80069aa:	0c08      	lsrs	r0, r1, #16
 80069ac:	fa1c fc81 	uxtah	ip, ip, r1
 80069b0:	4471      	add	r1, lr
 80069b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80069b6:	b289      	uxth	r1, r1
 80069b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80069bc:	f846 1b04 	str.w	r1, [r6], #4
 80069c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80069c4:	e7dd      	b.n	8006982 <__mdiff+0xd6>
 80069c6:	3f01      	subs	r7, #1
 80069c8:	e7e7      	b.n	800699a <__mdiff+0xee>
 80069ca:	bf00      	nop
 80069cc:	08007314 	.word	0x08007314
 80069d0:	08007325 	.word	0x08007325

080069d4 <__d2b>:
 80069d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80069d8:	460f      	mov	r7, r1
 80069da:	2101      	movs	r1, #1
 80069dc:	ec59 8b10 	vmov	r8, r9, d0
 80069e0:	4616      	mov	r6, r2
 80069e2:	f7ff fccd 	bl	8006380 <_Balloc>
 80069e6:	4604      	mov	r4, r0
 80069e8:	b930      	cbnz	r0, 80069f8 <__d2b+0x24>
 80069ea:	4602      	mov	r2, r0
 80069ec:	4b23      	ldr	r3, [pc, #140]	@ (8006a7c <__d2b+0xa8>)
 80069ee:	4824      	ldr	r0, [pc, #144]	@ (8006a80 <__d2b+0xac>)
 80069f0:	f240 310f 	movw	r1, #783	@ 0x30f
 80069f4:	f000 fad8 	bl	8006fa8 <__assert_func>
 80069f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80069fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a00:	b10d      	cbz	r5, 8006a06 <__d2b+0x32>
 8006a02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a06:	9301      	str	r3, [sp, #4]
 8006a08:	f1b8 0300 	subs.w	r3, r8, #0
 8006a0c:	d023      	beq.n	8006a56 <__d2b+0x82>
 8006a0e:	4668      	mov	r0, sp
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	f7ff fd7c 	bl	800650e <__lo0bits>
 8006a16:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006a1a:	b1d0      	cbz	r0, 8006a52 <__d2b+0x7e>
 8006a1c:	f1c0 0320 	rsb	r3, r0, #32
 8006a20:	fa02 f303 	lsl.w	r3, r2, r3
 8006a24:	430b      	orrs	r3, r1
 8006a26:	40c2      	lsrs	r2, r0
 8006a28:	6163      	str	r3, [r4, #20]
 8006a2a:	9201      	str	r2, [sp, #4]
 8006a2c:	9b01      	ldr	r3, [sp, #4]
 8006a2e:	61a3      	str	r3, [r4, #24]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	bf0c      	ite	eq
 8006a34:	2201      	moveq	r2, #1
 8006a36:	2202      	movne	r2, #2
 8006a38:	6122      	str	r2, [r4, #16]
 8006a3a:	b1a5      	cbz	r5, 8006a66 <__d2b+0x92>
 8006a3c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006a40:	4405      	add	r5, r0
 8006a42:	603d      	str	r5, [r7, #0]
 8006a44:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006a48:	6030      	str	r0, [r6, #0]
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	b003      	add	sp, #12
 8006a4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a52:	6161      	str	r1, [r4, #20]
 8006a54:	e7ea      	b.n	8006a2c <__d2b+0x58>
 8006a56:	a801      	add	r0, sp, #4
 8006a58:	f7ff fd59 	bl	800650e <__lo0bits>
 8006a5c:	9b01      	ldr	r3, [sp, #4]
 8006a5e:	6163      	str	r3, [r4, #20]
 8006a60:	3020      	adds	r0, #32
 8006a62:	2201      	movs	r2, #1
 8006a64:	e7e8      	b.n	8006a38 <__d2b+0x64>
 8006a66:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006a6a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006a6e:	6038      	str	r0, [r7, #0]
 8006a70:	6918      	ldr	r0, [r3, #16]
 8006a72:	f7ff fd2d 	bl	80064d0 <__hi0bits>
 8006a76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006a7a:	e7e5      	b.n	8006a48 <__d2b+0x74>
 8006a7c:	08007314 	.word	0x08007314
 8006a80:	08007325 	.word	0x08007325

08006a84 <__sfputc_r>:
 8006a84:	6893      	ldr	r3, [r2, #8]
 8006a86:	3b01      	subs	r3, #1
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	b410      	push	{r4}
 8006a8c:	6093      	str	r3, [r2, #8]
 8006a8e:	da08      	bge.n	8006aa2 <__sfputc_r+0x1e>
 8006a90:	6994      	ldr	r4, [r2, #24]
 8006a92:	42a3      	cmp	r3, r4
 8006a94:	db01      	blt.n	8006a9a <__sfputc_r+0x16>
 8006a96:	290a      	cmp	r1, #10
 8006a98:	d103      	bne.n	8006aa2 <__sfputc_r+0x1e>
 8006a9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a9e:	f000 b9df 	b.w	8006e60 <__swbuf_r>
 8006aa2:	6813      	ldr	r3, [r2, #0]
 8006aa4:	1c58      	adds	r0, r3, #1
 8006aa6:	6010      	str	r0, [r2, #0]
 8006aa8:	7019      	strb	r1, [r3, #0]
 8006aaa:	4608      	mov	r0, r1
 8006aac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <__sfputs_r>:
 8006ab2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab4:	4606      	mov	r6, r0
 8006ab6:	460f      	mov	r7, r1
 8006ab8:	4614      	mov	r4, r2
 8006aba:	18d5      	adds	r5, r2, r3
 8006abc:	42ac      	cmp	r4, r5
 8006abe:	d101      	bne.n	8006ac4 <__sfputs_r+0x12>
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	e007      	b.n	8006ad4 <__sfputs_r+0x22>
 8006ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ac8:	463a      	mov	r2, r7
 8006aca:	4630      	mov	r0, r6
 8006acc:	f7ff ffda 	bl	8006a84 <__sfputc_r>
 8006ad0:	1c43      	adds	r3, r0, #1
 8006ad2:	d1f3      	bne.n	8006abc <__sfputs_r+0xa>
 8006ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ad8 <_vfiprintf_r>:
 8006ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006adc:	460d      	mov	r5, r1
 8006ade:	b09d      	sub	sp, #116	@ 0x74
 8006ae0:	4614      	mov	r4, r2
 8006ae2:	4698      	mov	r8, r3
 8006ae4:	4606      	mov	r6, r0
 8006ae6:	b118      	cbz	r0, 8006af0 <_vfiprintf_r+0x18>
 8006ae8:	6a03      	ldr	r3, [r0, #32]
 8006aea:	b90b      	cbnz	r3, 8006af0 <_vfiprintf_r+0x18>
 8006aec:	f7fe fbe2 	bl	80052b4 <__sinit>
 8006af0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006af2:	07d9      	lsls	r1, r3, #31
 8006af4:	d405      	bmi.n	8006b02 <_vfiprintf_r+0x2a>
 8006af6:	89ab      	ldrh	r3, [r5, #12]
 8006af8:	059a      	lsls	r2, r3, #22
 8006afa:	d402      	bmi.n	8006b02 <_vfiprintf_r+0x2a>
 8006afc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006afe:	f7fe fce2 	bl	80054c6 <__retarget_lock_acquire_recursive>
 8006b02:	89ab      	ldrh	r3, [r5, #12]
 8006b04:	071b      	lsls	r3, r3, #28
 8006b06:	d501      	bpl.n	8006b0c <_vfiprintf_r+0x34>
 8006b08:	692b      	ldr	r3, [r5, #16]
 8006b0a:	b99b      	cbnz	r3, 8006b34 <_vfiprintf_r+0x5c>
 8006b0c:	4629      	mov	r1, r5
 8006b0e:	4630      	mov	r0, r6
 8006b10:	f000 f9e4 	bl	8006edc <__swsetup_r>
 8006b14:	b170      	cbz	r0, 8006b34 <_vfiprintf_r+0x5c>
 8006b16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b18:	07dc      	lsls	r4, r3, #31
 8006b1a:	d504      	bpl.n	8006b26 <_vfiprintf_r+0x4e>
 8006b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b20:	b01d      	add	sp, #116	@ 0x74
 8006b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b26:	89ab      	ldrh	r3, [r5, #12]
 8006b28:	0598      	lsls	r0, r3, #22
 8006b2a:	d4f7      	bmi.n	8006b1c <_vfiprintf_r+0x44>
 8006b2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b2e:	f7fe fccb 	bl	80054c8 <__retarget_lock_release_recursive>
 8006b32:	e7f3      	b.n	8006b1c <_vfiprintf_r+0x44>
 8006b34:	2300      	movs	r3, #0
 8006b36:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b38:	2320      	movs	r3, #32
 8006b3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b42:	2330      	movs	r3, #48	@ 0x30
 8006b44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006cf4 <_vfiprintf_r+0x21c>
 8006b48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b4c:	f04f 0901 	mov.w	r9, #1
 8006b50:	4623      	mov	r3, r4
 8006b52:	469a      	mov	sl, r3
 8006b54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b58:	b10a      	cbz	r2, 8006b5e <_vfiprintf_r+0x86>
 8006b5a:	2a25      	cmp	r2, #37	@ 0x25
 8006b5c:	d1f9      	bne.n	8006b52 <_vfiprintf_r+0x7a>
 8006b5e:	ebba 0b04 	subs.w	fp, sl, r4
 8006b62:	d00b      	beq.n	8006b7c <_vfiprintf_r+0xa4>
 8006b64:	465b      	mov	r3, fp
 8006b66:	4622      	mov	r2, r4
 8006b68:	4629      	mov	r1, r5
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	f7ff ffa1 	bl	8006ab2 <__sfputs_r>
 8006b70:	3001      	adds	r0, #1
 8006b72:	f000 80a7 	beq.w	8006cc4 <_vfiprintf_r+0x1ec>
 8006b76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b78:	445a      	add	r2, fp
 8006b7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f000 809f 	beq.w	8006cc4 <_vfiprintf_r+0x1ec>
 8006b86:	2300      	movs	r3, #0
 8006b88:	f04f 32ff 	mov.w	r2, #4294967295
 8006b8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b90:	f10a 0a01 	add.w	sl, sl, #1
 8006b94:	9304      	str	r3, [sp, #16]
 8006b96:	9307      	str	r3, [sp, #28]
 8006b98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b9e:	4654      	mov	r4, sl
 8006ba0:	2205      	movs	r2, #5
 8006ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ba6:	4853      	ldr	r0, [pc, #332]	@ (8006cf4 <_vfiprintf_r+0x21c>)
 8006ba8:	f7f9 fb12 	bl	80001d0 <memchr>
 8006bac:	9a04      	ldr	r2, [sp, #16]
 8006bae:	b9d8      	cbnz	r0, 8006be8 <_vfiprintf_r+0x110>
 8006bb0:	06d1      	lsls	r1, r2, #27
 8006bb2:	bf44      	itt	mi
 8006bb4:	2320      	movmi	r3, #32
 8006bb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bba:	0713      	lsls	r3, r2, #28
 8006bbc:	bf44      	itt	mi
 8006bbe:	232b      	movmi	r3, #43	@ 0x2b
 8006bc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bc4:	f89a 3000 	ldrb.w	r3, [sl]
 8006bc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bca:	d015      	beq.n	8006bf8 <_vfiprintf_r+0x120>
 8006bcc:	9a07      	ldr	r2, [sp, #28]
 8006bce:	4654      	mov	r4, sl
 8006bd0:	2000      	movs	r0, #0
 8006bd2:	f04f 0c0a 	mov.w	ip, #10
 8006bd6:	4621      	mov	r1, r4
 8006bd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bdc:	3b30      	subs	r3, #48	@ 0x30
 8006bde:	2b09      	cmp	r3, #9
 8006be0:	d94b      	bls.n	8006c7a <_vfiprintf_r+0x1a2>
 8006be2:	b1b0      	cbz	r0, 8006c12 <_vfiprintf_r+0x13a>
 8006be4:	9207      	str	r2, [sp, #28]
 8006be6:	e014      	b.n	8006c12 <_vfiprintf_r+0x13a>
 8006be8:	eba0 0308 	sub.w	r3, r0, r8
 8006bec:	fa09 f303 	lsl.w	r3, r9, r3
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	9304      	str	r3, [sp, #16]
 8006bf4:	46a2      	mov	sl, r4
 8006bf6:	e7d2      	b.n	8006b9e <_vfiprintf_r+0xc6>
 8006bf8:	9b03      	ldr	r3, [sp, #12]
 8006bfa:	1d19      	adds	r1, r3, #4
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	9103      	str	r1, [sp, #12]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	bfbb      	ittet	lt
 8006c04:	425b      	neglt	r3, r3
 8006c06:	f042 0202 	orrlt.w	r2, r2, #2
 8006c0a:	9307      	strge	r3, [sp, #28]
 8006c0c:	9307      	strlt	r3, [sp, #28]
 8006c0e:	bfb8      	it	lt
 8006c10:	9204      	strlt	r2, [sp, #16]
 8006c12:	7823      	ldrb	r3, [r4, #0]
 8006c14:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c16:	d10a      	bne.n	8006c2e <_vfiprintf_r+0x156>
 8006c18:	7863      	ldrb	r3, [r4, #1]
 8006c1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c1c:	d132      	bne.n	8006c84 <_vfiprintf_r+0x1ac>
 8006c1e:	9b03      	ldr	r3, [sp, #12]
 8006c20:	1d1a      	adds	r2, r3, #4
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	9203      	str	r2, [sp, #12]
 8006c26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c2a:	3402      	adds	r4, #2
 8006c2c:	9305      	str	r3, [sp, #20]
 8006c2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006d04 <_vfiprintf_r+0x22c>
 8006c32:	7821      	ldrb	r1, [r4, #0]
 8006c34:	2203      	movs	r2, #3
 8006c36:	4650      	mov	r0, sl
 8006c38:	f7f9 faca 	bl	80001d0 <memchr>
 8006c3c:	b138      	cbz	r0, 8006c4e <_vfiprintf_r+0x176>
 8006c3e:	9b04      	ldr	r3, [sp, #16]
 8006c40:	eba0 000a 	sub.w	r0, r0, sl
 8006c44:	2240      	movs	r2, #64	@ 0x40
 8006c46:	4082      	lsls	r2, r0
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	3401      	adds	r4, #1
 8006c4c:	9304      	str	r3, [sp, #16]
 8006c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c52:	4829      	ldr	r0, [pc, #164]	@ (8006cf8 <_vfiprintf_r+0x220>)
 8006c54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c58:	2206      	movs	r2, #6
 8006c5a:	f7f9 fab9 	bl	80001d0 <memchr>
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	d03f      	beq.n	8006ce2 <_vfiprintf_r+0x20a>
 8006c62:	4b26      	ldr	r3, [pc, #152]	@ (8006cfc <_vfiprintf_r+0x224>)
 8006c64:	bb1b      	cbnz	r3, 8006cae <_vfiprintf_r+0x1d6>
 8006c66:	9b03      	ldr	r3, [sp, #12]
 8006c68:	3307      	adds	r3, #7
 8006c6a:	f023 0307 	bic.w	r3, r3, #7
 8006c6e:	3308      	adds	r3, #8
 8006c70:	9303      	str	r3, [sp, #12]
 8006c72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c74:	443b      	add	r3, r7
 8006c76:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c78:	e76a      	b.n	8006b50 <_vfiprintf_r+0x78>
 8006c7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c7e:	460c      	mov	r4, r1
 8006c80:	2001      	movs	r0, #1
 8006c82:	e7a8      	b.n	8006bd6 <_vfiprintf_r+0xfe>
 8006c84:	2300      	movs	r3, #0
 8006c86:	3401      	adds	r4, #1
 8006c88:	9305      	str	r3, [sp, #20]
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	f04f 0c0a 	mov.w	ip, #10
 8006c90:	4620      	mov	r0, r4
 8006c92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c96:	3a30      	subs	r2, #48	@ 0x30
 8006c98:	2a09      	cmp	r2, #9
 8006c9a:	d903      	bls.n	8006ca4 <_vfiprintf_r+0x1cc>
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d0c6      	beq.n	8006c2e <_vfiprintf_r+0x156>
 8006ca0:	9105      	str	r1, [sp, #20]
 8006ca2:	e7c4      	b.n	8006c2e <_vfiprintf_r+0x156>
 8006ca4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ca8:	4604      	mov	r4, r0
 8006caa:	2301      	movs	r3, #1
 8006cac:	e7f0      	b.n	8006c90 <_vfiprintf_r+0x1b8>
 8006cae:	ab03      	add	r3, sp, #12
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	462a      	mov	r2, r5
 8006cb4:	4b12      	ldr	r3, [pc, #72]	@ (8006d00 <_vfiprintf_r+0x228>)
 8006cb6:	a904      	add	r1, sp, #16
 8006cb8:	4630      	mov	r0, r6
 8006cba:	f7fd feb7 	bl	8004a2c <_printf_float>
 8006cbe:	4607      	mov	r7, r0
 8006cc0:	1c78      	adds	r0, r7, #1
 8006cc2:	d1d6      	bne.n	8006c72 <_vfiprintf_r+0x19a>
 8006cc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cc6:	07d9      	lsls	r1, r3, #31
 8006cc8:	d405      	bmi.n	8006cd6 <_vfiprintf_r+0x1fe>
 8006cca:	89ab      	ldrh	r3, [r5, #12]
 8006ccc:	059a      	lsls	r2, r3, #22
 8006cce:	d402      	bmi.n	8006cd6 <_vfiprintf_r+0x1fe>
 8006cd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cd2:	f7fe fbf9 	bl	80054c8 <__retarget_lock_release_recursive>
 8006cd6:	89ab      	ldrh	r3, [r5, #12]
 8006cd8:	065b      	lsls	r3, r3, #25
 8006cda:	f53f af1f 	bmi.w	8006b1c <_vfiprintf_r+0x44>
 8006cde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ce0:	e71e      	b.n	8006b20 <_vfiprintf_r+0x48>
 8006ce2:	ab03      	add	r3, sp, #12
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	462a      	mov	r2, r5
 8006ce8:	4b05      	ldr	r3, [pc, #20]	@ (8006d00 <_vfiprintf_r+0x228>)
 8006cea:	a904      	add	r1, sp, #16
 8006cec:	4630      	mov	r0, r6
 8006cee:	f7fe f935 	bl	8004f5c <_printf_i>
 8006cf2:	e7e4      	b.n	8006cbe <_vfiprintf_r+0x1e6>
 8006cf4:	08007480 	.word	0x08007480
 8006cf8:	0800748a 	.word	0x0800748a
 8006cfc:	08004a2d 	.word	0x08004a2d
 8006d00:	08006ab3 	.word	0x08006ab3
 8006d04:	08007486 	.word	0x08007486

08006d08 <__sflush_r>:
 8006d08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d10:	0716      	lsls	r6, r2, #28
 8006d12:	4605      	mov	r5, r0
 8006d14:	460c      	mov	r4, r1
 8006d16:	d454      	bmi.n	8006dc2 <__sflush_r+0xba>
 8006d18:	684b      	ldr	r3, [r1, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	dc02      	bgt.n	8006d24 <__sflush_r+0x1c>
 8006d1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	dd48      	ble.n	8006db6 <__sflush_r+0xae>
 8006d24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d26:	2e00      	cmp	r6, #0
 8006d28:	d045      	beq.n	8006db6 <__sflush_r+0xae>
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006d30:	682f      	ldr	r7, [r5, #0]
 8006d32:	6a21      	ldr	r1, [r4, #32]
 8006d34:	602b      	str	r3, [r5, #0]
 8006d36:	d030      	beq.n	8006d9a <__sflush_r+0x92>
 8006d38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006d3a:	89a3      	ldrh	r3, [r4, #12]
 8006d3c:	0759      	lsls	r1, r3, #29
 8006d3e:	d505      	bpl.n	8006d4c <__sflush_r+0x44>
 8006d40:	6863      	ldr	r3, [r4, #4]
 8006d42:	1ad2      	subs	r2, r2, r3
 8006d44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006d46:	b10b      	cbz	r3, 8006d4c <__sflush_r+0x44>
 8006d48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006d4a:	1ad2      	subs	r2, r2, r3
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d50:	6a21      	ldr	r1, [r4, #32]
 8006d52:	4628      	mov	r0, r5
 8006d54:	47b0      	blx	r6
 8006d56:	1c43      	adds	r3, r0, #1
 8006d58:	89a3      	ldrh	r3, [r4, #12]
 8006d5a:	d106      	bne.n	8006d6a <__sflush_r+0x62>
 8006d5c:	6829      	ldr	r1, [r5, #0]
 8006d5e:	291d      	cmp	r1, #29
 8006d60:	d82b      	bhi.n	8006dba <__sflush_r+0xb2>
 8006d62:	4a2a      	ldr	r2, [pc, #168]	@ (8006e0c <__sflush_r+0x104>)
 8006d64:	410a      	asrs	r2, r1
 8006d66:	07d6      	lsls	r6, r2, #31
 8006d68:	d427      	bmi.n	8006dba <__sflush_r+0xb2>
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	6062      	str	r2, [r4, #4]
 8006d6e:	04d9      	lsls	r1, r3, #19
 8006d70:	6922      	ldr	r2, [r4, #16]
 8006d72:	6022      	str	r2, [r4, #0]
 8006d74:	d504      	bpl.n	8006d80 <__sflush_r+0x78>
 8006d76:	1c42      	adds	r2, r0, #1
 8006d78:	d101      	bne.n	8006d7e <__sflush_r+0x76>
 8006d7a:	682b      	ldr	r3, [r5, #0]
 8006d7c:	b903      	cbnz	r3, 8006d80 <__sflush_r+0x78>
 8006d7e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006d80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d82:	602f      	str	r7, [r5, #0]
 8006d84:	b1b9      	cbz	r1, 8006db6 <__sflush_r+0xae>
 8006d86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d8a:	4299      	cmp	r1, r3
 8006d8c:	d002      	beq.n	8006d94 <__sflush_r+0x8c>
 8006d8e:	4628      	mov	r0, r5
 8006d90:	f7ff f9f6 	bl	8006180 <_free_r>
 8006d94:	2300      	movs	r3, #0
 8006d96:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d98:	e00d      	b.n	8006db6 <__sflush_r+0xae>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	47b0      	blx	r6
 8006da0:	4602      	mov	r2, r0
 8006da2:	1c50      	adds	r0, r2, #1
 8006da4:	d1c9      	bne.n	8006d3a <__sflush_r+0x32>
 8006da6:	682b      	ldr	r3, [r5, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d0c6      	beq.n	8006d3a <__sflush_r+0x32>
 8006dac:	2b1d      	cmp	r3, #29
 8006dae:	d001      	beq.n	8006db4 <__sflush_r+0xac>
 8006db0:	2b16      	cmp	r3, #22
 8006db2:	d11e      	bne.n	8006df2 <__sflush_r+0xea>
 8006db4:	602f      	str	r7, [r5, #0]
 8006db6:	2000      	movs	r0, #0
 8006db8:	e022      	b.n	8006e00 <__sflush_r+0xf8>
 8006dba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dbe:	b21b      	sxth	r3, r3
 8006dc0:	e01b      	b.n	8006dfa <__sflush_r+0xf2>
 8006dc2:	690f      	ldr	r7, [r1, #16]
 8006dc4:	2f00      	cmp	r7, #0
 8006dc6:	d0f6      	beq.n	8006db6 <__sflush_r+0xae>
 8006dc8:	0793      	lsls	r3, r2, #30
 8006dca:	680e      	ldr	r6, [r1, #0]
 8006dcc:	bf08      	it	eq
 8006dce:	694b      	ldreq	r3, [r1, #20]
 8006dd0:	600f      	str	r7, [r1, #0]
 8006dd2:	bf18      	it	ne
 8006dd4:	2300      	movne	r3, #0
 8006dd6:	eba6 0807 	sub.w	r8, r6, r7
 8006dda:	608b      	str	r3, [r1, #8]
 8006ddc:	f1b8 0f00 	cmp.w	r8, #0
 8006de0:	dde9      	ble.n	8006db6 <__sflush_r+0xae>
 8006de2:	6a21      	ldr	r1, [r4, #32]
 8006de4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006de6:	4643      	mov	r3, r8
 8006de8:	463a      	mov	r2, r7
 8006dea:	4628      	mov	r0, r5
 8006dec:	47b0      	blx	r6
 8006dee:	2800      	cmp	r0, #0
 8006df0:	dc08      	bgt.n	8006e04 <__sflush_r+0xfc>
 8006df2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006df6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dfa:	81a3      	strh	r3, [r4, #12]
 8006dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e04:	4407      	add	r7, r0
 8006e06:	eba8 0800 	sub.w	r8, r8, r0
 8006e0a:	e7e7      	b.n	8006ddc <__sflush_r+0xd4>
 8006e0c:	dfbffffe 	.word	0xdfbffffe

08006e10 <_fflush_r>:
 8006e10:	b538      	push	{r3, r4, r5, lr}
 8006e12:	690b      	ldr	r3, [r1, #16]
 8006e14:	4605      	mov	r5, r0
 8006e16:	460c      	mov	r4, r1
 8006e18:	b913      	cbnz	r3, 8006e20 <_fflush_r+0x10>
 8006e1a:	2500      	movs	r5, #0
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	bd38      	pop	{r3, r4, r5, pc}
 8006e20:	b118      	cbz	r0, 8006e2a <_fflush_r+0x1a>
 8006e22:	6a03      	ldr	r3, [r0, #32]
 8006e24:	b90b      	cbnz	r3, 8006e2a <_fflush_r+0x1a>
 8006e26:	f7fe fa45 	bl	80052b4 <__sinit>
 8006e2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d0f3      	beq.n	8006e1a <_fflush_r+0xa>
 8006e32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006e34:	07d0      	lsls	r0, r2, #31
 8006e36:	d404      	bmi.n	8006e42 <_fflush_r+0x32>
 8006e38:	0599      	lsls	r1, r3, #22
 8006e3a:	d402      	bmi.n	8006e42 <_fflush_r+0x32>
 8006e3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e3e:	f7fe fb42 	bl	80054c6 <__retarget_lock_acquire_recursive>
 8006e42:	4628      	mov	r0, r5
 8006e44:	4621      	mov	r1, r4
 8006e46:	f7ff ff5f 	bl	8006d08 <__sflush_r>
 8006e4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e4c:	07da      	lsls	r2, r3, #31
 8006e4e:	4605      	mov	r5, r0
 8006e50:	d4e4      	bmi.n	8006e1c <_fflush_r+0xc>
 8006e52:	89a3      	ldrh	r3, [r4, #12]
 8006e54:	059b      	lsls	r3, r3, #22
 8006e56:	d4e1      	bmi.n	8006e1c <_fflush_r+0xc>
 8006e58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e5a:	f7fe fb35 	bl	80054c8 <__retarget_lock_release_recursive>
 8006e5e:	e7dd      	b.n	8006e1c <_fflush_r+0xc>

08006e60 <__swbuf_r>:
 8006e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e62:	460e      	mov	r6, r1
 8006e64:	4614      	mov	r4, r2
 8006e66:	4605      	mov	r5, r0
 8006e68:	b118      	cbz	r0, 8006e72 <__swbuf_r+0x12>
 8006e6a:	6a03      	ldr	r3, [r0, #32]
 8006e6c:	b90b      	cbnz	r3, 8006e72 <__swbuf_r+0x12>
 8006e6e:	f7fe fa21 	bl	80052b4 <__sinit>
 8006e72:	69a3      	ldr	r3, [r4, #24]
 8006e74:	60a3      	str	r3, [r4, #8]
 8006e76:	89a3      	ldrh	r3, [r4, #12]
 8006e78:	071a      	lsls	r2, r3, #28
 8006e7a:	d501      	bpl.n	8006e80 <__swbuf_r+0x20>
 8006e7c:	6923      	ldr	r3, [r4, #16]
 8006e7e:	b943      	cbnz	r3, 8006e92 <__swbuf_r+0x32>
 8006e80:	4621      	mov	r1, r4
 8006e82:	4628      	mov	r0, r5
 8006e84:	f000 f82a 	bl	8006edc <__swsetup_r>
 8006e88:	b118      	cbz	r0, 8006e92 <__swbuf_r+0x32>
 8006e8a:	f04f 37ff 	mov.w	r7, #4294967295
 8006e8e:	4638      	mov	r0, r7
 8006e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	6922      	ldr	r2, [r4, #16]
 8006e96:	1a98      	subs	r0, r3, r2
 8006e98:	6963      	ldr	r3, [r4, #20]
 8006e9a:	b2f6      	uxtb	r6, r6
 8006e9c:	4283      	cmp	r3, r0
 8006e9e:	4637      	mov	r7, r6
 8006ea0:	dc05      	bgt.n	8006eae <__swbuf_r+0x4e>
 8006ea2:	4621      	mov	r1, r4
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	f7ff ffb3 	bl	8006e10 <_fflush_r>
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	d1ed      	bne.n	8006e8a <__swbuf_r+0x2a>
 8006eae:	68a3      	ldr	r3, [r4, #8]
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	60a3      	str	r3, [r4, #8]
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	1c5a      	adds	r2, r3, #1
 8006eb8:	6022      	str	r2, [r4, #0]
 8006eba:	701e      	strb	r6, [r3, #0]
 8006ebc:	6962      	ldr	r2, [r4, #20]
 8006ebe:	1c43      	adds	r3, r0, #1
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d004      	beq.n	8006ece <__swbuf_r+0x6e>
 8006ec4:	89a3      	ldrh	r3, [r4, #12]
 8006ec6:	07db      	lsls	r3, r3, #31
 8006ec8:	d5e1      	bpl.n	8006e8e <__swbuf_r+0x2e>
 8006eca:	2e0a      	cmp	r6, #10
 8006ecc:	d1df      	bne.n	8006e8e <__swbuf_r+0x2e>
 8006ece:	4621      	mov	r1, r4
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	f7ff ff9d 	bl	8006e10 <_fflush_r>
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	d0d9      	beq.n	8006e8e <__swbuf_r+0x2e>
 8006eda:	e7d6      	b.n	8006e8a <__swbuf_r+0x2a>

08006edc <__swsetup_r>:
 8006edc:	b538      	push	{r3, r4, r5, lr}
 8006ede:	4b29      	ldr	r3, [pc, #164]	@ (8006f84 <__swsetup_r+0xa8>)
 8006ee0:	4605      	mov	r5, r0
 8006ee2:	6818      	ldr	r0, [r3, #0]
 8006ee4:	460c      	mov	r4, r1
 8006ee6:	b118      	cbz	r0, 8006ef0 <__swsetup_r+0x14>
 8006ee8:	6a03      	ldr	r3, [r0, #32]
 8006eea:	b90b      	cbnz	r3, 8006ef0 <__swsetup_r+0x14>
 8006eec:	f7fe f9e2 	bl	80052b4 <__sinit>
 8006ef0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ef4:	0719      	lsls	r1, r3, #28
 8006ef6:	d422      	bmi.n	8006f3e <__swsetup_r+0x62>
 8006ef8:	06da      	lsls	r2, r3, #27
 8006efa:	d407      	bmi.n	8006f0c <__swsetup_r+0x30>
 8006efc:	2209      	movs	r2, #9
 8006efe:	602a      	str	r2, [r5, #0]
 8006f00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f04:	81a3      	strh	r3, [r4, #12]
 8006f06:	f04f 30ff 	mov.w	r0, #4294967295
 8006f0a:	e033      	b.n	8006f74 <__swsetup_r+0x98>
 8006f0c:	0758      	lsls	r0, r3, #29
 8006f0e:	d512      	bpl.n	8006f36 <__swsetup_r+0x5a>
 8006f10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f12:	b141      	cbz	r1, 8006f26 <__swsetup_r+0x4a>
 8006f14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f18:	4299      	cmp	r1, r3
 8006f1a:	d002      	beq.n	8006f22 <__swsetup_r+0x46>
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	f7ff f92f 	bl	8006180 <_free_r>
 8006f22:	2300      	movs	r3, #0
 8006f24:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f26:	89a3      	ldrh	r3, [r4, #12]
 8006f28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006f2c:	81a3      	strh	r3, [r4, #12]
 8006f2e:	2300      	movs	r3, #0
 8006f30:	6063      	str	r3, [r4, #4]
 8006f32:	6923      	ldr	r3, [r4, #16]
 8006f34:	6023      	str	r3, [r4, #0]
 8006f36:	89a3      	ldrh	r3, [r4, #12]
 8006f38:	f043 0308 	orr.w	r3, r3, #8
 8006f3c:	81a3      	strh	r3, [r4, #12]
 8006f3e:	6923      	ldr	r3, [r4, #16]
 8006f40:	b94b      	cbnz	r3, 8006f56 <__swsetup_r+0x7a>
 8006f42:	89a3      	ldrh	r3, [r4, #12]
 8006f44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006f48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f4c:	d003      	beq.n	8006f56 <__swsetup_r+0x7a>
 8006f4e:	4621      	mov	r1, r4
 8006f50:	4628      	mov	r0, r5
 8006f52:	f000 f8b3 	bl	80070bc <__smakebuf_r>
 8006f56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f5a:	f013 0201 	ands.w	r2, r3, #1
 8006f5e:	d00a      	beq.n	8006f76 <__swsetup_r+0x9a>
 8006f60:	2200      	movs	r2, #0
 8006f62:	60a2      	str	r2, [r4, #8]
 8006f64:	6962      	ldr	r2, [r4, #20]
 8006f66:	4252      	negs	r2, r2
 8006f68:	61a2      	str	r2, [r4, #24]
 8006f6a:	6922      	ldr	r2, [r4, #16]
 8006f6c:	b942      	cbnz	r2, 8006f80 <__swsetup_r+0xa4>
 8006f6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006f72:	d1c5      	bne.n	8006f00 <__swsetup_r+0x24>
 8006f74:	bd38      	pop	{r3, r4, r5, pc}
 8006f76:	0799      	lsls	r1, r3, #30
 8006f78:	bf58      	it	pl
 8006f7a:	6962      	ldrpl	r2, [r4, #20]
 8006f7c:	60a2      	str	r2, [r4, #8]
 8006f7e:	e7f4      	b.n	8006f6a <__swsetup_r+0x8e>
 8006f80:	2000      	movs	r0, #0
 8006f82:	e7f7      	b.n	8006f74 <__swsetup_r+0x98>
 8006f84:	2000001c 	.word	0x2000001c

08006f88 <_sbrk_r>:
 8006f88:	b538      	push	{r3, r4, r5, lr}
 8006f8a:	4d06      	ldr	r5, [pc, #24]	@ (8006fa4 <_sbrk_r+0x1c>)
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	4604      	mov	r4, r0
 8006f90:	4608      	mov	r0, r1
 8006f92:	602b      	str	r3, [r5, #0]
 8006f94:	f7fa fbc4 	bl	8001720 <_sbrk>
 8006f98:	1c43      	adds	r3, r0, #1
 8006f9a:	d102      	bne.n	8006fa2 <_sbrk_r+0x1a>
 8006f9c:	682b      	ldr	r3, [r5, #0]
 8006f9e:	b103      	cbz	r3, 8006fa2 <_sbrk_r+0x1a>
 8006fa0:	6023      	str	r3, [r4, #0]
 8006fa2:	bd38      	pop	{r3, r4, r5, pc}
 8006fa4:	20000b30 	.word	0x20000b30

08006fa8 <__assert_func>:
 8006fa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006faa:	4614      	mov	r4, r2
 8006fac:	461a      	mov	r2, r3
 8006fae:	4b09      	ldr	r3, [pc, #36]	@ (8006fd4 <__assert_func+0x2c>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4605      	mov	r5, r0
 8006fb4:	68d8      	ldr	r0, [r3, #12]
 8006fb6:	b954      	cbnz	r4, 8006fce <__assert_func+0x26>
 8006fb8:	4b07      	ldr	r3, [pc, #28]	@ (8006fd8 <__assert_func+0x30>)
 8006fba:	461c      	mov	r4, r3
 8006fbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006fc0:	9100      	str	r1, [sp, #0]
 8006fc2:	462b      	mov	r3, r5
 8006fc4:	4905      	ldr	r1, [pc, #20]	@ (8006fdc <__assert_func+0x34>)
 8006fc6:	f000 f841 	bl	800704c <fiprintf>
 8006fca:	f000 f8d5 	bl	8007178 <abort>
 8006fce:	4b04      	ldr	r3, [pc, #16]	@ (8006fe0 <__assert_func+0x38>)
 8006fd0:	e7f4      	b.n	8006fbc <__assert_func+0x14>
 8006fd2:	bf00      	nop
 8006fd4:	2000001c 	.word	0x2000001c
 8006fd8:	080074d6 	.word	0x080074d6
 8006fdc:	080074a8 	.word	0x080074a8
 8006fe0:	0800749b 	.word	0x0800749b

08006fe4 <_calloc_r>:
 8006fe4:	b570      	push	{r4, r5, r6, lr}
 8006fe6:	fba1 5402 	umull	r5, r4, r1, r2
 8006fea:	b93c      	cbnz	r4, 8006ffc <_calloc_r+0x18>
 8006fec:	4629      	mov	r1, r5
 8006fee:	f7ff f93b 	bl	8006268 <_malloc_r>
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	b928      	cbnz	r0, 8007002 <_calloc_r+0x1e>
 8006ff6:	2600      	movs	r6, #0
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	bd70      	pop	{r4, r5, r6, pc}
 8006ffc:	220c      	movs	r2, #12
 8006ffe:	6002      	str	r2, [r0, #0]
 8007000:	e7f9      	b.n	8006ff6 <_calloc_r+0x12>
 8007002:	462a      	mov	r2, r5
 8007004:	4621      	mov	r1, r4
 8007006:	f7fe f9e0 	bl	80053ca <memset>
 800700a:	e7f5      	b.n	8006ff8 <_calloc_r+0x14>

0800700c <__ascii_mbtowc>:
 800700c:	b082      	sub	sp, #8
 800700e:	b901      	cbnz	r1, 8007012 <__ascii_mbtowc+0x6>
 8007010:	a901      	add	r1, sp, #4
 8007012:	b142      	cbz	r2, 8007026 <__ascii_mbtowc+0x1a>
 8007014:	b14b      	cbz	r3, 800702a <__ascii_mbtowc+0x1e>
 8007016:	7813      	ldrb	r3, [r2, #0]
 8007018:	600b      	str	r3, [r1, #0]
 800701a:	7812      	ldrb	r2, [r2, #0]
 800701c:	1e10      	subs	r0, r2, #0
 800701e:	bf18      	it	ne
 8007020:	2001      	movne	r0, #1
 8007022:	b002      	add	sp, #8
 8007024:	4770      	bx	lr
 8007026:	4610      	mov	r0, r2
 8007028:	e7fb      	b.n	8007022 <__ascii_mbtowc+0x16>
 800702a:	f06f 0001 	mvn.w	r0, #1
 800702e:	e7f8      	b.n	8007022 <__ascii_mbtowc+0x16>

08007030 <__ascii_wctomb>:
 8007030:	4603      	mov	r3, r0
 8007032:	4608      	mov	r0, r1
 8007034:	b141      	cbz	r1, 8007048 <__ascii_wctomb+0x18>
 8007036:	2aff      	cmp	r2, #255	@ 0xff
 8007038:	d904      	bls.n	8007044 <__ascii_wctomb+0x14>
 800703a:	228a      	movs	r2, #138	@ 0x8a
 800703c:	601a      	str	r2, [r3, #0]
 800703e:	f04f 30ff 	mov.w	r0, #4294967295
 8007042:	4770      	bx	lr
 8007044:	700a      	strb	r2, [r1, #0]
 8007046:	2001      	movs	r0, #1
 8007048:	4770      	bx	lr
	...

0800704c <fiprintf>:
 800704c:	b40e      	push	{r1, r2, r3}
 800704e:	b503      	push	{r0, r1, lr}
 8007050:	4601      	mov	r1, r0
 8007052:	ab03      	add	r3, sp, #12
 8007054:	4805      	ldr	r0, [pc, #20]	@ (800706c <fiprintf+0x20>)
 8007056:	f853 2b04 	ldr.w	r2, [r3], #4
 800705a:	6800      	ldr	r0, [r0, #0]
 800705c:	9301      	str	r3, [sp, #4]
 800705e:	f7ff fd3b 	bl	8006ad8 <_vfiprintf_r>
 8007062:	b002      	add	sp, #8
 8007064:	f85d eb04 	ldr.w	lr, [sp], #4
 8007068:	b003      	add	sp, #12
 800706a:	4770      	bx	lr
 800706c:	2000001c 	.word	0x2000001c

08007070 <__swhatbuf_r>:
 8007070:	b570      	push	{r4, r5, r6, lr}
 8007072:	460c      	mov	r4, r1
 8007074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007078:	2900      	cmp	r1, #0
 800707a:	b096      	sub	sp, #88	@ 0x58
 800707c:	4615      	mov	r5, r2
 800707e:	461e      	mov	r6, r3
 8007080:	da0d      	bge.n	800709e <__swhatbuf_r+0x2e>
 8007082:	89a3      	ldrh	r3, [r4, #12]
 8007084:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007088:	f04f 0100 	mov.w	r1, #0
 800708c:	bf14      	ite	ne
 800708e:	2340      	movne	r3, #64	@ 0x40
 8007090:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007094:	2000      	movs	r0, #0
 8007096:	6031      	str	r1, [r6, #0]
 8007098:	602b      	str	r3, [r5, #0]
 800709a:	b016      	add	sp, #88	@ 0x58
 800709c:	bd70      	pop	{r4, r5, r6, pc}
 800709e:	466a      	mov	r2, sp
 80070a0:	f000 f848 	bl	8007134 <_fstat_r>
 80070a4:	2800      	cmp	r0, #0
 80070a6:	dbec      	blt.n	8007082 <__swhatbuf_r+0x12>
 80070a8:	9901      	ldr	r1, [sp, #4]
 80070aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80070ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80070b2:	4259      	negs	r1, r3
 80070b4:	4159      	adcs	r1, r3
 80070b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80070ba:	e7eb      	b.n	8007094 <__swhatbuf_r+0x24>

080070bc <__smakebuf_r>:
 80070bc:	898b      	ldrh	r3, [r1, #12]
 80070be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070c0:	079d      	lsls	r5, r3, #30
 80070c2:	4606      	mov	r6, r0
 80070c4:	460c      	mov	r4, r1
 80070c6:	d507      	bpl.n	80070d8 <__smakebuf_r+0x1c>
 80070c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80070cc:	6023      	str	r3, [r4, #0]
 80070ce:	6123      	str	r3, [r4, #16]
 80070d0:	2301      	movs	r3, #1
 80070d2:	6163      	str	r3, [r4, #20]
 80070d4:	b003      	add	sp, #12
 80070d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070d8:	ab01      	add	r3, sp, #4
 80070da:	466a      	mov	r2, sp
 80070dc:	f7ff ffc8 	bl	8007070 <__swhatbuf_r>
 80070e0:	9f00      	ldr	r7, [sp, #0]
 80070e2:	4605      	mov	r5, r0
 80070e4:	4639      	mov	r1, r7
 80070e6:	4630      	mov	r0, r6
 80070e8:	f7ff f8be 	bl	8006268 <_malloc_r>
 80070ec:	b948      	cbnz	r0, 8007102 <__smakebuf_r+0x46>
 80070ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070f2:	059a      	lsls	r2, r3, #22
 80070f4:	d4ee      	bmi.n	80070d4 <__smakebuf_r+0x18>
 80070f6:	f023 0303 	bic.w	r3, r3, #3
 80070fa:	f043 0302 	orr.w	r3, r3, #2
 80070fe:	81a3      	strh	r3, [r4, #12]
 8007100:	e7e2      	b.n	80070c8 <__smakebuf_r+0xc>
 8007102:	89a3      	ldrh	r3, [r4, #12]
 8007104:	6020      	str	r0, [r4, #0]
 8007106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800710a:	81a3      	strh	r3, [r4, #12]
 800710c:	9b01      	ldr	r3, [sp, #4]
 800710e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007112:	b15b      	cbz	r3, 800712c <__smakebuf_r+0x70>
 8007114:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007118:	4630      	mov	r0, r6
 800711a:	f000 f81d 	bl	8007158 <_isatty_r>
 800711e:	b128      	cbz	r0, 800712c <__smakebuf_r+0x70>
 8007120:	89a3      	ldrh	r3, [r4, #12]
 8007122:	f023 0303 	bic.w	r3, r3, #3
 8007126:	f043 0301 	orr.w	r3, r3, #1
 800712a:	81a3      	strh	r3, [r4, #12]
 800712c:	89a3      	ldrh	r3, [r4, #12]
 800712e:	431d      	orrs	r5, r3
 8007130:	81a5      	strh	r5, [r4, #12]
 8007132:	e7cf      	b.n	80070d4 <__smakebuf_r+0x18>

08007134 <_fstat_r>:
 8007134:	b538      	push	{r3, r4, r5, lr}
 8007136:	4d07      	ldr	r5, [pc, #28]	@ (8007154 <_fstat_r+0x20>)
 8007138:	2300      	movs	r3, #0
 800713a:	4604      	mov	r4, r0
 800713c:	4608      	mov	r0, r1
 800713e:	4611      	mov	r1, r2
 8007140:	602b      	str	r3, [r5, #0]
 8007142:	f7fa fac4 	bl	80016ce <_fstat>
 8007146:	1c43      	adds	r3, r0, #1
 8007148:	d102      	bne.n	8007150 <_fstat_r+0x1c>
 800714a:	682b      	ldr	r3, [r5, #0]
 800714c:	b103      	cbz	r3, 8007150 <_fstat_r+0x1c>
 800714e:	6023      	str	r3, [r4, #0]
 8007150:	bd38      	pop	{r3, r4, r5, pc}
 8007152:	bf00      	nop
 8007154:	20000b30 	.word	0x20000b30

08007158 <_isatty_r>:
 8007158:	b538      	push	{r3, r4, r5, lr}
 800715a:	4d06      	ldr	r5, [pc, #24]	@ (8007174 <_isatty_r+0x1c>)
 800715c:	2300      	movs	r3, #0
 800715e:	4604      	mov	r4, r0
 8007160:	4608      	mov	r0, r1
 8007162:	602b      	str	r3, [r5, #0]
 8007164:	f7fa fac3 	bl	80016ee <_isatty>
 8007168:	1c43      	adds	r3, r0, #1
 800716a:	d102      	bne.n	8007172 <_isatty_r+0x1a>
 800716c:	682b      	ldr	r3, [r5, #0]
 800716e:	b103      	cbz	r3, 8007172 <_isatty_r+0x1a>
 8007170:	6023      	str	r3, [r4, #0]
 8007172:	bd38      	pop	{r3, r4, r5, pc}
 8007174:	20000b30 	.word	0x20000b30

08007178 <abort>:
 8007178:	b508      	push	{r3, lr}
 800717a:	2006      	movs	r0, #6
 800717c:	f000 f82c 	bl	80071d8 <raise>
 8007180:	2001      	movs	r0, #1
 8007182:	f7fa fa54 	bl	800162e <_exit>

08007186 <_raise_r>:
 8007186:	291f      	cmp	r1, #31
 8007188:	b538      	push	{r3, r4, r5, lr}
 800718a:	4605      	mov	r5, r0
 800718c:	460c      	mov	r4, r1
 800718e:	d904      	bls.n	800719a <_raise_r+0x14>
 8007190:	2316      	movs	r3, #22
 8007192:	6003      	str	r3, [r0, #0]
 8007194:	f04f 30ff 	mov.w	r0, #4294967295
 8007198:	bd38      	pop	{r3, r4, r5, pc}
 800719a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800719c:	b112      	cbz	r2, 80071a4 <_raise_r+0x1e>
 800719e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071a2:	b94b      	cbnz	r3, 80071b8 <_raise_r+0x32>
 80071a4:	4628      	mov	r0, r5
 80071a6:	f000 f831 	bl	800720c <_getpid_r>
 80071aa:	4622      	mov	r2, r4
 80071ac:	4601      	mov	r1, r0
 80071ae:	4628      	mov	r0, r5
 80071b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071b4:	f000 b818 	b.w	80071e8 <_kill_r>
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d00a      	beq.n	80071d2 <_raise_r+0x4c>
 80071bc:	1c59      	adds	r1, r3, #1
 80071be:	d103      	bne.n	80071c8 <_raise_r+0x42>
 80071c0:	2316      	movs	r3, #22
 80071c2:	6003      	str	r3, [r0, #0]
 80071c4:	2001      	movs	r0, #1
 80071c6:	e7e7      	b.n	8007198 <_raise_r+0x12>
 80071c8:	2100      	movs	r1, #0
 80071ca:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80071ce:	4620      	mov	r0, r4
 80071d0:	4798      	blx	r3
 80071d2:	2000      	movs	r0, #0
 80071d4:	e7e0      	b.n	8007198 <_raise_r+0x12>
	...

080071d8 <raise>:
 80071d8:	4b02      	ldr	r3, [pc, #8]	@ (80071e4 <raise+0xc>)
 80071da:	4601      	mov	r1, r0
 80071dc:	6818      	ldr	r0, [r3, #0]
 80071de:	f7ff bfd2 	b.w	8007186 <_raise_r>
 80071e2:	bf00      	nop
 80071e4:	2000001c 	.word	0x2000001c

080071e8 <_kill_r>:
 80071e8:	b538      	push	{r3, r4, r5, lr}
 80071ea:	4d07      	ldr	r5, [pc, #28]	@ (8007208 <_kill_r+0x20>)
 80071ec:	2300      	movs	r3, #0
 80071ee:	4604      	mov	r4, r0
 80071f0:	4608      	mov	r0, r1
 80071f2:	4611      	mov	r1, r2
 80071f4:	602b      	str	r3, [r5, #0]
 80071f6:	f7fa fa0a 	bl	800160e <_kill>
 80071fa:	1c43      	adds	r3, r0, #1
 80071fc:	d102      	bne.n	8007204 <_kill_r+0x1c>
 80071fe:	682b      	ldr	r3, [r5, #0]
 8007200:	b103      	cbz	r3, 8007204 <_kill_r+0x1c>
 8007202:	6023      	str	r3, [r4, #0]
 8007204:	bd38      	pop	{r3, r4, r5, pc}
 8007206:	bf00      	nop
 8007208:	20000b30 	.word	0x20000b30

0800720c <_getpid_r>:
 800720c:	f7fa b9f7 	b.w	80015fe <_getpid>

08007210 <_init>:
 8007210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007212:	bf00      	nop
 8007214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007216:	bc08      	pop	{r3}
 8007218:	469e      	mov	lr, r3
 800721a:	4770      	bx	lr

0800721c <_fini>:
 800721c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800721e:	bf00      	nop
 8007220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007222:	bc08      	pop	{r3}
 8007224:	469e      	mov	lr, r3
 8007226:	4770      	bx	lr
